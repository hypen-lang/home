/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./src/hypen-kotlin/kotlin/hypen-kotlin.js":
/*!*************************************************!*\
  !*** ./src/hypen-kotlin/kotlin/hypen-kotlin.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n  if (true)\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ \"./src/hypen-kotlin/kotlin/kotlin-kotlin-stdlib.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  else {}\n}(this, function (_, kotlin_kotlin) {\n  'use strict';\n  //region block: imports\n  var imul = Math.imul;\n  var protoOf = kotlin_kotlin.$_$.j1;\n  var classMeta = kotlin_kotlin.$_$.b1;\n  var setMetadataFor = kotlin_kotlin.$_$.k1;\n  var VOID = kotlin_kotlin.$_$.c;\n  var charSequenceLength = kotlin_kotlin.$_$.a1;\n  var charSequenceGet = kotlin_kotlin.$_$.z;\n  var toString = kotlin_kotlin.$_$.j;\n  var drop = kotlin_kotlin.$_$.n1;\n  var THROW_CCE = kotlin_kotlin.$_$.y1;\n  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.e;\n  var Unit_instance = kotlin_kotlin.$_$.k;\n  var isBlank = kotlin_kotlin.$_$.q1;\n  var noWhenBranchMatchedException = kotlin_kotlin.$_$.b2;\n  var listOfNotNull = kotlin_kotlin.$_$.w;\n  var printStackTrace = kotlin_kotlin.$_$.c2;\n  var toString_0 = kotlin_kotlin.$_$.l1;\n  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f;\n  var Exception = kotlin_kotlin.$_$.x1;\n  var filterNotNull = kotlin_kotlin.$_$.p;\n  var isInterface = kotlin_kotlin.$_$.h1;\n  var KProperty0 = kotlin_kotlin.$_$.m1;\n  var getPropertyCallableRef = kotlin_kotlin.$_$.d1;\n  var lazy = kotlin_kotlin.$_$.a2;\n  var interfaceMeta = kotlin_kotlin.$_$.g1;\n  var getStringHashCode = kotlin_kotlin.$_$.e1;\n  var toInt = kotlin_kotlin.$_$.w1;\n  var equals = kotlin_kotlin.$_$.c1;\n  var getOrNull = kotlin_kotlin.$_$.s;\n  var joinToString = kotlin_kotlin.$_$.u;\n  var getKClassFromExpression = kotlin_kotlin.$_$.b;\n  var contentEquals = kotlin_kotlin.$_$.m;\n  var contentHashCode = kotlin_kotlin.$_$.n;\n  var copyToArray = kotlin_kotlin.$_$.o;\n  var joinToString_0 = kotlin_kotlin.$_$.t;\n  var single = kotlin_kotlin.$_$.y;\n  var first = kotlin_kotlin.$_$.r;\n  var hashCode = kotlin_kotlin.$_$.f1;\n  var repeat = kotlin_kotlin.$_$.u1;\n  var objectMeta = kotlin_kotlin.$_$.i1;\n  var Char__hashCode_impl_otmys = kotlin_kotlin.$_$.i;\n  var listOf = kotlin_kotlin.$_$.x;\n  var addAll = kotlin_kotlin.$_$.l;\n  var last = kotlin_kotlin.$_$.v;\n  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.h;\n  var ensureNotNull = kotlin_kotlin.$_$.z1;\n  var firstOrNull = kotlin_kotlin.$_$.q;\n  var isLetterOrDigit = kotlin_kotlin.$_$.s1;\n  var first_0 = kotlin_kotlin.$_$.o1;\n  var isLetter = kotlin_kotlin.$_$.t1;\n  var isDigit = kotlin_kotlin.$_$.r1;\n  var take = kotlin_kotlin.$_$.v1;\n  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.d;\n  var arrayConcat = kotlin_kotlin.$_$.a;\n  var indexOf = kotlin_kotlin.$_$.p1;\n  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.g;\n  //endregion\n  //region block: pre-declaration\n  function invoke(input) {\n    return this.m5(new State(input));\n  }\n  setMetadataFor(Parse, 'Parse', interfaceMeta);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_0, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_1, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_2, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_3, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_4, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_5, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  function stringify(nest) {\n    return toString_0(this);\n  }\n  setMetadataFor(Node, 'Node', interfaceMeta);\n  setMetadataFor(Identifier, 'Identifier', classMeta, VOID, [Node]);\n  setMetadataFor(TypeIdentifier, 'TypeIdentifier', classMeta, VOID, [Node]);\n  setMetadataFor(QuotedString, 'QuotedString', classMeta, VOID, [Node]);\n  setMetadataFor(Word, 'Word', classMeta, VOID, [Node]);\n  setMetadataFor(Number_0, 'Number', classMeta, VOID, [Node]);\n  setMetadataFor(AST, 'AST', classMeta, VOID, [Node]);\n  setMetadataFor(ArgumentDefinition, 'ArgumentDefinition', classMeta, AST);\n  setMetadataFor(ArgumentsDefinition, 'ArgumentsDefinition', classMeta, AST);\n  setMetadataFor(Object_0, 'Object', classMeta, AST);\n  setMetadataFor(ComponentDefinition, 'ComponentDefinition', classMeta, AST);\n  setMetadataFor(Applicator, 'Applicator', classMeta, AST);\n  setMetadataFor(Arguments, 'Arguments', classMeta, AST);\n  setMetadataFor(Argument, 'Argument', classMeta, AST);\n  setMetadataFor(Property, 'Property', classMeta, AST);\n  setMetadataFor(Module, 'Module', classMeta, AST);\n  setMetadataFor(ComponentUsage, 'ComponentUsage', classMeta, AST);\n  setMetadataFor(Block, 'Block', classMeta, AST);\n  setMetadataFor(Whitespace, 'Whitespace', objectMeta, VOID, [Node]);\n  setMetadataFor(Skip, 'Skip', objectMeta, VOID, [Node]);\n  setMetadataFor(Comma, 'Comma', objectMeta, VOID, [Node]);\n  setMetadataFor(Open, 'Open', objectMeta, VOID, [Node]);\n  setMetadataFor(Close, 'Close', objectMeta, VOID, [Node]);\n  setMetadataFor(Bracket, 'Bracket', interfaceMeta, VOID, [Node]);\n  setMetadataFor(Open_0, 'Open', objectMeta, VOID, [Bracket]);\n  setMetadataFor(Close_0, 'Close', objectMeta, VOID, [Bracket]);\n  setMetadataFor(Comment, 'Comment', classMeta, VOID, [Node]);\n  setMetadataFor(Single, 'Single', classMeta, Comment);\n  setMetadataFor(ParsedChar, 'ParsedChar', classMeta, VOID, [Node]);\n  setMetadataFor(Sequence, 'Sequence', classMeta, VOID, [Node]);\n  setMetadataFor(ParsingError, 'ParsingError', classMeta);\n  setMetadataFor(Combined, 'Combined', classMeta, ParsingError);\n  setMetadataFor(UnexpectedToken, 'UnexpectedToken', classMeta, ParsingError);\n  setMetadataFor(UnexpectedEndOfInput, 'UnexpectedEndOfInput', classMeta, ParsingError);\n  setMetadataFor(CommentNotFinished, 'CommentNotFinished', classMeta, ParsingError);\n  setMetadataFor(Result, 'Result', interfaceMeta);\n  setMetadataFor(Success, 'Success', classMeta, VOID, [Result]);\n  setMetadataFor(Failure, 'Failure', classMeta, VOID, [Result]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_6, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_7, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_8, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_9, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_10, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(State, 'State', classMeta);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_11, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_12, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_13, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_14, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_15, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_16, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_17, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_18, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_19, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_20, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_21, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_22, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_23, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_24, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_25, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_26, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_27, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_28, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_29, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_30, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(sam$space_hypen_parser_combinators_Parse$0_31, 'sam$space_hypen_parser_combinators_Parse$0', classMeta, VOID, [Parse]);\n  setMetadataFor(HypenParser, 'HypenParser', classMeta, VOID, VOID, HypenParser);\n  //endregion\n  var any;\n  function get_takeAll() {\n    _init_properties_Meta_kt__u7vhnp();\n    return takeAll;\n  }\n  var takeAll;\n  var splitBy;\n  function get_loop() {\n    _init_properties_Meta_kt__u7vhnp();\n    return loop;\n  }\n  var loop;\n  function get_between() {\n    _init_properties_Meta_kt__u7vhnp();\n    // Inline function 'kotlin.getValue' call\n    var this_0 = between$delegate;\n    between$factory();\n    return this_0.j5();\n  }\n  var between$delegate;\n  function mapError(_this__u8e3s4, map) {\n    _init_properties_Meta_kt__u7vhnp();\n    var tmp = mapError$lambda(_this__u8e3s4, map);\n    return new sam$space_hypen_parser_combinators_Parse$0_1(tmp);\n  }\n  function oneOf(parsers) {\n    _init_properties_Meta_kt__u7vhnp();\n    var tmp = oneOf$lambda(parsers);\n    return new sam$space_hypen_parser_combinators_Parse$0_2(tmp);\n  }\n  function sequence(parsers) {\n    _init_properties_Meta_kt__u7vhnp();\n    var tmp = sequence$lambda(parsers);\n    return new sam$space_hypen_parser_combinators_Parse$0_3(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0(function_0) {\n    this.l5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0).m5 = function (input) {\n    return this.l5_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_0(function_0) {\n    this.o5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_0).m5 = function (input) {\n    return this.o5_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_1(function_0) {\n    this.p5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_1).m5 = function (input) {\n    return this.p5_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_2(function_0) {\n    this.q5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_2).m5 = function (input) {\n    return this.q5_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_3(function_0) {\n    this.r5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_3).m5 = function (input) {\n    return this.r5_1(input);\n  };\n  function any$lambda(input) {\n    _init_properties_Meta_kt__u7vhnp();\n    var remaining = input.s5_1;\n    var tmp;\n    // Inline function 'kotlin.text.isNotEmpty' call\n    if (charSequenceLength(remaining) > 0) {\n      tmp = new Success(new Word(toString(charSequenceGet(remaining, 0))), input.v5(drop(remaining, 1)));\n    } else {\n      tmp = new Failure(remaining, new UnexpectedEndOfInput('Any character', input));\n    }\n    return tmp;\n  }\n  function takeAll$lambda(input) {\n    _init_properties_Meta_kt__u7vhnp();\n    var remaining = input.s5_1;\n    var tmp;\n    // Inline function 'kotlin.text.isNotEmpty' call\n    if (charSequenceLength(remaining) > 0) {\n      tmp = new Success(new Word(remaining), input.v5(''));\n    } else {\n      tmp = new Failure(remaining, new UnexpectedEndOfInput('Any character', input));\n    }\n    return tmp;\n  }\n  function splitBy$lambda(splitter, parser) {\n    _init_properties_Meta_kt__u7vhnp();\n    var tmp = get_loop();\n    var tmp_0 = tmp(oneOf([map(splitter, splitBy$lambda$lambda), parser]));\n    return map(tmp_0, splitBy$lambda$lambda_0);\n  }\n  function splitBy$lambda$lambda(it) {\n    _init_properties_Meta_kt__u7vhnp();\n    return Skip_instance;\n  }\n  function splitBy$lambda$lambda_0(it) {\n    _init_properties_Meta_kt__u7vhnp();\n    var sequence = it instanceof Sequence ? it : THROW_CCE();\n    // Inline function 'kotlin.collections.filterNot' call\n    // Inline function 'kotlin.collections.filterNotTo' call\n    var this_0 = sequence.x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      // Inline function 'space.hypen.parser.combinators.splitBy.<anonymous>.<anonymous>.<anonymous>' call\n      if (!(element instanceof Skip)) {\n        destination.h(element);\n      }\n    }\n    return new Sequence(destination);\n  }\n  function loop$lambda(inside) {\n    _init_properties_Meta_kt__u7vhnp();\n    var tmp = loop$lambda$lambda(inside);\n    return new sam$space_hypen_parser_combinators_Parse$0_4(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_4(function_0) {\n    this.y5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_4).m5 = function (input) {\n    return this.y5_1(input);\n  };\n  function loop$lambda$lambda($inside) {\n    return function (input) {\n      // Inline function 'kotlin.collections.mutableListOf' call\n      var parsed = ArrayList_init_$Create$();\n      var lastState = input;\n      $l$loop_0: while (true) {\n        var tmp;\n        // Inline function 'kotlin.text.isNotEmpty' call\n        var this_0 = lastState.s5_1;\n        if (charSequenceLength(this_0) > 0) {\n          // Inline function 'kotlin.text.isNotBlank' call\n          var this_1 = lastState.s5_1;\n          tmp = !isBlank(this_1);\n        } else {\n          tmp = false;\n        }\n        if (!tmp) {\n          break $l$loop_0;\n        }\n        var result = $inside.n5(lastState.s5_1);\n        if (result instanceof Success) {\n          parsed.h(result.output);\n          lastState = result.state;\n        } else {\n          if (result instanceof Failure) {\n            if (parsed.o())\n              return result;\n            else\n              break $l$loop_0;\n          }\n        }\n      }\n      return new Success(new Sequence(parsed), lastState);\n    };\n  }\n  function between$delegate$lambda() {\n    _init_properties_Meta_kt__u7vhnp();\n    return between$delegate$lambda$lambda;\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_5(function_0) {\n    this.z5_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_5).m5 = function (input) {\n    return this.z5_1(input);\n  };\n  function between$delegate$lambda$lambda(start, end) {\n    _init_properties_Meta_kt__u7vhnp();\n    return between$delegate$lambda$lambda$lambda(start, end);\n  }\n  function between$delegate$lambda$lambda$lambda$lambda$lambda(it) {\n    _init_properties_Meta_kt__u7vhnp();\n    return 'Failed to parse content between start and end. Reason: ' + it;\n  }\n  function between$delegate$lambda$lambda$lambda$lambda($end, $start, $between) {\n    return function (input) {\n      var remaining = input.s5_1;\n      var count = 1;\n      var ending = null;\n      var tmp$ret$3;\n      $l$block: {\n        // Inline function 'kotlin.text.takeWhile' call\n        var inductionVariable = 0;\n        var last = remaining.length;\n        if (inductionVariable < last)\n          do {\n            var index = inductionVariable;\n            inductionVariable = inductionVariable + 1 | 0;\n            // Inline function 'space.hypen.parser.combinators.between$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call\n            var ch = charSequenceGet(remaining, index);\n            var it = toString(ch);\n            var tried = $end.n5(it);\n            var tmp = $end.n5(it);\n            var found = tmp instanceof Success;\n            if (found) {\n              count = count - 1 | 0;\n            } else {\n              var tmp_0 = $start.n5(it);\n              var start = tmp_0 instanceof Success;\n              if (start) {\n                count = count + 1 | 0;\n              }\n            }\n            var tmp_1;\n            if (count === 0) {\n              ending = tried;\n              tmp_1 = false;\n            } else {\n              tmp_1 = true;\n            }\n            if (!tmp_1) {\n              // Inline function 'kotlin.text.substring' call\n              // Inline function 'kotlin.js.asDynamic' call\n              tmp$ret$3 = remaining.substring(0, index);\n              break $l$block;\n            }\n          }\n           while (inductionVariable < last);\n        tmp$ret$3 = remaining;\n      }\n      var tmp0_elvis_lhs = tmp$ret$3;\n      var untilResult = tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs;\n      var tmp_2;\n      // Inline function 'kotlin.text.isEmpty' call\n      if (charSequenceLength(untilResult) === 0) {\n        tmp_2 = new Success(Skip_instance, input);\n      } else {\n        tmp_2 = mapError($between, between$delegate$lambda$lambda$lambda$lambda$lambda).n5(untilResult);\n      }\n      var parsedMiddle = tmp_2;\n      var tmp_3;\n      if (parsedMiddle instanceof Failure) {\n        tmp_3 = parsedMiddle instanceof Failure ? parsedMiddle : THROW_CCE();\n      } else {\n        if (parsedMiddle instanceof Success) {\n          var tmp2_elvis_lhs = ending instanceof Success ? ending : null;\n          var tmp_4;\n          if (tmp2_elvis_lhs == null) {\n            return new Failure(remaining, new UnexpectedEndOfInput('Failed parsing end', input));\n          } else {\n            tmp_4 = tmp2_elvis_lhs;\n          }\n          var endResult = tmp_4;\n          var textRemains = drop(input.s5_1, 1 + untilResult.length | 0);\n          var tmp3_safe_receiver = endResult instanceof Success ? endResult : null;\n          tmp_3 = new Success(new Sequence(listOfNotNull([parsedMiddle.output, tmp3_safe_receiver == null ? null : tmp3_safe_receiver.output])), input.a6(textRemains));\n        } else {\n          noWhenBranchMatchedException();\n        }\n      }\n      return tmp_3;\n    };\n  }\n  function between$delegate$lambda$lambda$lambda($start, $end) {\n    return function (between) {\n      var tmp = between$delegate$lambda$lambda$lambda$lambda($end, $start, between);\n      return plus($start, new sam$space_hypen_parser_combinators_Parse$0_5(tmp));\n    };\n  }\n  function mapError$lambda($this_mapError, $map) {\n    return function (it) {\n      var tmp;\n      try {\n        var res = $this_mapError.m5(it);\n        var tmp_0;\n        if (res instanceof Success) {\n          tmp_0 = res;\n        } else {\n          if (res instanceof Failure) {\n            tmp_0 = new Failure(res.input, combineWith(res.error, $map(res.error)));\n          } else {\n            noWhenBranchMatchedException();\n          }\n        }\n        tmp = tmp_0;\n      } catch ($p) {\n        var tmp_1;\n        if ($p instanceof Exception) {\n          var e = $p;\n          printStackTrace(e);\n          var message = 'Error while mapping an error';\n          throw IllegalStateException_init_$Create$(toString_0(message));\n        } else {\n          throw $p;\n        }\n      }\n      return tmp;\n    };\n  }\n  function oneOf$lambda($parsers) {\n    return function (input) {\n      // Inline function 'kotlin.collections.mutableListOf' call\n      var errors = ArrayList_init_$Create$();\n      var tmp0_iterator = filterNotNull($parsers).k();\n      while (tmp0_iterator.l()) {\n        var parser = tmp0_iterator.m();\n        var result = parser.m5(input);\n        var tmp;\n        if (result instanceof Success) {\n          var tmp_0 = result.output;\n          tmp = !(tmp_0 instanceof Skip);\n        } else {\n          tmp = false;\n        }\n        if (tmp) {\n          return result;\n        } else {\n          if (result instanceof Failure) {\n            errors.h(result.error);\n          }\n        }\n      }\n      return new Failure(input.s5_1, new Combined('No match found', errors));\n    };\n  }\n  function sequence$lambda($parsers) {\n    return function (input) {\n      var remaining = input;\n      // Inline function 'kotlin.collections.mutableListOf' call\n      var nodes = ArrayList_init_$Create$();\n      var indexedObject = $parsers;\n      var inductionVariable = 0;\n      var last = indexedObject.length;\n      $l$loop: while (inductionVariable < last) {\n        var parser = indexedObject[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'kotlin.text.isEmpty' call\n        var this_0 = remaining.s5_1;\n        if (charSequenceLength(this_0) === 0)\n          break $l$loop;\n        var result = parser.m5(remaining);\n        if (result instanceof Success) {\n          remaining = result.state;\n          var tmp = result.output;\n          nodes.h(isInterface(tmp, Node) ? tmp : THROW_CCE());\n        } else {\n          if (result instanceof Failure)\n            return result;\n        }\n      }\n      return nodes.o() ? new Failure(input.s5_1, combineWith(new UnexpectedToken(input.s5_1, input), 'No match found in sequence of ' + input.s5_1)) : new Success(new Sequence(nodes), remaining);\n    };\n  }\n  function between$factory() {\n    return getPropertyCallableRef('between', 0, KProperty0, function () {\n      return get_between();\n    }, null);\n  }\n  var properties_initialized_Meta_kt_isj1g9;\n  function _init_properties_Meta_kt__u7vhnp() {\n    if (!properties_initialized_Meta_kt_isj1g9) {\n      properties_initialized_Meta_kt_isj1g9 = true;\n      var tmp = any$lambda;\n      any = new sam$space_hypen_parser_combinators_Parse$0(tmp);\n      var tmp_0 = takeAll$lambda;\n      takeAll = new sam$space_hypen_parser_combinators_Parse$0_0(tmp_0);\n      splitBy = splitBy$lambda;\n      loop = loop$lambda;\n      between$delegate = lazy(between$delegate$lambda);\n    }\n  }\n  function Node() {\n  }\n  function Identifier(text) {\n    this.text = text;\n  }\n  protoOf(Identifier).c6 = function () {\n    return this.text;\n  };\n  protoOf(Identifier).toString = function () {\n    return this.text;\n  };\n  protoOf(Identifier).f5 = function () {\n    return this.text;\n  };\n  protoOf(Identifier).d6 = function (text) {\n    return new Identifier(text);\n  };\n  protoOf(Identifier).copy = function (text, $super) {\n    text = text === VOID ? this.text : text;\n    return this.d6(text);\n  };\n  protoOf(Identifier).hashCode = function () {\n    return getStringHashCode(this.text);\n  };\n  protoOf(Identifier).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Identifier))\n      return false;\n    var tmp0_other_with_cast = other instanceof Identifier ? other : THROW_CCE();\n    if (!(this.text === tmp0_other_with_cast.text))\n      return false;\n    return true;\n  };\n  function TypeIdentifier(text) {\n    this.text = text;\n  }\n  protoOf(TypeIdentifier).c6 = function () {\n    return this.text;\n  };\n  protoOf(TypeIdentifier).f5 = function () {\n    return this.text;\n  };\n  protoOf(TypeIdentifier).d6 = function (text) {\n    return new TypeIdentifier(text);\n  };\n  protoOf(TypeIdentifier).copy = function (text, $super) {\n    text = text === VOID ? this.text : text;\n    return this.d6(text);\n  };\n  protoOf(TypeIdentifier).toString = function () {\n    return 'TypeIdentifier(text=' + this.text + ')';\n  };\n  protoOf(TypeIdentifier).hashCode = function () {\n    return getStringHashCode(this.text);\n  };\n  protoOf(TypeIdentifier).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof TypeIdentifier))\n      return false;\n    var tmp0_other_with_cast = other instanceof TypeIdentifier ? other : THROW_CCE();\n    if (!(this.text === tmp0_other_with_cast.text))\n      return false;\n    return true;\n  };\n  function QuotedString(text) {\n    this.text = text;\n  }\n  protoOf(QuotedString).c6 = function () {\n    return this.text;\n  };\n  protoOf(QuotedString).toString = function () {\n    return '\"' + this.text + '\"';\n  };\n  protoOf(QuotedString).f5 = function () {\n    return this.text;\n  };\n  protoOf(QuotedString).d6 = function (text) {\n    return new QuotedString(text);\n  };\n  protoOf(QuotedString).copy = function (text, $super) {\n    text = text === VOID ? this.text : text;\n    return this.d6(text);\n  };\n  protoOf(QuotedString).hashCode = function () {\n    return getStringHashCode(this.text);\n  };\n  protoOf(QuotedString).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof QuotedString))\n      return false;\n    var tmp0_other_with_cast = other instanceof QuotedString ? other : THROW_CCE();\n    if (!(this.text === tmp0_other_with_cast.text))\n      return false;\n    return true;\n  };\n  function Word(text) {\n    this.text = text;\n  }\n  protoOf(Word).c6 = function () {\n    return this.text;\n  };\n  protoOf(Word).toString = function () {\n    return this.text;\n  };\n  protoOf(Word).f5 = function () {\n    return this.text;\n  };\n  protoOf(Word).d6 = function (text) {\n    return new Word(text);\n  };\n  protoOf(Word).copy = function (text, $super) {\n    text = text === VOID ? this.text : text;\n    return this.d6(text);\n  };\n  protoOf(Word).hashCode = function () {\n    return getStringHashCode(this.text);\n  };\n  protoOf(Word).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Word))\n      return false;\n    var tmp0_other_with_cast = other instanceof Word ? other : THROW_CCE();\n    if (!(this.text === tmp0_other_with_cast.text))\n      return false;\n    return true;\n  };\n  function Number_0(text) {\n    this.e6_1 = text;\n    this.number = toInt(this.e6_1);\n  }\n  protoOf(Number_0).f6 = function () {\n    return this.number;\n  };\n  protoOf(Number_0).d6 = function (text) {\n    return new Number_0(text);\n  };\n  protoOf(Number_0).copy = function (text, $super) {\n    text = text === VOID ? this.e6_1 : text;\n    return this.d6(text);\n  };\n  protoOf(Number_0).toString = function () {\n    return 'Number(text=' + this.e6_1 + ')';\n  };\n  protoOf(Number_0).hashCode = function () {\n    return getStringHashCode(this.e6_1);\n  };\n  protoOf(Number_0).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Number_0))\n      return false;\n    var tmp0_other_with_cast = other instanceof Number_0 ? other : THROW_CCE();\n    if (!(this.e6_1 === tmp0_other_with_cast.e6_1))\n      return false;\n    return true;\n  };\n  function AST() {\n  }\n  function ArgumentDefinition(name, type) {\n    AST.call(this);\n    this.name = name;\n    this.type = type;\n  }\n  protoOf(ArgumentDefinition).g6 = function () {\n    return this.name;\n  };\n  protoOf(ArgumentDefinition).h6 = function () {\n    return this.type;\n  };\n  protoOf(ArgumentDefinition).toString = function () {\n    var tmp0_safe_receiver = this.name;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text;\n    var tmp = tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs;\n    var tmp2_safe_receiver = this.type;\n    var tmp3_safe_receiver = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.text;\n    var tmp_0;\n    if (tmp3_safe_receiver == null) {\n      tmp_0 = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      // Inline function 'kotlin.contracts.contract' call\n      // Inline function 'space.hypen.parser.combinators.ArgumentDefinition.toString.<anonymous>' call\n      var tmp_1;\n      // Inline function 'kotlin.text.isNotEmpty' call\n      if (charSequenceLength(tmp3_safe_receiver) > 0) {\n        tmp_1 = ': ' + tmp3_safe_receiver + ' ';\n      } else {\n        tmp_1 = '';\n      }\n      tmp_0 = tmp_1;\n    }\n    var tmp4_elvis_lhs = tmp_0;\n    return tmp + (tmp4_elvis_lhs == null ? '' : tmp4_elvis_lhs);\n  };\n  protoOf(ArgumentDefinition).f5 = function () {\n    return this.name;\n  };\n  protoOf(ArgumentDefinition).g5 = function () {\n    return this.type;\n  };\n  protoOf(ArgumentDefinition).i6 = function (name, type) {\n    return new ArgumentDefinition(name, type);\n  };\n  protoOf(ArgumentDefinition).copy = function (name, type, $super) {\n    name = name === VOID ? this.name : name;\n    type = type === VOID ? this.type : type;\n    return this.i6(name, type);\n  };\n  protoOf(ArgumentDefinition).hashCode = function () {\n    var result = this.name == null ? 0 : this.name.hashCode();\n    result = imul(result, 31) + (this.type == null ? 0 : this.type.hashCode()) | 0;\n    return result;\n  };\n  protoOf(ArgumentDefinition).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof ArgumentDefinition))\n      return false;\n    var tmp0_other_with_cast = other instanceof ArgumentDefinition ? other : THROW_CCE();\n    if (!equals(this.name, tmp0_other_with_cast.name))\n      return false;\n    if (!equals(this.type, tmp0_other_with_cast.type))\n      return false;\n    return true;\n  };\n  function ArgumentsDefinition(arguments_0) {\n    AST.call(this);\n    this.arguments = arguments_0;\n  }\n  protoOf(ArgumentsDefinition).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(ArgumentsDefinition).k6 = function (name, position) {\n    // Inline function 'kotlin.collections.find' call\n    var this_0 = this.arguments;\n    var tmp$ret$1;\n    $l$block: {\n      // Inline function 'kotlin.collections.firstOrNull' call\n      var inductionVariable = 0;\n      var last = this_0.length;\n      while (inductionVariable < last) {\n        var element = this_0[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'space.hypen.parser.combinators.ArgumentsDefinition.argFor.<anonymous>' call\n        var tmp0_safe_receiver = element.name;\n        if ((tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text) == name) {\n          tmp$ret$1 = element;\n          break $l$block;\n        }\n      }\n      tmp$ret$1 = null;\n    }\n    var tmp1_elvis_lhs = tmp$ret$1;\n    var tmp;\n    if (tmp1_elvis_lhs == null) {\n      tmp = getOrNull(this.arguments, position == null ? 0 : position);\n    } else {\n      tmp = tmp1_elvis_lhs;\n    }\n    return tmp;\n  };\n  protoOf(ArgumentsDefinition).argFor = function (name, position, $super) {\n    name = name === VOID ? null : name;\n    position = position === VOID ? null : position;\n    return this.k6(name, position);\n  };\n  protoOf(ArgumentsDefinition).toString = function () {\n    return '(' + joinToString(this.arguments, ', ') + ')';\n  };\n  protoOf(ArgumentsDefinition).equals = function (other) {\n    if (this === other)\n      return true;\n    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))\n      return false;\n    if (!(other instanceof Arguments))\n      THROW_CCE();\n    return contentEquals(this.arguments, other.arguments);\n  };\n  protoOf(ArgumentsDefinition).hashCode = function () {\n    return contentHashCode(this.arguments);\n  };\n  protoOf(ArgumentsDefinition).f5 = function () {\n    return this.arguments;\n  };\n  protoOf(ArgumentsDefinition).l6 = function (arguments_0) {\n    return new ArgumentsDefinition(arguments_0);\n  };\n  protoOf(ArgumentsDefinition).copy = function (arguments_0, $super) {\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    return this.l6(arguments_0);\n  };\n  function Object_0(children) {\n    AST.call(this);\n    this.children = children;\n    var tmp = this;\n    // Inline function 'kotlin.collections.toTypedArray' call\n    var this_0 = this.children;\n    tmp.childrenArray = copyToArray(this_0);\n  }\n  protoOf(Object_0).m6 = function () {\n    return this.children;\n  };\n  protoOf(Object_0).n6 = function () {\n    return this.childrenArray;\n  };\n  protoOf(Object_0).toString = function () {\n    var tmp;\n    if (this.children.n() === 1 ? first(this.children).name == null : false) {\n      tmp = single(this.children).toString();\n    } else {\n      tmp = '{ ' + joinToString_0(this.children, ',\\n ') + ' }';\n    }\n    return tmp;\n  };\n  protoOf(Object_0).f5 = function () {\n    return this.children;\n  };\n  protoOf(Object_0).o6 = function (children) {\n    return new Object_0(children);\n  };\n  protoOf(Object_0).copy = function (children, $super) {\n    children = children === VOID ? this.children : children;\n    return this.o6(children);\n  };\n  protoOf(Object_0).hashCode = function () {\n    return hashCode(this.children);\n  };\n  protoOf(Object_0).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Object_0))\n      return false;\n    var tmp0_other_with_cast = other instanceof Object_0 ? other : THROW_CCE();\n    if (!equals(this.children, tmp0_other_with_cast.children))\n      return false;\n    return true;\n  };\n  function ComponentDefinition(name, arguments_0, block) {\n    AST.call(this);\n    this.name = name;\n    this.arguments = arguments_0;\n    this.block = block;\n  }\n  protoOf(ComponentDefinition).g6 = function () {\n    return this.name;\n  };\n  protoOf(ComponentDefinition).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(ComponentDefinition).p6 = function () {\n    return this.block;\n  };\n  protoOf(ComponentDefinition).toString = function () {\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();\n    return 'component ' + this.name.text + this.arguments + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs);\n  };\n  protoOf(ComponentDefinition).f5 = function () {\n    return this.name;\n  };\n  protoOf(ComponentDefinition).g5 = function () {\n    return this.arguments;\n  };\n  protoOf(ComponentDefinition).q6 = function () {\n    return this.block;\n  };\n  protoOf(ComponentDefinition).r6 = function (name, arguments_0, block) {\n    return new ComponentDefinition(name, arguments_0, block);\n  };\n  protoOf(ComponentDefinition).copy = function (name, arguments_0, block, $super) {\n    name = name === VOID ? this.name : name;\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    block = block === VOID ? this.block : block;\n    return this.r6(name, arguments_0, block);\n  };\n  protoOf(ComponentDefinition).hashCode = function () {\n    var result = this.name.hashCode();\n    result = imul(result, 31) + this.arguments.hashCode() | 0;\n    result = imul(result, 31) + (this.block == null ? 0 : this.block.hashCode()) | 0;\n    return result;\n  };\n  protoOf(ComponentDefinition).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof ComponentDefinition))\n      return false;\n    var tmp0_other_with_cast = other instanceof ComponentDefinition ? other : THROW_CCE();\n    if (!this.name.equals(tmp0_other_with_cast.name))\n      return false;\n    if (!this.arguments.equals(tmp0_other_with_cast.arguments))\n      return false;\n    if (!equals(this.block, tmp0_other_with_cast.block))\n      return false;\n    return true;\n  };\n  function Applicator(name, arguments_0, block) {\n    AST.call(this);\n    this.name = name;\n    this.arguments = arguments_0;\n    this.block = block;\n  }\n  protoOf(Applicator).g6 = function () {\n    return this.name;\n  };\n  protoOf(Applicator).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(Applicator).p6 = function () {\n    return this.block;\n  };\n  protoOf(Applicator).toString = function () {\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();\n    return '.' + this.name.text + this.arguments + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs);\n  };\n  protoOf(Applicator).f5 = function () {\n    return this.name;\n  };\n  protoOf(Applicator).g5 = function () {\n    return this.arguments;\n  };\n  protoOf(Applicator).q6 = function () {\n    return this.block;\n  };\n  protoOf(Applicator).s6 = function (name, arguments_0, block) {\n    return new Applicator(name, arguments_0, block);\n  };\n  protoOf(Applicator).copy = function (name, arguments_0, block, $super) {\n    name = name === VOID ? this.name : name;\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    block = block === VOID ? this.block : block;\n    return this.s6(name, arguments_0, block);\n  };\n  protoOf(Applicator).hashCode = function () {\n    var result = this.name.hashCode();\n    result = imul(result, 31) + this.arguments.hashCode() | 0;\n    result = imul(result, 31) + (this.block == null ? 0 : this.block.hashCode()) | 0;\n    return result;\n  };\n  protoOf(Applicator).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Applicator))\n      return false;\n    var tmp0_other_with_cast = other instanceof Applicator ? other : THROW_CCE();\n    if (!this.name.equals(tmp0_other_with_cast.name))\n      return false;\n    if (!this.arguments.equals(tmp0_other_with_cast.arguments))\n      return false;\n    if (!equals(this.block, tmp0_other_with_cast.block))\n      return false;\n    return true;\n  };\n  function Arguments(arguments_0) {\n    AST.call(this);\n    this.arguments = arguments_0;\n  }\n  protoOf(Arguments).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(Arguments).k6 = function (name, position) {\n    // Inline function 'kotlin.collections.find' call\n    var this_0 = this.arguments;\n    var tmp$ret$1;\n    $l$block: {\n      // Inline function 'kotlin.collections.firstOrNull' call\n      var inductionVariable = 0;\n      var last = this_0.length;\n      while (inductionVariable < last) {\n        var element = this_0[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'space.hypen.parser.combinators.Arguments.argFor.<anonymous>' call\n        var tmp0_safe_receiver = element.name;\n        if ((tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text) == name) {\n          tmp$ret$1 = element;\n          break $l$block;\n        }\n      }\n      tmp$ret$1 = null;\n    }\n    var tmp1_elvis_lhs = tmp$ret$1;\n    var tmp;\n    if (tmp1_elvis_lhs == null) {\n      tmp = getOrNull(this.arguments, position == null ? 0 : position);\n    } else {\n      tmp = tmp1_elvis_lhs;\n    }\n    var tmp2_safe_receiver = tmp;\n    return tmp2_safe_receiver == null ? null : tmp2_safe_receiver.value;\n  };\n  protoOf(Arguments).argFor = function (name, position, $super) {\n    name = name === VOID ? null : name;\n    position = position === VOID ? null : position;\n    return this.k6(name, position);\n  };\n  protoOf(Arguments).toString = function () {\n    return '(' + joinToString(this.arguments, ', ') + ')';\n  };\n  protoOf(Arguments).equals = function (other) {\n    if (this === other)\n      return true;\n    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))\n      return false;\n    if (!(other instanceof Arguments))\n      THROW_CCE();\n    return contentEquals(this.arguments, other.arguments);\n  };\n  protoOf(Arguments).hashCode = function () {\n    return contentHashCode(this.arguments);\n  };\n  protoOf(Arguments).f5 = function () {\n    return this.arguments;\n  };\n  protoOf(Arguments).t6 = function (arguments_0) {\n    return new Arguments(arguments_0);\n  };\n  protoOf(Arguments).copy = function (arguments_0, $super) {\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    return this.t6(arguments_0);\n  };\n  function Argument(name, value) {\n    AST.call(this);\n    this.name = name;\n    this.value = value;\n  }\n  protoOf(Argument).g6 = function () {\n    return this.name;\n  };\n  protoOf(Argument).j5 = function () {\n    return this.value;\n  };\n  protoOf(Argument).toString = function () {\n    var tmp0_safe_receiver = this.name;\n    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text;\n    var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver + ': ';\n    return (tmp2_elvis_lhs == null ? '' : tmp2_elvis_lhs) + this.value.b6(0);\n  };\n  protoOf(Argument).f5 = function () {\n    return this.name;\n  };\n  protoOf(Argument).g5 = function () {\n    return this.value;\n  };\n  protoOf(Argument).u6 = function (name, value) {\n    return new Argument(name, value);\n  };\n  protoOf(Argument).copy = function (name, value, $super) {\n    name = name === VOID ? this.name : name;\n    value = value === VOID ? this.value : value;\n    return this.u6(name, value);\n  };\n  protoOf(Argument).hashCode = function () {\n    var result = this.name == null ? 0 : this.name.hashCode();\n    result = imul(result, 31) + hashCode(this.value) | 0;\n    return result;\n  };\n  protoOf(Argument).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Argument))\n      return false;\n    var tmp0_other_with_cast = other instanceof Argument ? other : THROW_CCE();\n    if (!equals(this.name, tmp0_other_with_cast.name))\n      return false;\n    if (!equals(this.value, tmp0_other_with_cast.value))\n      return false;\n    return true;\n  };\n  function Property(name, value) {\n    AST.call(this);\n    this.name = name;\n    this.value = value;\n  }\n  protoOf(Property).g6 = function () {\n    return this.name;\n  };\n  protoOf(Property).j5 = function () {\n    return this.value;\n  };\n  protoOf(Property).toString = function () {\n    var tmp0_safe_receiver = this.name;\n    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text;\n    var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver + ': ';\n    return (tmp2_elvis_lhs == null ? '' : tmp2_elvis_lhs) + this.value.b6(0);\n  };\n  protoOf(Property).f5 = function () {\n    return this.name;\n  };\n  protoOf(Property).g5 = function () {\n    return this.value;\n  };\n  protoOf(Property).u6 = function (name, value) {\n    return new Property(name, value);\n  };\n  protoOf(Property).copy = function (name, value, $super) {\n    name = name === VOID ? this.name : name;\n    value = value === VOID ? this.value : value;\n    return this.u6(name, value);\n  };\n  protoOf(Property).hashCode = function () {\n    var result = this.name == null ? 0 : this.name.hashCode();\n    result = imul(result, 31) + hashCode(this.value) | 0;\n    return result;\n  };\n  protoOf(Property).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Property))\n      return false;\n    var tmp0_other_with_cast = other instanceof Property ? other : THROW_CCE();\n    if (!equals(this.name, tmp0_other_with_cast.name))\n      return false;\n    if (!equals(this.value, tmp0_other_with_cast.value))\n      return false;\n    return true;\n  };\n  function Module(name, arguments_0, block, applicators) {\n    AST.call(this);\n    this.name = name;\n    this.arguments = arguments_0;\n    this.block = block;\n    this.applicators = applicators;\n  }\n  protoOf(Module).g6 = function () {\n    return this.name;\n  };\n  protoOf(Module).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(Module).p6 = function () {\n    return this.block;\n  };\n  protoOf(Module).v6 = function () {\n    return this.applicators;\n  };\n  protoOf(Module).stringify = function (nest) {\n    var indent = repeat('\\t', nest);\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.stringify(nest + 1 | 0);\n    var contents = 'module ' + this.name.text + this.arguments + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs) + joinToString(this.applicators, '');\n    return indent + contents;\n  };\n  protoOf(Module).b6 = function (nest) {\n    return this.stringify(nest);\n  };\n  protoOf(Module).equals = function (other) {\n    if (this === other)\n      return true;\n    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))\n      return false;\n    if (!(other instanceof Module))\n      THROW_CCE();\n    if (!this.name.equals(other.name))\n      return false;\n    if (!this.arguments.equals(other.arguments))\n      return false;\n    if (!equals(this.block, other.block))\n      return false;\n    return contentEquals(this.applicators, other.applicators);\n  };\n  protoOf(Module).hashCode = function () {\n    var result = this.name.hashCode();\n    result = imul(31, result) + this.arguments.hashCode() | 0;\n    var tmp = imul(31, result);\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.hashCode();\n    result = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;\n    result = imul(31, result) + contentHashCode(this.applicators) | 0;\n    return result;\n  };\n  protoOf(Module).f5 = function () {\n    return this.name;\n  };\n  protoOf(Module).g5 = function () {\n    return this.arguments;\n  };\n  protoOf(Module).q6 = function () {\n    return this.block;\n  };\n  protoOf(Module).w6 = function () {\n    return this.applicators;\n  };\n  protoOf(Module).x6 = function (name, arguments_0, block, applicators) {\n    return new Module(name, arguments_0, block, applicators);\n  };\n  protoOf(Module).copy = function (name, arguments_0, block, applicators, $super) {\n    name = name === VOID ? this.name : name;\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    block = block === VOID ? this.block : block;\n    applicators = applicators === VOID ? this.applicators : applicators;\n    return this.x6(name, arguments_0, block, applicators);\n  };\n  protoOf(Module).toString = function () {\n    return 'Module(name=' + this.name + ', arguments=' + this.arguments + ', block=' + this.block + ', applicators=' + toString_0(this.applicators) + ')';\n  };\n  function ComponentUsage(name, arguments_0, block, applicators) {\n    AST.call(this);\n    this.name = name;\n    this.arguments = arguments_0;\n    this.block = block;\n    this.applicators = applicators;\n  }\n  protoOf(ComponentUsage).g6 = function () {\n    return this.name;\n  };\n  protoOf(ComponentUsage).j6 = function () {\n    return this.arguments;\n  };\n  protoOf(ComponentUsage).p6 = function () {\n    return this.block;\n  };\n  protoOf(ComponentUsage).v6 = function () {\n    return this.applicators;\n  };\n  protoOf(ComponentUsage).k6 = function (name, position) {\n    // Inline function 'kotlin.collections.find' call\n    var this_0 = this.arguments;\n    var tmp$ret$1;\n    $l$block: {\n      // Inline function 'kotlin.collections.firstOrNull' call\n      var inductionVariable = 0;\n      var last = this_0.length;\n      while (inductionVariable < last) {\n        var element = this_0[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'space.hypen.parser.combinators.ComponentUsage.argFor.<anonymous>' call\n        var tmp0_safe_receiver = element.name;\n        if ((tmp0_safe_receiver == null ? null : tmp0_safe_receiver.text) == name) {\n          tmp$ret$1 = element;\n          break $l$block;\n        }\n      }\n      tmp$ret$1 = null;\n    }\n    var tmp1_elvis_lhs = tmp$ret$1;\n    var tmp;\n    if (tmp1_elvis_lhs == null) {\n      tmp = getOrNull(this.arguments, position == null ? 0 : position);\n    } else {\n      tmp = tmp1_elvis_lhs;\n    }\n    var tmp2_safe_receiver = tmp;\n    return tmp2_safe_receiver == null ? null : tmp2_safe_receiver.value;\n  };\n  protoOf(ComponentUsage).argFor = function (name, position, $super) {\n    name = name === VOID ? null : name;\n    position = position === VOID ? null : position;\n    return this.k6(name, position);\n  };\n  protoOf(ComponentUsage).stringify = function (nest) {\n    var indent = repeat('\\t', nest);\n    var tmp = joinToString(this.arguments, ', ');\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.stringify(nest + 1 | 0);\n    var contents = this.name.text + '(' + tmp + ')' + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs) + joinToString(this.applicators, '');\n    return '\\n' + indent + contents;\n  };\n  protoOf(ComponentUsage).b6 = function (nest) {\n    return this.stringify(nest);\n  };\n  protoOf(ComponentUsage).toString = function () {\n    return this.stringify(0);\n  };\n  protoOf(ComponentUsage).equals = function (other) {\n    if (this === other)\n      return true;\n    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))\n      return false;\n    if (!(other instanceof ComponentUsage))\n      THROW_CCE();\n    if (!this.name.equals(other.name))\n      return false;\n    if (!contentEquals(this.arguments, other.arguments))\n      return false;\n    if (!equals(this.block, other.block))\n      return false;\n    return contentEquals(this.applicators, other.applicators);\n  };\n  protoOf(ComponentUsage).hashCode = function () {\n    var result = this.name.hashCode();\n    result = imul(31, result) + contentHashCode(this.arguments) | 0;\n    var tmp = imul(31, result);\n    var tmp0_safe_receiver = this.block;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.hashCode();\n    result = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;\n    result = imul(31, result) + contentHashCode(this.applicators) | 0;\n    return result;\n  };\n  protoOf(ComponentUsage).f5 = function () {\n    return this.name;\n  };\n  protoOf(ComponentUsage).g5 = function () {\n    return this.arguments;\n  };\n  protoOf(ComponentUsage).q6 = function () {\n    return this.block;\n  };\n  protoOf(ComponentUsage).w6 = function () {\n    return this.applicators;\n  };\n  protoOf(ComponentUsage).y6 = function (name, arguments_0, block, applicators) {\n    return new ComponentUsage(name, arguments_0, block, applicators);\n  };\n  protoOf(ComponentUsage).copy = function (name, arguments_0, block, applicators, $super) {\n    name = name === VOID ? this.name : name;\n    arguments_0 = arguments_0 === VOID ? this.arguments : arguments_0;\n    block = block === VOID ? this.block : block;\n    applicators = applicators === VOID ? this.applicators : applicators;\n    return this.y6(name, arguments_0, block, applicators);\n  };\n  function Block$stringify$lambda($nest) {\n    return function (it) {\n      return it.b6($nest + 1 | 0);\n    };\n  }\n  function Block(children) {\n    AST.call(this);\n    this.children = children;\n    var tmp = this;\n    // Inline function 'kotlin.collections.toTypedArray' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = this.children;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof ComponentUsage) {\n        destination.h(element);\n      }\n    }\n    tmp.components = copyToArray(destination);\n  }\n  protoOf(Block).m6 = function () {\n    return this.children;\n  };\n  protoOf(Block).z6 = function () {\n    return this.components;\n  };\n  protoOf(Block).stringify = function (nest) {\n    var indent = repeat('\\t', nest);\n    if (this.children.o()) {\n      return '';\n    } else {\n      var contents = '{' + indent + joinToString_0(this.children, '', VOID, VOID, VOID, VOID, Block$stringify$lambda(nest)) + '\\n' + indent + '}';\n      return contents;\n    }\n  };\n  protoOf(Block).b6 = function (nest) {\n    return this.stringify(nest);\n  };\n  protoOf(Block).toString = function () {\n    return this.stringify(0);\n  };\n  protoOf(Block).f5 = function () {\n    return this.children;\n  };\n  protoOf(Block).a7 = function (children) {\n    return new Block(children);\n  };\n  protoOf(Block).copy = function (children, $super) {\n    children = children === VOID ? this.children : children;\n    return this.a7(children);\n  };\n  protoOf(Block).hashCode = function () {\n    return hashCode(this.children);\n  };\n  protoOf(Block).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Block))\n      return false;\n    var tmp0_other_with_cast = other instanceof Block ? other : THROW_CCE();\n    if (!equals(this.children, tmp0_other_with_cast.children))\n      return false;\n    return true;\n  };\n  function Whitespace() {\n  }\n  protoOf(Whitespace).toString = function () {\n    return 'Whitespace';\n  };\n  protoOf(Whitespace).hashCode = function () {\n    return -563075083;\n  };\n  protoOf(Whitespace).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Whitespace))\n      return false;\n    other instanceof Whitespace || THROW_CCE();\n    return true;\n  };\n  var Whitespace_instance;\n  function Whitespace_getInstance() {\n    return Whitespace_instance;\n  }\n  function Skip() {\n  }\n  protoOf(Skip).toString = function () {\n    return 'Skip';\n  };\n  protoOf(Skip).hashCode = function () {\n    return 1478308087;\n  };\n  protoOf(Skip).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Skip))\n      return false;\n    other instanceof Skip || THROW_CCE();\n    return true;\n  };\n  var Skip_instance;\n  function Skip_getInstance() {\n    return Skip_instance;\n  }\n  function Comma() {\n  }\n  protoOf(Comma).toString = function () {\n    return 'Comma';\n  };\n  protoOf(Comma).hashCode = function () {\n    return -1431742883;\n  };\n  protoOf(Comma).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Comma))\n      return false;\n    other instanceof Comma || THROW_CCE();\n    return true;\n  };\n  var Comma_instance;\n  function Comma_getInstance() {\n    return Comma_instance;\n  }\n  function Open() {\n  }\n  protoOf(Open).toString = function () {\n    return 'Open';\n  };\n  protoOf(Open).hashCode = function () {\n    return -1004392072;\n  };\n  protoOf(Open).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Open))\n      return false;\n    other instanceof Open || THROW_CCE();\n    return true;\n  };\n  var Open_instance;\n  function Open_getInstance() {\n    return Open_instance;\n  }\n  function Close() {\n  }\n  protoOf(Close).toString = function () {\n    return 'Close';\n  };\n  protoOf(Close).hashCode = function () {\n    return -1082574710;\n  };\n  protoOf(Close).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Close))\n      return false;\n    other instanceof Close || THROW_CCE();\n    return true;\n  };\n  var Close_instance;\n  function Close_getInstance() {\n    return Close_instance;\n  }\n  function Open_0() {\n  }\n  protoOf(Open_0).toString = function () {\n    return 'Open';\n  };\n  protoOf(Open_0).hashCode = function () {\n    return 1178018664;\n  };\n  protoOf(Open_0).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Open_0))\n      return false;\n    other instanceof Open_0 || THROW_CCE();\n    return true;\n  };\n  var Open_instance_0;\n  function Open_getInstance_0() {\n    return Open_instance_0;\n  }\n  function Close_0() {\n  }\n  protoOf(Close_0).toString = function () {\n    return 'Close';\n  };\n  protoOf(Close_0).hashCode = function () {\n    return -2147318630;\n  };\n  protoOf(Close_0).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Close_0))\n      return false;\n    other instanceof Close_0 || THROW_CCE();\n    return true;\n  };\n  var Close_instance_0;\n  function Close_getInstance_0() {\n    return Close_instance_0;\n  }\n  function Bracket() {\n  }\n  function Single(text) {\n    Comment.call(this);\n    this.b7_1 = text;\n  }\n  protoOf(Single).toString = function () {\n    return 'Single(text=' + this.b7_1 + ')';\n  };\n  protoOf(Single).hashCode = function () {\n    return getStringHashCode(this.b7_1);\n  };\n  protoOf(Single).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Single))\n      return false;\n    var tmp0_other_with_cast = other instanceof Single ? other : THROW_CCE();\n    if (!(this.b7_1 === tmp0_other_with_cast.b7_1))\n      return false;\n    return true;\n  };\n  function Comment() {\n  }\n  function ParsedChar(text) {\n    this.c7_1 = text;\n  }\n  protoOf(ParsedChar).toString = function () {\n    return toString(this.c7_1);\n  };\n  protoOf(ParsedChar).hashCode = function () {\n    return Char__hashCode_impl_otmys(this.c7_1);\n  };\n  protoOf(ParsedChar).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof ParsedChar))\n      return false;\n    var tmp0_other_with_cast = other instanceof ParsedChar ? other : THROW_CCE();\n    if (!(this.c7_1 === tmp0_other_with_cast.c7_1))\n      return false;\n    return true;\n  };\n  function Sequence(_children) {\n    this.w5_1 = _children;\n    var tmp = this;\n    // Inline function 'kotlin.collections.filterNot' call\n    // Inline function 'kotlin.collections.flatMap' call\n    // Inline function 'kotlin.collections.flatMapTo' call\n    var this_0 = this.w5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      // Inline function 'space.hypen.parser.combinators.Sequence.children.<anonymous>' call\n      var tmp_0;\n      if (element instanceof Sequence) {\n        tmp_0 = element.x5_1;\n      } else {\n        tmp_0 = listOf(element);\n      }\n      var list = tmp_0;\n      addAll(destination, list);\n    }\n    // Inline function 'kotlin.collections.filterNotTo' call\n    var destination_0 = ArrayList_init_$Create$();\n    var tmp0_iterator_0 = destination.k();\n    while (tmp0_iterator_0.l()) {\n      var element_0 = tmp0_iterator_0.m();\n      // Inline function 'space.hypen.parser.combinators.Sequence.children.<anonymous>' call\n      if (!(element_0 instanceof Skip)) {\n        destination_0.h(element_0);\n      }\n    }\n    tmp.x5_1 = destination_0;\n  }\n  protoOf(Sequence).hashCode = function () {\n    return hashCode(this.x5_1);\n  };\n  protoOf(Sequence).toString = function () {\n    return joinToString_0(this.x5_1, '');\n  };\n  protoOf(Sequence).equals = function (other) {\n    if (this === other)\n      return true;\n    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))\n      return false;\n    if (!(other instanceof Sequence))\n      THROW_CCE();\n    return toString_0(this.x5_1) === toString_0(other.x5_1);\n  };\n  function Parse() {\n  }\n  function ParsingError$Combined$toString$lambda(it) {\n    return it.f7();\n  }\n  function Combined(message, list) {\n    ParsingError.call(this, message, last(list).e7_1);\n    this.i7_1 = message;\n    this.j7_1 = list;\n  }\n  protoOf(Combined).toString = function () {\n    return this.i7_1 + ':\\n' + joinToString_0(this.j7_1, ',\\n', VOID, VOID, VOID, VOID, ParsingError$Combined$toString$lambda) + '\\n';\n  };\n  protoOf(Combined).hashCode = function () {\n    var result = getStringHashCode(this.i7_1);\n    result = imul(result, 31) + hashCode(this.j7_1) | 0;\n    return result;\n  };\n  protoOf(Combined).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Combined))\n      return false;\n    var tmp0_other_with_cast = other instanceof Combined ? other : THROW_CCE();\n    if (!(this.i7_1 === tmp0_other_with_cast.i7_1))\n      return false;\n    if (!equals(this.j7_1, tmp0_other_with_cast.j7_1))\n      return false;\n    return true;\n  };\n  function UnexpectedToken(token, state) {\n    ParsingError.call(this, 'Unexpected token ' + token, state);\n    this.n7_1 = token;\n    this.o7_1 = state;\n  }\n  protoOf(UnexpectedToken).toString = function () {\n    return 'UnexpectedToken(token=' + this.n7_1 + ', state=' + this.o7_1 + ')';\n  };\n  protoOf(UnexpectedToken).hashCode = function () {\n    var result = getStringHashCode(this.n7_1);\n    result = imul(result, 31) + this.o7_1.hashCode() | 0;\n    return result;\n  };\n  protoOf(UnexpectedToken).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof UnexpectedToken))\n      return false;\n    var tmp0_other_with_cast = other instanceof UnexpectedToken ? other : THROW_CCE();\n    if (!(this.n7_1 === tmp0_other_with_cast.n7_1))\n      return false;\n    if (!this.o7_1.equals(tmp0_other_with_cast.o7_1))\n      return false;\n    return true;\n  };\n  function UnexpectedEndOfInput(expected, state) {\n    ParsingError.call(this, 'Unexpected end of input - ' + expected, state);\n    this.r7_1 = expected;\n    this.s7_1 = state;\n  }\n  protoOf(UnexpectedEndOfInput).toString = function () {\n    return 'UnexpectedEndOfInput(expected=' + this.r7_1 + ', state=' + this.s7_1 + ')';\n  };\n  protoOf(UnexpectedEndOfInput).hashCode = function () {\n    var result = getStringHashCode(this.r7_1);\n    result = imul(result, 31) + this.s7_1.hashCode() | 0;\n    return result;\n  };\n  protoOf(UnexpectedEndOfInput).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof UnexpectedEndOfInput))\n      return false;\n    var tmp0_other_with_cast = other instanceof UnexpectedEndOfInput ? other : THROW_CCE();\n    if (!(this.r7_1 === tmp0_other_with_cast.r7_1))\n      return false;\n    if (!this.s7_1.equals(tmp0_other_with_cast.s7_1))\n      return false;\n    return true;\n  };\n  function CommentNotFinished(message, state) {\n    ParsingError.call(this, message, state);\n    this.v7_1 = message;\n    this.w7_1 = state;\n  }\n  protoOf(CommentNotFinished).toString = function () {\n    return 'CommentNotFinished(message=' + this.v7_1 + ', state=' + this.w7_1 + ')';\n  };\n  protoOf(CommentNotFinished).hashCode = function () {\n    var result = getStringHashCode(this.v7_1);\n    result = imul(result, 31) + this.w7_1.hashCode() | 0;\n    return result;\n  };\n  protoOf(CommentNotFinished).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof CommentNotFinished))\n      return false;\n    var tmp0_other_with_cast = other instanceof CommentNotFinished ? other : THROW_CCE();\n    if (!(this.v7_1 === tmp0_other_with_cast.v7_1))\n      return false;\n    if (!this.w7_1.equals(tmp0_other_with_cast.w7_1))\n      return false;\n    return true;\n  };\n  function ParsingError(msg, _state) {\n    this.d7_1 = msg;\n    this.e7_1 = _state;\n  }\n  protoOf(ParsingError).k7 = function (msg) {\n    this.d7_1 = msg;\n    return this;\n  };\n  protoOf(ParsingError).f7 = function () {\n    return 'Error: ' + this.d7_1 + ' at ' + this.e7_1.t5_1 + '\\n Remaining ->' + this.e7_1.s5_1;\n  };\n  protoOf(ParsingError).toString = function () {\n    return this.f7();\n  };\n  function combineWith(_this__u8e3s4, msg) {\n    return _this__u8e3s4.k7(msg);\n  }\n  function Result() {\n  }\n  function Success(output, state) {\n    this.output = output;\n    this.state = state;\n  }\n  protoOf(Success).x7 = function () {\n    return this.output;\n  };\n  protoOf(Success).y7 = function () {\n    return this.state;\n  };\n  protoOf(Success).f5 = function () {\n    return this.output;\n  };\n  protoOf(Success).g5 = function () {\n    return this.state;\n  };\n  protoOf(Success).z7 = function (output, state) {\n    return new Success(output, state);\n  };\n  protoOf(Success).copy = function (output, state, $super) {\n    output = output === VOID ? this.output : output;\n    state = state === VOID ? this.state : state;\n    return this.z7(output, state);\n  };\n  protoOf(Success).toString = function () {\n    return 'Success(output=' + this.output + ', state=' + this.state + ')';\n  };\n  protoOf(Success).hashCode = function () {\n    var result = this.output == null ? 0 : hashCode(this.output);\n    result = imul(result, 31) + this.state.hashCode() | 0;\n    return result;\n  };\n  protoOf(Success).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Success))\n      return false;\n    var tmp0_other_with_cast = other instanceof Success ? other : THROW_CCE();\n    if (!equals(this.output, tmp0_other_with_cast.output))\n      return false;\n    if (!this.state.equals(tmp0_other_with_cast.state))\n      return false;\n    return true;\n  };\n  function Failure(input, error, msg) {\n    msg = msg === VOID ? error.d7_1 : msg;\n    this.input = input;\n    this.error = error;\n    this.msg = msg;\n  }\n  protoOf(Failure).a8 = function () {\n    return this.input;\n  };\n  protoOf(Failure).b8 = function () {\n    return this.error;\n  };\n  protoOf(Failure).c8 = function () {\n    return this.msg;\n  };\n  protoOf(Failure).toString = function () {\n    return 'Failure: ' + this.msg + ' at ' + this.error.e7_1.t5_1 + '\\n Remaining ->' + this.input;\n  };\n  protoOf(Failure).f5 = function () {\n    return this.input;\n  };\n  protoOf(Failure).g5 = function () {\n    return this.error;\n  };\n  protoOf(Failure).q6 = function () {\n    return this.msg;\n  };\n  protoOf(Failure).d8 = function (input, error, msg) {\n    return new Failure(input, error, msg);\n  };\n  protoOf(Failure).copy = function (input, error, msg, $super) {\n    input = input === VOID ? this.input : input;\n    error = error === VOID ? this.error : error;\n    msg = msg === VOID ? this.msg : msg;\n    return this.d8(input, error, msg);\n  };\n  protoOf(Failure).hashCode = function () {\n    var result = getStringHashCode(this.input);\n    result = imul(result, 31) + hashCode(this.error) | 0;\n    result = imul(result, 31) + getStringHashCode(this.msg) | 0;\n    return result;\n  };\n  protoOf(Failure).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Failure))\n      return false;\n    var tmp0_other_with_cast = other instanceof Failure ? other : THROW_CCE();\n    if (!(this.input === tmp0_other_with_cast.input))\n      return false;\n    if (!equals(this.error, tmp0_other_with_cast.error))\n      return false;\n    if (!(this.msg === tmp0_other_with_cast.msg))\n      return false;\n    return true;\n  };\n  function get_chain() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return chain;\n  }\n  var chain;\n  function get_comma() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return comma;\n  }\n  var comma;\n  function get_openingArgument() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return openingArgument;\n  }\n  var openingArgument;\n  function get_openingBrace() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return openingBrace;\n  }\n  var openingBrace;\n  function get_closingBrace() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return closingBrace;\n  }\n  var closingBrace;\n  function get_closingArgument() {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    return closingArgument;\n  }\n  var closingArgument;\n  function sam$space_hypen_parser_combinators_Parse$0_6(function_0) {\n    this.e8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_6).m5 = function (input) {\n    return this.e8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_7(function_0) {\n    this.f8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_7).m5 = function (input) {\n    return this.f8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_8(function_0) {\n    this.g8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_8).m5 = function (input) {\n    return this.g8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_9(function_0) {\n    this.h8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_9).m5 = function (input) {\n    return this.h8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_10(function_0) {\n    this.i8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_10).m5 = function (input) {\n    return this.i8_1(input);\n  };\n  function comma$lambda(it) {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    var res = char(_Char___init__impl__6a9atx(44)).m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      tmp = new Success(Comma_instance, res.state);\n    } else {\n      tmp = res;\n    }\n    return tmp;\n  }\n  function openingArgument$lambda(it) {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    var res = char(_Char___init__impl__6a9atx(40)).m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      tmp = new Success(Open_instance, res.state);\n    } else {\n      tmp = res;\n    }\n    return tmp;\n  }\n  function openingBrace$lambda(it) {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    var res = char(_Char___init__impl__6a9atx(123)).m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      tmp = new Success(Open_instance_0, res.state);\n    } else {\n      tmp = res;\n    }\n    return tmp;\n  }\n  function closingBrace$lambda(it) {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    var res = char(_Char___init__impl__6a9atx(125)).m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      tmp = new Success(Close_instance_0, res.state);\n    } else {\n      tmp = res;\n    }\n    return tmp;\n  }\n  function closingArgument$lambda(it) {\n    _init_properties_SpecialTokens_kt__pnimnz();\n    var res = char(_Char___init__impl__6a9atx(41)).m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      tmp = new Success(Close_instance, res.state);\n    } else {\n      tmp = res;\n    }\n    return tmp;\n  }\n  var properties_initialized_SpecialTokens_kt_ciswqr;\n  function _init_properties_SpecialTokens_kt__pnimnz() {\n    if (!properties_initialized_SpecialTokens_kt_ciswqr) {\n      properties_initialized_SpecialTokens_kt_ciswqr = true;\n      chain = char(_Char___init__impl__6a9atx(46));\n      var tmp = comma$lambda;\n      comma = new sam$space_hypen_parser_combinators_Parse$0_6(tmp);\n      var tmp_0 = openingArgument$lambda;\n      openingArgument = new sam$space_hypen_parser_combinators_Parse$0_7(tmp_0);\n      var tmp_1 = openingBrace$lambda;\n      openingBrace = new sam$space_hypen_parser_combinators_Parse$0_8(tmp_1);\n      var tmp_2 = closingBrace$lambda;\n      closingBrace = new sam$space_hypen_parser_combinators_Parse$0_9(tmp_2);\n      var tmp_3 = closingArgument$lambda;\n      closingArgument = new sam$space_hypen_parser_combinators_Parse$0_10(tmp_3);\n    }\n  }\n  function State(remaining, index, errors) {\n    index = index === VOID ? 0 : index;\n    var tmp;\n    if (errors === VOID) {\n      // Inline function 'kotlin.collections.mutableListOf' call\n      tmp = ArrayList_init_$Create$();\n    } else {\n      tmp = errors;\n    }\n    errors = tmp;\n    this.s5_1 = remaining;\n    this.t5_1 = index;\n    this.u5_1 = errors;\n  }\n  protoOf(State).j8 = function (remaining, errors) {\n    return new State(remaining, this.t5_1 + (this.s5_1.length - remaining.length | 0) | 0, errors);\n  };\n  protoOf(State).v5 = function (remaining, errors, $super) {\n    remaining = remaining === VOID ? this.s5_1 : remaining;\n    errors = errors === VOID ? this.u5_1 : errors;\n    return $super === VOID ? this.j8(remaining, errors) : $super.j8.call(this, remaining, errors);\n  };\n  protoOf(State).k8 = function (remaining, index, errors) {\n    return new State(remaining, index, errors);\n  };\n  protoOf(State).a6 = function (remaining, index, errors, $super) {\n    remaining = remaining === VOID ? this.s5_1 : remaining;\n    index = index === VOID ? this.t5_1 : index;\n    errors = errors === VOID ? this.u5_1 : errors;\n    return $super === VOID ? this.k8(remaining, index, errors) : $super.k8.call(this, remaining, index, errors);\n  };\n  protoOf(State).toString = function () {\n    return 'State(remaining=' + this.s5_1 + ', index=' + this.t5_1 + ', errors=' + this.u5_1 + ')';\n  };\n  protoOf(State).hashCode = function () {\n    var result = getStringHashCode(this.s5_1);\n    result = imul(result, 31) + this.t5_1 | 0;\n    result = imul(result, 31) + hashCode(this.u5_1) | 0;\n    return result;\n  };\n  protoOf(State).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof State))\n      return false;\n    var tmp0_other_with_cast = other instanceof State ? other : THROW_CCE();\n    if (!(this.s5_1 === tmp0_other_with_cast.s5_1))\n      return false;\n    if (!(this.t5_1 === tmp0_other_with_cast.t5_1))\n      return false;\n    if (!equals(this.u5_1, tmp0_other_with_cast.u5_1))\n      return false;\n    return true;\n  };\n  function get_block() {\n    _init_properties_Syntax_kt__1av0al();\n    return block;\n  }\n  var block;\n  function get_app() {\n    _init_properties_Syntax_kt__1av0al();\n    return app;\n  }\n  var app;\n  function get_module() {\n    _init_properties_Syntax_kt__1av0al();\n    return module_0;\n  }\n  var module_0;\n  function get_action() {\n    _init_properties_Syntax_kt__1av0al();\n    return action;\n  }\n  var action;\n  function get_totalParser() {\n    _init_properties_Syntax_kt__1av0al();\n    return totalParser;\n  }\n  var totalParser;\n  function map(_this__u8e3s4, result) {\n    _init_properties_Syntax_kt__1av0al();\n    var tmp = map$lambda(_this__u8e3s4, result);\n    return new sam$space_hypen_parser_combinators_Parse$0_13(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_11(function_0) {\n    this.l8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_11).m5 = function (input) {\n    return this.l8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_12(function_0) {\n    this.m8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_12).m5 = function (input) {\n    return this.m8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_13(function_0) {\n    this.n8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_13).m5 = function (input) {\n    return this.n8_1(input);\n  };\n  function block$lambda(input) {\n    _init_properties_Syntax_kt__1av0al();\n    var possibleInsideBlock = maybe(oneOf([get_whiteSpace(), get_comments(), get_componentUseAst()]));\n    var remaining = input;\n    var runs = 0;\n    // Inline function 'kotlin.collections.mutableListOf' call\n    var children = ArrayList_init_$Create$();\n    $l$loop: while (true) {\n      var tmp;\n      // Inline function 'kotlin.text.isNotEmpty' call\n      var this_0 = remaining.s5_1;\n      if (charSequenceLength(this_0) > 0) {\n        tmp = !(runs === 100);\n      } else {\n        tmp = false;\n      }\n      if (!tmp) {\n        break $l$loop;\n      }\n      runs = runs + 1 | 0;\n      var result = possibleInsideBlock.m5(remaining);\n      if (result instanceof Success) {\n        children.h(result.output);\n        remaining = result.state;\n      } else {\n        result instanceof Failure;\n      }\n    }\n    // Inline function 'kotlin.collections.filterNot' call\n    // Inline function 'kotlin.collections.filterNotTo' call\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = children.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      // Inline function 'space.hypen.parser.combinators.block.<anonymous>.<anonymous>' call\n      var tmp_0;\n      if (element instanceof Whitespace) {\n        tmp_0 = true;\n      } else {\n        tmp_0 = element instanceof Skip;\n      }\n      if (!tmp_0) {\n        destination.h(element);\n      }\n    }\n    return new Success(new Block(destination), remaining);\n  }\n  function block$lambda_0(it) {\n    _init_properties_Syntax_kt__1av0al();\n    // Inline function 'kotlin.collections.filterNot' call\n    // Inline function 'kotlin.collections.filterNotTo' call\n    var this_0 = (it instanceof Sequence ? it : THROW_CCE()).x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      // Inline function 'space.hypen.parser.combinators.block.<anonymous>.<anonymous>' call\n      if (!isInterface(element, Bracket)) {\n        destination.h(element);\n      }\n    }\n    return new Sequence(destination);\n  }\n  function module$lambda(it) {\n    _init_properties_Syntax_kt__1av0al();\n    var tmp = plus(plus(plus(plus(plus(plus(word_0('module'), maybe(get_whiteSpace())), get_identifier()), maybe(get_whiteSpace())), oneOf([maybe(get_argumentsDefinition())])), maybe(get_whiteSpace())), get_block());\n    var parser = mapError(tmp, module$lambda$lambda);\n    var res = parser.m5(it);\n    var tmp_0;\n    if (res instanceof Failure) {\n      tmp_0 = res;\n    } else {\n      if (res instanceof Success) {\n        var tmp_1 = res.output;\n        var children = (tmp_1 instanceof Sequence ? tmp_1 : THROW_CCE()).x5_1;\n        // Inline function 'kotlin.collections.filterIsInstance' call\n        // Inline function 'kotlin.collections.filterIsInstanceTo' call\n        var destination = ArrayList_init_$Create$();\n        var tmp0_iterator = children.k();\n        while (tmp0_iterator.l()) {\n          var element = tmp0_iterator.m();\n          if (element instanceof Identifier) {\n            destination.h(element);\n          }\n        }\n        var tmp_2 = ensureNotNull(first(destination));\n        // Inline function 'kotlin.collections.filterIsInstance' call\n        // Inline function 'kotlin.collections.filterIsInstanceTo' call\n        var destination_0 = ArrayList_init_$Create$();\n        var tmp0_iterator_0 = children.k();\n        while (tmp0_iterator_0.l()) {\n          var element_0 = tmp0_iterator_0.m();\n          if (element_0 instanceof ArgumentsDefinition) {\n            destination_0.h(element_0);\n          }\n        }\n        var tmp0_elvis_lhs = firstOrNull(destination_0);\n        var tmp_3;\n        if (tmp0_elvis_lhs == null) {\n          // Inline function 'kotlin.emptyArray' call\n          var tmp$ret$4 = [];\n          tmp_3 = new ArgumentsDefinition(tmp$ret$4);\n        } else {\n          tmp_3 = tmp0_elvis_lhs;\n        }\n        var tmp_4 = tmp_3;\n        // Inline function 'kotlin.collections.filterIsInstance' call\n        // Inline function 'kotlin.collections.filterIsInstanceTo' call\n        var destination_1 = ArrayList_init_$Create$();\n        var tmp0_iterator_1 = children.k();\n        while (tmp0_iterator_1.l()) {\n          var element_1 = tmp0_iterator_1.m();\n          if (element_1 instanceof Block) {\n            destination_1.h(element_1);\n          }\n        }\n        var tmp_5 = firstOrNull(destination_1);\n        // Inline function 'kotlin.collections.toTypedArray' call\n        // Inline function 'kotlin.collections.filterIsInstance' call\n        // Inline function 'kotlin.collections.filterIsInstanceTo' call\n        var destination_2 = ArrayList_init_$Create$();\n        var tmp0_iterator_2 = children.k();\n        while (tmp0_iterator_2.l()) {\n          var element_2 = tmp0_iterator_2.m();\n          if (element_2 instanceof Applicator) {\n            destination_2.h(element_2);\n          }\n        }\n        var tmp$ret$9 = copyToArray(destination_2);\n        tmp_0 = new Success(new Module(tmp_2, tmp_4, tmp_5, tmp$ret$9), res.state);\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp_0;\n  }\n  function module$lambda$lambda(it) {\n    _init_properties_Syntax_kt__1av0al();\n    return 'Failed to parse module - ' + it;\n  }\n  function map$lambda($this_map, $result) {\n    return function (it) {\n      var tmp;\n      try {\n        var res = $this_map.m5(it);\n        var tmp_0;\n        if (res instanceof Success) {\n          tmp_0 = new Success($result(res.output), res.state);\n        } else {\n          if (res instanceof Failure) {\n            tmp_0 = res;\n          } else {\n            noWhenBranchMatchedException();\n          }\n        }\n        tmp = tmp_0;\n      } catch ($p) {\n        var tmp_1;\n        if ($p instanceof Exception) {\n          var e = $p;\n          tmp_1 = new Failure(it.s5_1, combineWith(new UnexpectedToken(it.s5_1, it), 'Error while mapping'));\n        } else {\n          throw $p;\n        }\n        tmp = tmp_1;\n      }\n      return tmp;\n    };\n  }\n  var properties_initialized_Syntax_kt_imdkcl;\n  function _init_properties_Syntax_kt__1av0al() {\n    if (!properties_initialized_Syntax_kt_imdkcl) {\n      properties_initialized_Syntax_kt_imdkcl = true;\n      var tmp = get_between()(get_openingBrace(), get_closingBrace());\n      var tmp_0 = block$lambda;\n      var tmp_1 = tmp(new sam$space_hypen_parser_combinators_Parse$0_11(tmp_0));\n      block = map(tmp_1, block$lambda_0);\n      app = plus(plus(plus(plus(plus(plus(word_0('app'), maybe(get_whiteSpace())), get_identifier()), maybe(get_whiteSpace())), oneOf([maybe(arguments_0())])), maybe(get_whiteSpace())), maybe(get_block()));\n      var tmp_2 = module$lambda;\n      module_0 = new sam$space_hypen_parser_combinators_Parse$0_12(tmp_2);\n      action = plus(plus(plus(plus(word_0('action'), maybe(get_whiteSpace())), get_identifier()), maybe(get_whiteSpace())), oneOf([maybe(arguments_0())]));\n      totalParser = oneOf([get_app(), get_componentDefinition(), get_module(), get_action(), get_componentUseAst()]);\n    }\n  }\n  function get_whiteSpace() {\n    _init_properties_Text_kt__l2j80d();\n    return whiteSpace;\n  }\n  var whiteSpace;\n  function get_line() {\n    _init_properties_Text_kt__l2j80d();\n    return line;\n  }\n  var line;\n  function get_identifier() {\n    _init_properties_Text_kt__l2j80d();\n    return identifier;\n  }\n  var identifier;\n  function get_word() {\n    _init_properties_Text_kt__l2j80d();\n    return word;\n  }\n  var word;\n  function get_wrappedWord() {\n    _init_properties_Text_kt__l2j80d();\n    // Inline function 'kotlin.getValue' call\n    var this_0 = wrappedWord$delegate;\n    wrappedWord$factory();\n    return this_0.j5();\n  }\n  var wrappedWord$delegate;\n  function get_number() {\n    _init_properties_Text_kt__l2j80d();\n    return number;\n  }\n  var number;\n  function get_digit() {\n    _init_properties_Text_kt__l2j80d();\n    return digit;\n  }\n  var digit;\n  function get_hexDigit() {\n    _init_properties_Text_kt__l2j80d();\n    return hexDigit;\n  }\n  var hexDigit;\n  function get_take() {\n    _init_properties_Text_kt__l2j80d();\n    return take_0;\n  }\n  var take_0;\n  function get_decimal() {\n    _init_properties_Text_kt__l2j80d();\n    return decimal;\n  }\n  var decimal;\n  function maybe(parser) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = maybe$lambda(parser);\n    return new sam$space_hypen_parser_combinators_Parse$0_20(tmp);\n  }\n  function char(char) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = char$lambda(char);\n    return new sam$space_hypen_parser_combinators_Parse$0_21(tmp);\n  }\n  function plus(_this__u8e3s4, next) {\n    _init_properties_Text_kt__l2j80d();\n    return sequence([_this__u8e3s4, next]);\n  }\n  function word_0(match) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = word$lambda_0(match);\n    return new sam$space_hypen_parser_combinators_Parse$0_22(tmp);\n  }\n  function hex() {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = plus(char(_Char___init__impl__6a9atx(35)), oneOf([get_take()(8, get_loop()(get_hexDigit())), get_take()(6, get_loop()(get_hexDigit()))]));\n    return map(tmp, hex$lambda);\n  }\n  function followedBy(_this__u8e3s4, parser) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = followedBy$lambda(_this__u8e3s4, parser);\n    return new sam$space_hypen_parser_combinators_Parse$0_23(tmp);\n  }\n  function main() {\n    _init_properties_Text_kt__l2j80d();\n    var text = 'hello 123';\n    var component = followedBy(get_word(), oneOf([get_whiteSpace(), get_number()]));\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_14(function_0) {\n    this.o8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_14).m5 = function (input) {\n    return this.o8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_15(function_0) {\n    this.p8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_15).m5 = function (input) {\n    return this.p8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_16(function_0) {\n    this.q8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_16).m5 = function (input) {\n    return this.q8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_17(function_0) {\n    this.r8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_17).m5 = function (input) {\n    return this.r8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_18(function_0) {\n    this.s8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_18).m5 = function (input) {\n    return this.s8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_19(function_0) {\n    this.t8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_19).m5 = function (input) {\n    return this.t8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_20(function_0) {\n    this.u8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_20).m5 = function (input) {\n    return this.u8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_21(function_0) {\n    this.v8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_21).m5 = function (input) {\n    return this.v8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_22(function_0) {\n    this.w8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_22).m5 = function (input) {\n    return this.w8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_23(function_0) {\n    this.x8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_23).m5 = function (input) {\n    return this.x8_1(input);\n  };\n  function whiteSpace$lambda(state) {\n    _init_properties_Text_kt__l2j80d();\n    var input = state.s5_1;\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var inductionVariable = 0;\n      var last = input.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.whiteSpace.<anonymous>.<anonymous>' call\n          var it = charSequenceGet(input, index);\n          if (!((it === _Char___init__impl__6a9atx(32) ? true : it === _Char___init__impl__6a9atx(9)) ? true : it === _Char___init__impl__6a9atx(10))) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = input.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = input;\n    }\n    var whiteSpace = tmp$ret$3;\n    var tmp;\n    if (isBlank(whiteSpace) ? !(whiteSpace.length === 0) : false) {\n      tmp = new Success(Whitespace_instance, state.v5(drop(input, whiteSpace.length)));\n    } else {\n      tmp = new Failure(input, combineWith(new UnexpectedToken(input, state), '' + ('Expected whitespace, but found ' + input)));\n    }\n    return tmp;\n  }\n  function line$lambda(it) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var this_0 = it.s5_1;\n      var inductionVariable = 0;\n      var last = this_0.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.line.<anonymous>.<anonymous>' call\n          if (!!(charSequenceGet(this_0, index) === _Char___init__impl__6a9atx(10))) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = this_0.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = this_0;\n    }\n    var line = tmp$ret$3;\n    return new Success(new Word(line), it.v5(drop(it.s5_1, line.length)));\n  }\n  function identifier$lambda(state) {\n    _init_properties_Text_kt__l2j80d();\n    var input = state.s5_1;\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var inductionVariable = 0;\n      var last = input.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.identifier.<anonymous>.<anonymous>' call\n          var it = charSequenceGet(input, index);\n          if (!isLetterOrDigit(it)) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = input.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = input;\n    }\n    var identifier = tmp$ret$3;\n    var tmp;\n    var tmp_0;\n    // Inline function 'kotlin.text.isEmpty' call\n    if (charSequenceLength(identifier) === 0) {\n      tmp_0 = true;\n    } else {\n      tmp_0 = !isLetter(first_0(identifier));\n    }\n    if (tmp_0) {\n      tmp = new Failure(input, combineWith(new UnexpectedToken(input, state), 'Expected identifier, but found ' + identifier));\n    } else {\n      tmp = new Success(new Identifier(identifier), state.v5(drop(input, identifier.length)));\n    }\n    return tmp;\n  }\n  function word$lambda(state) {\n    _init_properties_Text_kt__l2j80d();\n    var input = state.s5_1;\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var inductionVariable = 0;\n      var last = input.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.word.<anonymous>.<anonymous>' call\n          var it = charSequenceGet(input, index);\n          if (!(isLetter(it) ? true : isDigit(it))) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = input.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = input;\n    }\n    var word = tmp$ret$3;\n    var tmp;\n    // Inline function 'kotlin.text.isEmpty' call\n    if (charSequenceLength(word) === 0) {\n      tmp = new Failure(input, combineWith(new UnexpectedToken(input, state), 'Expected word, but found ' + input));\n    } else {\n      tmp = new Success(new Word(word), state.v5(drop(input, word.length)));\n    }\n    return tmp;\n  }\n  function wrappedWord$delegate$lambda() {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = get_between()(char(_Char___init__impl__6a9atx(34)), char(_Char___init__impl__6a9atx(34)))(get_takeAll());\n    return map(tmp, wrappedWord$delegate$lambda$lambda);\n  }\n  function wrappedWord$delegate$lambda$lambda(it) {\n    _init_properties_Text_kt__l2j80d();\n    var sequence = it instanceof Sequence ? it : THROW_CCE();\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = sequence.x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof Word) {\n        destination.h(element);\n      }\n    }\n    var tmp$ret$2 = destination == null ? null : firstOrNull(destination);\n    return new QuotedString(ensureNotNull(ensureNotNull(tmp$ret$2).text));\n  }\n  function number$lambda(state) {\n    _init_properties_Text_kt__l2j80d();\n    var input = state.s5_1;\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var inductionVariable = 0;\n      var last = input.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.number.<anonymous>.<anonymous>' call\n          var it = charSequenceGet(input, index);\n          if (!isDigit(it)) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = input.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = input;\n    }\n    var number = tmp$ret$3;\n    var tmp;\n    // Inline function 'kotlin.text.isEmpty' call\n    if (charSequenceLength(number) === 0) {\n      tmp = new Failure(input, combineWith(new UnexpectedToken(input, state), 'Expected number, but found ' + number));\n    } else {\n      tmp = new Success(new Number_0(number), state.v5(drop(input, number.length)));\n    }\n    return tmp;\n  }\n  function hexDigit$lambda(it) {\n    _init_properties_Text_kt__l2j80d();\n    return 'Expected hex digit, but found ' + it;\n  }\n  function take$lambda(amount, validate) {\n    _init_properties_Text_kt__l2j80d();\n    var tmp = take$lambda$lambda(amount, validate);\n    return new sam$space_hypen_parser_combinators_Parse$0_24(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_24(function_0) {\n    this.y8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_24).m5 = function (input) {\n    return this.y8_1(input);\n  };\n  function take$lambda$lambda($amount, $validate) {\n    return function (state) {\n      var input = state.s5_1;\n      var tmp;\n      if (input.length < $amount) {\n        new Failure(input, new UnexpectedEndOfInput('To have ' + $amount + ' chars, found ' + input.length, state));\n        tmp = Unit_instance;\n      }\n      var take_0 = take(input, $amount);\n      var res = $validate.n5(take_0);\n      var tmp_0;\n      if (res instanceof Success) {\n        tmp_0 = new Success(new Word(take_0), state.v5(drop(input, take_0.length)));\n      } else {\n        if (res instanceof Failure) {\n          tmp_0 = new Failure(input, res.error);\n        } else {\n          noWhenBranchMatchedException();\n        }\n      }\n      return tmp_0;\n    };\n  }\n  function decimal$lambda(state) {\n    _init_properties_Text_kt__l2j80d();\n    var input = state.s5_1;\n    var tmp$ret$3;\n    $l$block: {\n      // Inline function 'kotlin.text.takeWhile' call\n      var inductionVariable = 0;\n      var last = input.length;\n      if (inductionVariable < last)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          // Inline function 'space.hypen.parser.combinators.decimal.<anonymous>.<anonymous>' call\n          var it = charSequenceGet(input, index);\n          if (!(isDigit(it) ? true : it === _Char___init__impl__6a9atx(46))) {\n            // Inline function 'kotlin.text.substring' call\n            // Inline function 'kotlin.js.asDynamic' call\n            tmp$ret$3 = input.substring(0, index);\n            break $l$block;\n          }\n        }\n         while (inductionVariable < last);\n      tmp$ret$3 = input;\n    }\n    var decimal = tmp$ret$3;\n    var tmp;\n    // Inline function 'kotlin.text.isEmpty' call\n    if (charSequenceLength(decimal) === 0) {\n      tmp = new Failure(input, combineWith(new UnexpectedToken(input, state), 'Expected decimal, but found empty'));\n    } else {\n      tmp = new Success(new Word(decimal), state.v5(drop(input, decimal.length)));\n    }\n    return tmp;\n  }\n  function maybe$lambda($parser) {\n    return function (state) {\n      var result = $parser.m5(state);\n      var tmp;\n      if (result instanceof Success) {\n        tmp = result;\n      } else {\n        if (result instanceof Failure) {\n          tmp = new Success(Skip_instance, state);\n        } else {\n          noWhenBranchMatchedException();\n        }\n      }\n      return tmp;\n    };\n  }\n  function char$lambda($char) {\n    return function (state) {\n      var input = state.s5_1;\n      var tmp;\n      try {\n        var word = charSequenceGet(input, 0);\n        var tmp_0;\n        if (!(word === $char)) {\n          tmp_0 = new Failure(input, combineWith(new UnexpectedToken(input, state), 'Expected ' + toString($char) + ', but found ' + toString(word)));\n        } else {\n          tmp_0 = new Success(new ParsedChar(word), state.v5(drop(input, 1)));\n        }\n        tmp = tmp_0;\n      } catch ($p) {\n        var tmp_1;\n        if ($p instanceof Exception) {\n          var e = $p;\n          tmp_1 = new Failure(input, new UnexpectedEndOfInput('ParsedChar', state));\n        } else {\n          throw $p;\n        }\n        tmp = tmp_1;\n      }\n      return tmp;\n    };\n  }\n  function word$lambda_0($match) {\n    return function (state) {\n      var input = state.s5_1;\n      var word = take(input, $match.length);\n      var tmp;\n      if (!(word === $match)) {\n        tmp = new Failure(input, new UnexpectedToken(input, state));\n      } else {\n        tmp = new Success(new Word(word), state.v5(drop(input, word.length)));\n      }\n      return tmp;\n    };\n  }\n  function hex$lambda(it) {\n    _init_properties_Text_kt__l2j80d();\n    var sequence = it instanceof Sequence ? it : THROW_CCE();\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = sequence.x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof Word) {\n        destination.h(element);\n      }\n    }\n    var tmp$ret$2 = destination == null ? null : firstOrNull(destination);\n    var word = ensureNotNull(tmp$ret$2);\n    return new Word('#' + word.text);\n  }\n  function followedBy$lambda($this_followedBy, $parser) {\n    return function (state) {\n      var input = state.s5_1;\n      var result = $this_followedBy.m5(state);\n      var tmp;\n      if (result instanceof Success) {\n        var nextResult = $parser.m5(result.state);\n        var tmp_0;\n        if (nextResult instanceof Success) {\n          tmp_0 = new Success(nextResult.output, nextResult.state);\n        } else {\n          if (nextResult instanceof Failure) {\n            tmp_0 = new Failure(input, nextResult.error);\n          } else {\n            noWhenBranchMatchedException();\n          }\n        }\n        tmp = tmp_0;\n      } else {\n        if (result instanceof Failure) {\n          tmp = new Failure(input, result.error);\n        } else {\n          noWhenBranchMatchedException();\n        }\n      }\n      return tmp;\n    };\n  }\n  function wrappedWord$factory() {\n    return getPropertyCallableRef('wrappedWord', 0, KProperty0, function () {\n      return get_wrappedWord();\n    }, null);\n  }\n  var properties_initialized_Text_kt_kgdrtb;\n  function _init_properties_Text_kt__l2j80d() {\n    if (!properties_initialized_Text_kt_kgdrtb) {\n      properties_initialized_Text_kt_kgdrtb = true;\n      var tmp = whiteSpace$lambda;\n      whiteSpace = new sam$space_hypen_parser_combinators_Parse$0_14(tmp);\n      var tmp_0 = line$lambda;\n      line = new sam$space_hypen_parser_combinators_Parse$0_15(tmp_0);\n      var tmp_1 = identifier$lambda;\n      identifier = new sam$space_hypen_parser_combinators_Parse$0_16(tmp_1);\n      var tmp_2 = word$lambda;\n      word = new sam$space_hypen_parser_combinators_Parse$0_17(tmp_2);\n      wrappedWord$delegate = lazy(wrappedWord$delegate$lambda);\n      var tmp_3 = number$lambda;\n      number = new sam$space_hypen_parser_combinators_Parse$0_18(tmp_3);\n      // Inline function 'kotlin.collections.toTypedArray' call\n      // Inline function 'kotlin.text.map' call\n      var this_0 = '0123456789';\n      // Inline function 'kotlin.text.mapTo' call\n      var destination = ArrayList_init_$Create$_0(charSequenceLength(this_0));\n      var inductionVariable = 0;\n      while (inductionVariable < charSequenceLength(this_0)) {\n        var item = charSequenceGet(this_0, inductionVariable);\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'space.hypen.parser.combinators.digit.<anonymous>' call\n        var tmp$ret$0 = char(item);\n        destination.h(tmp$ret$0);\n      }\n      var tmp$ret$3 = copyToArray(destination);\n      digit = oneOf(tmp$ret$3.slice());\n      var tmp_4 = [get_digit()];\n      // Inline function 'kotlin.collections.toTypedArray' call\n      // Inline function 'kotlin.text.map' call\n      var this_1 = 'abcdefABCDEF';\n      // Inline function 'kotlin.text.mapTo' call\n      var destination_0 = ArrayList_init_$Create$_0(charSequenceLength(this_1));\n      var inductionVariable_0 = 0;\n      while (inductionVariable_0 < charSequenceLength(this_1)) {\n        var item_0 = charSequenceGet(this_1, inductionVariable_0);\n        inductionVariable_0 = inductionVariable_0 + 1 | 0;\n        // Inline function 'space.hypen.parser.combinators.hexDigit.<anonymous>' call\n        var tmp$ret$0_0 = char(item_0);\n        destination_0.h(tmp$ret$0_0);\n      }\n      var tmp$ret$3_0 = copyToArray(destination_0);\n      var tmp_5 = oneOf(arrayConcat([tmp_4, tmp$ret$3_0]));\n      hexDigit = mapError(tmp_5, hexDigit$lambda);\n      take_0 = take$lambda;\n      var tmp_6 = decimal$lambda;\n      decimal = new sam$space_hypen_parser_combinators_Parse$0_19(tmp_6);\n    }\n  }\n  function get_appChain() {\n    _init_properties_Applicators_kt__9mn2bq();\n    return appChain;\n  }\n  var appChain;\n  function applicator() {\n    _init_properties_Applicators_kt__9mn2bq();\n    return plus(plus(plus(plus(plus(get_chain(), get_identifier()), maybe(get_whiteSpace())), maybe(arguments_0())), maybe(get_block())), maybe(get_whiteSpace()));\n  }\n  function appChain$lambda(it) {\n    _init_properties_Applicators_kt__9mn2bq();\n    var node = it instanceof Sequence ? it : THROW_CCE();\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = node.x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof Identifier) {\n        destination.h(element);\n      }\n    }\n    var tmp$ret$2 = destination == null ? null : firstOrNull(destination);\n    var tmp = ensureNotNull(tmp$ret$2);\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_1 = node.x5_1;\n    var destination_0 = ArrayList_init_$Create$();\n    var tmp0_iterator_0 = this_1.k();\n    while (tmp0_iterator_0.l()) {\n      var element_0 = tmp0_iterator_0.m();\n      if (element_0 instanceof Arguments) {\n        destination_0.h(element_0);\n      }\n    }\n    var tmp$ret$5 = destination_0 == null ? null : firstOrNull(destination_0);\n    var tmp_0 = ensureNotNull(tmp$ret$5);\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_2 = node.x5_1;\n    var destination_1 = ArrayList_init_$Create$();\n    var tmp0_iterator_1 = this_2.k();\n    while (tmp0_iterator_1.l()) {\n      var element_1 = tmp0_iterator_1.m();\n      if (element_1 instanceof Block) {\n        destination_1.h(element_1);\n      }\n    }\n    var tmp$ret$8 = destination_1 == null ? null : firstOrNull(destination_1);\n    return new Applicator(tmp, tmp_0, tmp$ret$8);\n  }\n  var properties_initialized_Applicators_kt_lv1azc;\n  function _init_properties_Applicators_kt__9mn2bq() {\n    if (!properties_initialized_Applicators_kt_lv1azc) {\n      properties_initialized_Applicators_kt_lv1azc = true;\n      var tmp = get_loop();\n      var tmp_0 = applicator();\n      appChain = tmp(map(tmp_0, appChain$lambda));\n    }\n  }\n  function get_argumentsDefinition() {\n    _init_properties_Arguments_kt__y54db8();\n    return argumentsDefinition;\n  }\n  var argumentsDefinition;\n  function get_argumentDefinition() {\n    _init_properties_Arguments_kt__y54db8();\n    return argumentDefinition;\n  }\n  var argumentDefinition;\n  function get_argumentTypes() {\n    _init_properties_Arguments_kt__y54db8();\n    return argumentTypes;\n  }\n  var argumentTypes;\n  function namedArgument() {\n    _init_properties_Arguments_kt__y54db8();\n    var tmp = sequence([get_identifier(), maybe(get_whiteSpace()), char(_Char___init__impl__6a9atx(58)), maybe(get_whiteSpace()), validObjects()]);\n    var tmp_0 = map(tmp, namedArgument$lambda);\n    return mapError(tmp_0, namedArgument$lambda_0);\n  }\n  function arguments_0() {\n    _init_properties_Arguments_kt__y54db8();\n    var tmp = arguments$lambda;\n    return new sam$space_hypen_parser_combinators_Parse$0_27(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_25(function_0) {\n    this.z8_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_25).m5 = function (input) {\n    return this.z8_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_26(function_0) {\n    this.a9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_26).m5 = function (input) {\n    return this.a9_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_27(function_0) {\n    this.b9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_27).m5 = function (input) {\n    return this.b9_1(input);\n  };\n  function argumentsDefinition$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    var tmp = get_between()(get_openingArgument(), get_closingArgument())(maybe(get_loop()(oneOf([get_comma(), get_whiteSpace(), get_argumentDefinition()]))));\n    var parser = mapError(tmp, argumentsDefinition$lambda$lambda);\n    var res = parser.m5(it);\n    var tmp_0;\n    if (res instanceof Success) {\n      var tmp_1 = res.output;\n      var node = tmp_1 instanceof Sequence ? tmp_1 : THROW_CCE();\n      var children = node.x5_1;\n      // Inline function 'kotlin.collections.toTypedArray' call\n      // Inline function 'kotlin.collections.filterIsInstance' call\n      // Inline function 'kotlin.collections.filterIsInstanceTo' call\n      var destination = ArrayList_init_$Create$();\n      var tmp0_iterator = children.k();\n      while (tmp0_iterator.l()) {\n        var element = tmp0_iterator.m();\n        if (element instanceof ArgumentDefinition) {\n          destination.h(element);\n        }\n      }\n      var tmp$ret$2 = copyToArray(destination);\n      tmp_0 = new Success(new ArgumentsDefinition(tmp$ret$2), res.state);\n    } else {\n      if (res instanceof Failure) {\n        tmp_0 = res;\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp_0;\n  }\n  function argumentsDefinition$lambda$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    return 'Failed to parse arguments - ' + it;\n  }\n  function argumentDefinition$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    var parser = plus(plus(plus(plus(get_identifier(), maybe(get_whiteSpace())), maybe(char(_Char___init__impl__6a9atx(58)))), maybe(get_whiteSpace())), maybe(get_word()));\n    var res = parser.m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      var tmp_0 = res.output;\n      var node = tmp_0 instanceof Sequence ? tmp_0 : THROW_CCE();\n      // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n      // Inline function 'kotlin.collections.filterIsInstance' call\n      // Inline function 'kotlin.collections.filterIsInstanceTo' call\n      var this_0 = node.x5_1;\n      var destination = ArrayList_init_$Create$();\n      var tmp0_iterator = this_0.k();\n      while (tmp0_iterator.l()) {\n        var element = tmp0_iterator.m();\n        if (element instanceof Identifier) {\n          destination.h(element);\n        }\n      }\n      var tmp$ret$2 = destination == null ? null : firstOrNull(destination);\n      var identifier = ensureNotNull(tmp$ret$2);\n      // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n      // Inline function 'kotlin.collections.filterIsInstance' call\n      // Inline function 'kotlin.collections.filterIsInstanceTo' call\n      var this_1 = node.x5_1;\n      var destination_0 = ArrayList_init_$Create$();\n      var tmp0_iterator_0 = this_1.k();\n      while (tmp0_iterator_0.l()) {\n        var element_0 = tmp0_iterator_0.m();\n        if (element_0 instanceof Word) {\n          destination_0.h(element_0);\n        }\n      }\n      var type = destination_0 == null ? null : firstOrNull(destination_0);\n      var tmp1_elvis_lhs = type == null ? null : type.text;\n      tmp = new Success(new ArgumentDefinition(identifier, new TypeIdentifier(tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs)), res.state);\n    } else {\n      if (res instanceof Failure) {\n        tmp = res;\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp;\n  }\n  function argumentTypes$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    var tmp;\n    if (it instanceof Argument) {\n      tmp = it;\n    } else {\n      if (it instanceof Object_0) {\n        tmp = new Argument(null, it.children.n() === 1 ? first(it.children) : it);\n      } else {\n        throw IllegalStateException_init_$Create$('Unexpected node type ' + it);\n      }\n    }\n    return tmp;\n  }\n  function namedArgument$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    var node = it instanceof Sequence ? it : THROW_CCE();\n    var tmp = node.x5_1.s(0);\n    var identifier = tmp instanceof Identifier ? tmp : THROW_CCE();\n    var tmp_0 = last(node.x5_1);\n    var data = tmp_0 instanceof Object_0 ? tmp_0 : THROW_CCE();\n    var x = new Argument(identifier, data);\n    return x;\n  }\n  function namedArgument$lambda_0(it) {\n    _init_properties_Arguments_kt__y54db8();\n    return 'Could not parse named argument';\n  }\n  function arguments$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    var tmp = get_between()(get_openingArgument(), get_closingArgument())(maybe(get_loop()(oneOf([get_comma(), get_whiteSpace(), get_argumentTypes()]))));\n    var parser = mapError(tmp, arguments$lambda$lambda);\n    var res = parser.m5(it);\n    var tmp_0;\n    if (res instanceof Success) {\n      var tmp_1 = res.output;\n      var node = tmp_1 instanceof Sequence ? tmp_1 : THROW_CCE();\n      var children = node.x5_1;\n      // Inline function 'kotlin.collections.toTypedArray' call\n      // Inline function 'kotlin.collections.filterIsInstance' call\n      // Inline function 'kotlin.collections.filterIsInstanceTo' call\n      var destination = ArrayList_init_$Create$();\n      var tmp0_iterator = children.k();\n      while (tmp0_iterator.l()) {\n        var element = tmp0_iterator.m();\n        if (element instanceof Argument) {\n          destination.h(element);\n        }\n      }\n      var tmp$ret$2 = copyToArray(destination);\n      tmp_0 = new Success(new Arguments(tmp$ret$2), res.state);\n    } else {\n      if (res instanceof Failure) {\n        tmp_0 = res;\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp_0;\n  }\n  function arguments$lambda$lambda(it) {\n    _init_properties_Arguments_kt__y54db8();\n    return 'Failed to parse arguments - ' + it;\n  }\n  var properties_initialized_Arguments_kt_sa27ye;\n  function _init_properties_Arguments_kt__y54db8() {\n    if (!properties_initialized_Arguments_kt_sa27ye) {\n      properties_initialized_Arguments_kt_sa27ye = true;\n      var tmp = argumentsDefinition$lambda;\n      argumentsDefinition = new sam$space_hypen_parser_combinators_Parse$0_25(tmp);\n      var tmp_0 = argumentDefinition$lambda;\n      argumentDefinition = new sam$space_hypen_parser_combinators_Parse$0_26(tmp_0);\n      var tmp_1 = oneOf([namedArgument(), validObjects()]);\n      argumentTypes = map(tmp_1, argumentTypes$lambda);\n    }\n  }\n  function get_single_comment() {\n    _init_properties_Comments_kt__7o34lw();\n    return single_comment;\n  }\n  var single_comment;\n  function get_comment_block_start() {\n    _init_properties_Comments_kt__7o34lw();\n    return comment_block_start;\n  }\n  var comment_block_start;\n  function get_comment_block_end() {\n    _init_properties_Comments_kt__7o34lw();\n    return comment_block_end;\n  }\n  var comment_block_end;\n  function get_comments() {\n    _init_properties_Comments_kt__7o34lw();\n    return comments;\n  }\n  var comments;\n  function comment_line() {\n    _init_properties_Comments_kt__7o34lw();\n    var tmp = get_single_comment();\n    var tmp_0 = get_line();\n    return plus(tmp, mapError(tmp_0, comment_line$lambda));\n  }\n  function comment_block() {\n    _init_properties_Comments_kt__7o34lw();\n    var tmp = get_comment_block_start();\n    var tmp_0 = comment_block$lambda;\n    var tmp_1 = plus(plus(tmp, new sam$space_hypen_parser_combinators_Parse$0_28(tmp_0)), get_comment_block_end());\n    return mapError(tmp_1, comment_block$lambda_0);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_28(function_0) {\n    this.c9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_28).m5 = function (input) {\n    return this.c9_1(input);\n  };\n  function comment_line$lambda(it) {\n    _init_properties_Comments_kt__7o34lw();\n    return 'Parsing comment failed';\n  }\n  function comment_block$lambda(input) {\n    _init_properties_Comments_kt__7o34lw();\n    // Inline function 'kotlin.takeIf' call\n    var this_0 = indexOf(input.s5_1, '*/');\n    // Inline function 'kotlin.contracts.contract' call\n    var tmp;\n    // Inline function 'space.hypen.parser.combinators.ast.comment_block.<anonymous>.<anonymous>' call\n    if (this_0 >= 0) {\n      tmp = this_0;\n    } else {\n      tmp = null;\n    }\n    var text = tmp;\n    var tmp_0;\n    if (text == null) {\n      tmp_0 = new Failure(input.s5_1, combineWith(new CommentNotFinished(input.s5_1, input), 'Comment block not finished'));\n    } else {\n      // Inline function 'kotlin.text.substring' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp$ret$3 = input.s5_1.substring(0, text);\n      tmp_0 = new Success(new Single(tmp$ret$3), input.v5(drop(input.s5_1, text)));\n    }\n    return tmp_0;\n  }\n  function comment_block$lambda_0(it) {\n    _init_properties_Comments_kt__7o34lw();\n    return 'Found comment block, but parsing failed. Reason: ' + it;\n  }\n  var properties_initialized_Comments_kt_uk7mwm;\n  function _init_properties_Comments_kt__7o34lw() {\n    if (!properties_initialized_Comments_kt_uk7mwm) {\n      properties_initialized_Comments_kt_uk7mwm = true;\n      single_comment = word_0('//');\n      comment_block_start = word_0('/*');\n      comment_block_end = word_0('*/');\n      comments = oneOf([comment_line(), comment_block()]);\n    }\n  }\n  function get_componentDefinition() {\n    _init_properties_Components_kt__rw83jq();\n    return componentDefinition;\n  }\n  var componentDefinition;\n  function get_componentUseAst() {\n    _init_properties_Components_kt__rw83jq();\n    return componentUseAst;\n  }\n  var componentUseAst;\n  function sam$space_hypen_parser_combinators_Parse$0_29(function_0) {\n    this.d9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_29).m5 = function (input) {\n    return this.d9_1(input);\n  };\n  function componentDefinition$lambda(it) {\n    _init_properties_Components_kt__rw83jq();\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = (it instanceof Sequence ? it : THROW_CCE()).x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof Identifier) {\n        destination.h(element);\n      }\n    }\n    var tmp$ret$2 = destination == null ? null : firstOrNull(destination);\n    var tmp = ensureNotNull(tmp$ret$2);\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_1 = it.x5_1;\n    var destination_0 = ArrayList_init_$Create$();\n    var tmp0_iterator_0 = this_1.k();\n    while (tmp0_iterator_0.l()) {\n      var element_0 = tmp0_iterator_0.m();\n      if (element_0 instanceof ArgumentsDefinition) {\n        destination_0.h(element_0);\n      }\n    }\n    var tmp0_elvis_lhs = destination_0 == null ? null : firstOrNull(destination_0);\n    var tmp_0;\n    if (tmp0_elvis_lhs == null) {\n      // Inline function 'kotlin.emptyArray' call\n      var tmp$ret$6 = [];\n      tmp_0 = new ArgumentsDefinition(tmp$ret$6);\n    } else {\n      tmp_0 = tmp0_elvis_lhs;\n    }\n    var tmp_1 = tmp_0;\n    // Inline function 'space.hypen.parser.combinators.Sequence.findInstance' call\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_2 = it.x5_1;\n    var destination_1 = ArrayList_init_$Create$();\n    var tmp0_iterator_1 = this_2.k();\n    while (tmp0_iterator_1.l()) {\n      var element_1 = tmp0_iterator_1.m();\n      if (element_1 instanceof Block) {\n        destination_1.h(element_1);\n      }\n    }\n    var tmp$ret$9 = destination_1 == null ? null : firstOrNull(destination_1);\n    return new ComponentDefinition(tmp, tmp_1, tmp$ret$9);\n  }\n  function componentUseAst$lambda(it) {\n    _init_properties_Components_kt__rw83jq();\n    var componentUsePoint = plus(plus(plus(plus(plus(get_identifier(), maybe(get_whiteSpace())), maybe(arguments_0())), maybe(get_whiteSpace())), maybe(get_block())), maybe(get_appChain()));\n    var res = componentUsePoint.m5(it);\n    var tmp;\n    if (res instanceof Success) {\n      var tmp_0 = res.output;\n      var node = tmp_0 instanceof Sequence ? tmp_0 : THROW_CCE();\n      var nodes = node.x5_1;\n      var tmp$ret$1;\n      $l$block: {\n        // Inline function 'kotlin.collections.first' call\n        var tmp0_iterator = nodes.k();\n        while (tmp0_iterator.l()) {\n          var element = tmp0_iterator.m();\n          // Inline function 'space.hypen.parser.combinators.ast.componentUseAst.<anonymous>.<anonymous>' call\n          if (element instanceof Identifier) {\n            tmp$ret$1 = element;\n            break $l$block;\n          }\n        }\n        throw NoSuchElementException_init_$Create$('Collection contains no element matching the predicate.');\n      }\n      var tmp_1 = tmp$ret$1;\n      var identifier = tmp_1 instanceof Identifier ? tmp_1 : THROW_CCE();\n      var tmp$ret$3;\n      $l$block_0: {\n        // Inline function 'kotlin.collections.firstOrNull' call\n        var tmp0_iterator_0 = nodes.k();\n        while (tmp0_iterator_0.l()) {\n          var element_0 = tmp0_iterator_0.m();\n          // Inline function 'space.hypen.parser.combinators.ast.componentUseAst.<anonymous>.<anonymous>' call\n          if (element_0 instanceof Arguments) {\n            tmp$ret$3 = element_0;\n            break $l$block_0;\n          }\n        }\n        tmp$ret$3 = null;\n      }\n      var tmp_2 = tmp$ret$3;\n      var arguments_1 = (tmp_2 == null ? true : tmp_2 instanceof Arguments) ? tmp_2 : THROW_CCE();\n      var tmp$ret$5;\n      $l$block_1: {\n        // Inline function 'kotlin.collections.firstOrNull' call\n        var tmp0_iterator_1 = nodes.k();\n        while (tmp0_iterator_1.l()) {\n          var element_1 = tmp0_iterator_1.m();\n          // Inline function 'space.hypen.parser.combinators.ast.componentUseAst.<anonymous>.<anonymous>' call\n          if (element_1 instanceof Block) {\n            tmp$ret$5 = element_1;\n            break $l$block_1;\n          }\n        }\n        tmp$ret$5 = null;\n      }\n      var block = tmp$ret$5;\n      // Inline function 'kotlin.collections.filterIsInstance' call\n      // Inline function 'kotlin.collections.filterIsInstanceTo' call\n      var destination = ArrayList_init_$Create$();\n      var tmp0_iterator_2 = nodes.k();\n      while (tmp0_iterator_2.l()) {\n        var element_2 = tmp0_iterator_2.m();\n        if (element_2 instanceof Applicator) {\n          destination.h(element_2);\n        }\n      }\n      var applicators = destination;\n      var tmp1_elvis_lhs = arguments_1 == null ? null : arguments_1.arguments;\n      var tmp_3;\n      if (tmp1_elvis_lhs == null) {\n        // Inline function 'kotlin.emptyArray' call\n        tmp_3 = [];\n      } else {\n        tmp_3 = tmp1_elvis_lhs;\n      }\n      var tmp_4 = tmp_3;\n      var tmp_5 = (block == null ? true : block instanceof Block) ? block : THROW_CCE();\n      // Inline function 'kotlin.collections.toTypedArray' call\n      var tmp$ret$9 = copyToArray(applicators);\n      tmp = new Success(new ComponentUsage(identifier, tmp_4, tmp_5, tmp$ret$9), res.state);\n    } else {\n      if (res instanceof Failure) {\n        tmp = new Failure(it.s5_1, combineWith(new UnexpectedToken(it.s5_1, it), 'Error parsing component usage'));\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp;\n  }\n  var properties_initialized_Components_kt_4bvhns;\n  function _init_properties_Components_kt__rw83jq() {\n    if (!properties_initialized_Components_kt_4bvhns) {\n      properties_initialized_Components_kt_4bvhns = true;\n      var tmp = plus(plus(plus(plus(plus(plus(word_0('component'), maybe(get_whiteSpace())), get_identifier()), maybe(get_whiteSpace())), maybe(get_argumentsDefinition())), maybe(get_whiteSpace())), maybe(get_block()));\n      componentDefinition = map(tmp, componentDefinition$lambda);\n      var tmp_0 = componentUseAst$lambda;\n      componentUseAst = new sam$space_hypen_parser_combinators_Parse$0_29(tmp_0);\n    }\n  }\n  function get_anObject() {\n    _init_properties_Objects_kt__b1hgpu();\n    return anObject;\n  }\n  var anObject;\n  function validObjects() {\n    _init_properties_Objects_kt__b1hgpu();\n    var tmp = validObjects$lambda;\n    var tmp_0 = new sam$space_hypen_parser_combinators_Parse$0_30(tmp);\n    var tmp_1 = get_word();\n    var tmp_2 = validObjects$lambda_0;\n    var tmp_3 = new sam$space_hypen_parser_combinators_Parse$0_30(tmp_2);\n    var tmp_4 = validObjects$lambda_1;\n    var tmp_5 = oneOf([tmp_0, tmp_1, tmp_3, new sam$space_hypen_parser_combinators_Parse$0_30(tmp_4), get_number(), get_decimal()]);\n    var tmp_6 = map(tmp_5, validObjects$lambda_2);\n    return mapError(tmp_6, validObjects$lambda_3);\n  }\n  function keyValue(parser) {\n    _init_properties_Objects_kt__b1hgpu();\n    var tmp = keyValue$lambda(parser);\n    return new sam$space_hypen_parser_combinators_Parse$0_31(tmp);\n  }\n  function sam$space_hypen_parser_combinators_Parse$0_30(function_0) {\n    this.e9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_30).m5 = function (input) {\n    return this.e9_1(input);\n  };\n  function sam$space_hypen_parser_combinators_Parse$0_31(function_0) {\n    this.f9_1 = function_0;\n  }\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_31).m5 = function (input) {\n    return this.f9_1(input);\n  };\n  function anObject$lambda(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return 'Invalid object values';\n  }\n  function anObject$lambda_0(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return 'Invalid object found while looping';\n  }\n  function anObject$lambda_1(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    var node = it instanceof Sequence ? it : THROW_CCE();\n    // Inline function 'kotlin.collections.filterIsInstance' call\n    // Inline function 'kotlin.collections.filterIsInstanceTo' call\n    var this_0 = node.x5_1;\n    var destination = ArrayList_init_$Create$();\n    var tmp0_iterator = this_0.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (element instanceof Property) {\n        destination.h(element);\n      }\n    }\n    var children = destination;\n    var tmp;\n    var tmp_0;\n    var tmp_1;\n    if (children.n() === 1) {\n      var tmp_2 = first(children).value;\n      tmp_1 = tmp_2 instanceof Object_0;\n    } else {\n      tmp_1 = false;\n    }\n    if (tmp_1) {\n      tmp_0 = first(children).name == null;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      var tmp_3 = first(children).value;\n      tmp = tmp_3 instanceof Object_0 ? tmp_3 : THROW_CCE();\n    } else {\n      tmp = new Object_0(children);\n    }\n    return tmp;\n  }\n  function validObjects$lambda(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    var res = get_anObject().m5(it);\n    return res;\n  }\n  function validObjects$lambda_0(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return hex().m5(it);\n  }\n  function validObjects$lambda_1(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    var res = get_wrappedWord().m5(it);\n    return res;\n  }\n  function validObjects$lambda_2(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    var tmp;\n    if (it instanceof Object_0) {\n      tmp = it;\n    } else {\n      tmp = new Object_0(listOf(new Property(null, it)));\n    }\n    return tmp;\n  }\n  function validObjects$lambda_3(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return 'Nothing matches the valid objects - ' + it;\n  }\n  function keyValue$lambda$lambda(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return 'Parsing object failed with - ';\n  }\n  function keyValue$lambda$lambda_0(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    return 'No proper object found for key-value with state ' + it.e7_1;\n  }\n  function keyValue$lambda$lambda_1(it) {\n    _init_properties_Objects_kt__b1hgpu();\n    var node = it instanceof Sequence ? it : THROW_CCE();\n    var tmp = node.x5_1.s(0);\n    var tmp_0 = tmp instanceof Identifier ? tmp : THROW_CCE();\n    // Inline function 'kotlin.let' call\n    // Inline function 'kotlin.contracts.contract' call\n    // Inline function 'space.hypen.parser.combinators.ast.keyValue.<anonymous>.<anonymous>.<anonymous>' call\n    var tmp$ret$1 = last(node.x5_1);\n    return new Property(tmp_0, tmp$ret$1);\n  }\n  function keyValue$lambda($parser) {\n    return function (it) {\n      var tmp = get_identifier();\n      var tmp_0 = maybe(get_whiteSpace());\n      var tmp_1 = char(_Char___init__impl__6a9atx(58));\n      var tmp_2 = maybe(get_whiteSpace());\n      var tmp_3 = sequence([tmp, tmp_0, tmp_1, tmp_2, mapError($parser, keyValue$lambda$lambda)]);\n      var tmp_4 = mapError(tmp_3, keyValue$lambda$lambda_0);\n      return map(tmp_4, keyValue$lambda$lambda_1).m5(it);\n    };\n  }\n  var properties_initialized_Objects_kt_1supz0;\n  function _init_properties_Objects_kt__b1hgpu() {\n    if (!properties_initialized_Objects_kt_1supz0) {\n      properties_initialized_Objects_kt_1supz0 = true;\n      var tmp = get_between()(get_openingBrace(), get_closingBrace());\n      var tmp_0 = get_loop();\n      var tmp_1 = maybe(get_whiteSpace());\n      var tmp_2 = keyValue(validObjects());\n      var tmp_3 = maybe(get_comma());\n      var tmp_4 = tmp_0(oneOf([tmp_1, tmp_2, mapError(tmp_3, anObject$lambda)]));\n      var tmp_5 = tmp(mapError(tmp_4, anObject$lambda_0));\n      anObject = map(tmp_5, anObject$lambda_1);\n    }\n  }\n  function HypenParser() {\n  }\n  protoOf(HypenParser).parse = function (input) {\n    return get_totalParser().n5(input);\n  };\n  protoOf(HypenParser).format = function (input) {\n    var result = this.parse(input);\n    var tmp;\n    if (result instanceof Success) {\n      tmp = toString_0(result.output);\n    } else {\n      if (result instanceof Failure) {\n        tmp = toString_0(result);\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n    return tmp;\n  };\n  //region block: post-declaration\n  protoOf(sam$space_hypen_parser_combinators_Parse$0).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_0).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_1).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_2).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_3).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_4).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_5).n5 = invoke;\n  protoOf(Identifier).b6 = stringify;\n  protoOf(TypeIdentifier).b6 = stringify;\n  protoOf(QuotedString).b6 = stringify;\n  protoOf(Word).b6 = stringify;\n  protoOf(Number_0).b6 = stringify;\n  protoOf(AST).b6 = stringify;\n  protoOf(Whitespace).b6 = stringify;\n  protoOf(Skip).b6 = stringify;\n  protoOf(Comma).b6 = stringify;\n  protoOf(Open).b6 = stringify;\n  protoOf(Close).b6 = stringify;\n  protoOf(Open_0).b6 = stringify;\n  protoOf(Close_0).b6 = stringify;\n  protoOf(Comment).b6 = stringify;\n  protoOf(ParsedChar).b6 = stringify;\n  protoOf(Sequence).b6 = stringify;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_6).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_7).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_8).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_9).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_10).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_11).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_12).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_13).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_14).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_15).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_16).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_17).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_18).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_19).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_20).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_21).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_22).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_23).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_24).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_25).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_26).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_27).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_28).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_29).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_30).n5 = invoke;\n  protoOf(sam$space_hypen_parser_combinators_Parse$0_31).n5 = invoke;\n  //endregion\n  //region block: init\n  Whitespace_instance = new Whitespace();\n  Skip_instance = new Skip();\n  Comma_instance = new Comma();\n  Open_instance = new Open();\n  Close_instance = new Close();\n  Open_instance_0 = new Open_0();\n  Close_instance_0 = new Close_0();\n  //endregion\n  //region block: exports\n  function $jsExportAll$(_) {\n    var $space = _.space || (_.space = {});\n    var $space$hypen = $space.hypen || ($space.hypen = {});\n    var $space$hypen$parser = $space$hypen.parser || ($space$hypen.parser = {});\n    var $space$hypen$parser$combinators = $space$hypen$parser.combinators || ($space$hypen$parser.combinators = {});\n    $space$hypen$parser$combinators.Identifier = Identifier;\n    $space$hypen$parser$combinators.TypeIdentifier = TypeIdentifier;\n    $space$hypen$parser$combinators.QuotedString = QuotedString;\n    $space$hypen$parser$combinators.Word = Word;\n    $space$hypen$parser$combinators.Number = Number_0;\n    $space$hypen$parser$combinators.AST = AST;\n    $space$hypen$parser$combinators.ArgumentDefinition = ArgumentDefinition;\n    $space$hypen$parser$combinators.ArgumentsDefinition = ArgumentsDefinition;\n    $space$hypen$parser$combinators.Object = Object_0;\n    $space$hypen$parser$combinators.ComponentDefinition = ComponentDefinition;\n    $space$hypen$parser$combinators.Applicator = Applicator;\n    $space$hypen$parser$combinators.Arguments = Arguments;\n    $space$hypen$parser$combinators.Argument = Argument;\n    $space$hypen$parser$combinators.Property = Property;\n    $space$hypen$parser$combinators.Module = Module;\n    $space$hypen$parser$combinators.ComponentUsage = ComponentUsage;\n    $space$hypen$parser$combinators.Block = Block;\n    var $space = _.space || (_.space = {});\n    var $space$hypen = $space.hypen || ($space.hypen = {});\n    var $space$hypen$parser = $space$hypen.parser || ($space$hypen.parser = {});\n    var $space$hypen$parser$combinators = $space$hypen$parser.combinators || ($space$hypen$parser.combinators = {});\n    $space$hypen$parser$combinators.Success = Success;\n    $space$hypen$parser$combinators.Failure = Failure;\n    var $space = _.space || (_.space = {});\n    var $space$hypen = $space.hypen || ($space.hypen = {});\n    var $space$hypen$parser = $space$hypen.parser || ($space$hypen.parser = {});\n    var $space$hypen$parser$combinators = $space$hypen$parser.combinators || ($space$hypen$parser.combinators = {});\n    $space$hypen$parser$combinators.HypenParser = HypenParser;\n  }\n  $jsExportAll$(_);\n  //endregion\n  main();\n  return _;\n}));\n\n//# sourceMappingURL=hypen-kotlin.js.map\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/hypen-kotlin/kotlin/hypen-kotlin.js?");

/***/ }),

/***/ "./src/hypen-kotlin/kotlin/kotlin-kotlin-stdlib.js":
/*!*********************************************************!*\
  !*** ./src/hypen-kotlin/kotlin/kotlin-kotlin-stdlib.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//region block: polyfills\nif (typeof ArrayBuffer.isView === 'undefined') {\n  ArrayBuffer.isView = function (a) {\n    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n  };\n}\nif (typeof Math.imul === 'undefined') {\n  Math.imul = function imul(a, b) {\n    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;\n  };\n}\n//endregion\n(function (root, factory) {\n  if (true)\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  else {}\n}(this, function (_) {\n  'use strict';\n  //region block: imports\n  var imul = Math.imul;\n  var isView = ArrayBuffer.isView;\n  //endregion\n  //region block: pre-declaration\n  setMetadataFor(CharSequence, 'CharSequence', interfaceMeta);\n  setMetadataFor(Number_0, 'Number', classMeta);\n  setMetadataFor(Unit, 'Unit', objectMeta);\n  setMetadataFor(IntCompanionObject, 'IntCompanionObject', objectMeta);\n  setMetadataFor(Collection, 'Collection', interfaceMeta);\n  setMetadataFor(AbstractCollection, 'AbstractCollection', classMeta, VOID, [Collection]);\n  setMetadataFor(AbstractMutableCollection, 'AbstractMutableCollection', classMeta, AbstractCollection, [AbstractCollection, Collection]);\n  setMetadataFor(IteratorImpl, 'IteratorImpl', classMeta);\n  setMetadataFor(List, 'List', interfaceMeta, VOID, [Collection]);\n  setMetadataFor(AbstractMutableList, 'AbstractMutableList', classMeta, AbstractMutableCollection, [AbstractMutableCollection, Collection, List]);\n  setMetadataFor(Companion, 'Companion', objectMeta);\n  setMetadataFor(ArrayList, 'ArrayList', classMeta, AbstractMutableList, [AbstractMutableList, Collection, List], ArrayList_init_$Create$);\n  setMetadataFor(KClass, 'KClass', interfaceMeta);\n  setMetadataFor(KClassImpl, 'KClassImpl', classMeta, VOID, [KClass]);\n  setMetadataFor(NothingKClassImpl, 'NothingKClassImpl', objectMeta, KClassImpl);\n  setMetadataFor(ErrorKClass, 'ErrorKClass', classMeta, VOID, [KClass], ErrorKClass);\n  setMetadataFor(PrimitiveKClassImpl, 'PrimitiveKClassImpl', classMeta, KClassImpl);\n  setMetadataFor(SimpleKClassImpl, 'SimpleKClassImpl', classMeta, KClassImpl);\n  setMetadataFor(KProperty0, 'KProperty0', interfaceMeta);\n  setMetadataFor(PrimitiveClasses, 'PrimitiveClasses', objectMeta);\n  setMetadataFor(StringBuilder, 'StringBuilder', classMeta, VOID, [CharSequence], StringBuilder_init_$Create$);\n  setMetadataFor(ExceptionTraceBuilder, 'ExceptionTraceBuilder', classMeta, VOID, VOID, ExceptionTraceBuilder);\n  setMetadataFor(Companion_0, 'Companion', objectMeta);\n  setMetadataFor(Char, 'Char', classMeta);\n  setMetadataFor(arrayIterator$1, VOID, classMeta);\n  setMetadataFor(Companion_1, 'Companion', objectMeta);\n  setMetadataFor(Long, 'Long', classMeta, Number_0);\n  setMetadataFor(Digit, 'Digit', objectMeta);\n  setMetadataFor(Letter, 'Letter', objectMeta);\n  setMetadataFor(Exception, 'Exception', classMeta, Error, VOID, Exception_init_$Create$);\n  setMetadataFor(RuntimeException, 'RuntimeException', classMeta, Exception, VOID, RuntimeException_init_$Create$);\n  setMetadataFor(IllegalArgumentException, 'IllegalArgumentException', classMeta, RuntimeException, VOID, IllegalArgumentException_init_$Create$);\n  setMetadataFor(IndexOutOfBoundsException, 'IndexOutOfBoundsException', classMeta, RuntimeException, VOID, IndexOutOfBoundsException_init_$Create$);\n  setMetadataFor(IllegalStateException, 'IllegalStateException', classMeta, RuntimeException, VOID, IllegalStateException_init_$Create$);\n  setMetadataFor(UnsupportedOperationException, 'UnsupportedOperationException', classMeta, RuntimeException, VOID, UnsupportedOperationException_init_$Create$);\n  setMetadataFor(NoSuchElementException, 'NoSuchElementException', classMeta, RuntimeException, VOID, NoSuchElementException_init_$Create$);\n  setMetadataFor(NumberFormatException, 'NumberFormatException', classMeta, IllegalArgumentException, VOID, NumberFormatException_init_$Create$);\n  setMetadataFor(ArithmeticException, 'ArithmeticException', classMeta, RuntimeException, VOID, ArithmeticException_init_$Create$);\n  setMetadataFor(NullPointerException, 'NullPointerException', classMeta, RuntimeException, VOID, NullPointerException_init_$Create$);\n  setMetadataFor(NoWhenBranchMatchedException, 'NoWhenBranchMatchedException', classMeta, RuntimeException, VOID, NoWhenBranchMatchedException_init_$Create$);\n  setMetadataFor(ClassCastException, 'ClassCastException', classMeta, RuntimeException, VOID, ClassCastException_init_$Create$);\n  setMetadataFor(Companion_2, 'Companion', objectMeta);\n  setMetadataFor(EmptyList, 'EmptyList', objectMeta, VOID, [List]);\n  setMetadataFor(ArrayAsCollection, 'ArrayAsCollection', classMeta, VOID, [Collection]);\n  setMetadataFor(EmptyIterator, 'EmptyIterator', objectMeta);\n  setMetadataFor(IntIterator, 'IntIterator', classMeta);\n  setMetadataFor(TransformingSequence$iterator$1, VOID, classMeta);\n  setMetadataFor(TransformingSequence, 'TransformingSequence', classMeta);\n  setMetadataFor(Companion_3, 'Companion', objectMeta);\n  setMetadataFor(IntProgression, 'IntProgression', classMeta);\n  setMetadataFor(IntRange, 'IntRange', classMeta, IntProgression);\n  setMetadataFor(IntProgressionIterator, 'IntProgressionIterator', classMeta, IntIterator);\n  setMetadataFor(Companion_4, 'Companion', objectMeta);\n  setMetadataFor(DelimitedRangesSequence$iterator$1, VOID, classMeta);\n  setMetadataFor(DelimitedRangesSequence, 'DelimitedRangesSequence', classMeta);\n  setMetadataFor(UnsafeLazyImpl, 'UnsafeLazyImpl', classMeta);\n  setMetadataFor(UNINITIALIZED_VALUE, 'UNINITIALIZED_VALUE', objectMeta);\n  setMetadataFor(Pair, 'Pair', classMeta);\n  //endregion\n  function CharSequence() {\n  }\n  function Number_0() {\n  }\n  function Unit() {\n  }\n  protoOf(Unit).toString = function () {\n    return 'kotlin.Unit';\n  };\n  var Unit_instance;\n  function Unit_getInstance() {\n    return Unit_instance;\n  }\n  function IntCompanionObject() {\n    this.MIN_VALUE = -2147483648;\n    this.MAX_VALUE = 2147483647;\n    this.SIZE_BYTES = 4;\n    this.SIZE_BITS = 32;\n  }\n  protoOf(IntCompanionObject).d = function () {\n    return this.MIN_VALUE;\n  };\n  protoOf(IntCompanionObject).e = function () {\n    return this.MAX_VALUE;\n  };\n  protoOf(IntCompanionObject).f = function () {\n    return this.SIZE_BYTES;\n  };\n  protoOf(IntCompanionObject).g = function () {\n    return this.SIZE_BITS;\n  };\n  var IntCompanionObject_instance;\n  function IntCompanionObject_getInstance() {\n    return IntCompanionObject_instance;\n  }\n  function isNaN_0(_this__u8e3s4) {\n    return !(_this__u8e3s4 === _this__u8e3s4);\n  }\n  function collectionToArray(collection) {\n    return collectionToArrayCommonImpl(collection);\n  }\n  function listOf(element) {\n    return arrayListOf([element]);\n  }\n  function copyToArray(collection) {\n    var tmp;\n    // Inline function 'kotlin.js.asDynamic' call\n    if (collection.toArray !== undefined) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = collection.toArray();\n    } else {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = collectionToArray(collection);\n    }\n    return tmp;\n  }\n  function checkIndexOverflow(index) {\n    if (index < 0) {\n      throwIndexOverflow();\n    }\n    return index;\n  }\n  function AbstractMutableCollection() {\n    AbstractCollection.call(this);\n  }\n  protoOf(AbstractMutableCollection).i = function (elements) {\n    this.j();\n    var modified = false;\n    var tmp0_iterator = elements.k();\n    while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      if (this.h(element))\n        modified = true;\n    }\n    return modified;\n  };\n  protoOf(AbstractMutableCollection).toJSON = function () {\n    return this.toArray();\n  };\n  protoOf(AbstractMutableCollection).j = function () {\n  };\n  function IteratorImpl($outer) {\n    this.r_1 = $outer;\n    this.p_1 = 0;\n    this.q_1 = -1;\n  }\n  protoOf(IteratorImpl).l = function () {\n    return this.p_1 < this.r_1.n();\n  };\n  protoOf(IteratorImpl).m = function () {\n    if (!this.l())\n      throw NoSuchElementException_init_$Create$();\n    var tmp = this;\n    var tmp1 = this.p_1;\n    this.p_1 = tmp1 + 1 | 0;\n    tmp.q_1 = tmp1;\n    return this.r_1.s(this.q_1);\n  };\n  function AbstractMutableList() {\n    AbstractMutableCollection.call(this);\n    this.t_1 = 0;\n  }\n  protoOf(AbstractMutableList).h = function (element) {\n    this.j();\n    this.u(this.n(), element);\n    return true;\n  };\n  protoOf(AbstractMutableList).k = function () {\n    return new IteratorImpl(this);\n  };\n  protoOf(AbstractMutableList).equals = function (other) {\n    if (other === this)\n      return true;\n    if (!(!(other == null) ? isInterface(other, List) : false))\n      return false;\n    return Companion_instance_2.w(this, other);\n  };\n  protoOf(AbstractMutableList).hashCode = function () {\n    return Companion_instance_2.x(this);\n  };\n  function Companion() {\n    Companion_instance = this;\n    var tmp = this;\n    // Inline function 'kotlin.also' call\n    var this_0 = ArrayList_init_$Create$_0(0);\n    // Inline function 'kotlin.contracts.contract' call\n    // Inline function 'kotlin.collections.Companion.Empty.<anonymous>' call\n    this_0.a1_1 = true;\n    tmp.b1_1 = this_0;\n  }\n  var Companion_instance;\n  function Companion_getInstance() {\n    if (Companion_instance == null)\n      new Companion();\n    return Companion_instance;\n  }\n  function ArrayList_init_$Init$($this) {\n    // Inline function 'kotlin.emptyArray' call\n    var tmp$ret$0 = [];\n    ArrayList.call($this, tmp$ret$0);\n    return $this;\n  }\n  function ArrayList_init_$Create$() {\n    return ArrayList_init_$Init$(objectCreate(protoOf(ArrayList)));\n  }\n  function ArrayList_init_$Init$_0(initialCapacity, $this) {\n    // Inline function 'kotlin.emptyArray' call\n    var tmp$ret$0 = [];\n    ArrayList.call($this, tmp$ret$0);\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.contracts.contract' call\n    if (!(initialCapacity >= 0)) {\n      // Inline function 'kotlin.collections.ArrayList.<init>.<anonymous>' call\n      var message = 'Negative initial capacity: ' + initialCapacity;\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    return $this;\n  }\n  function ArrayList_init_$Create$_0(initialCapacity) {\n    return ArrayList_init_$Init$_0(initialCapacity, objectCreate(protoOf(ArrayList)));\n  }\n  function ArrayList_init_$Init$_1(elements, $this) {\n    // Inline function 'kotlin.collections.toTypedArray' call\n    var tmp$ret$0 = copyToArray(elements);\n    ArrayList.call($this, tmp$ret$0);\n    return $this;\n  }\n  function ArrayList_init_$Create$_1(elements) {\n    return ArrayList_init_$Init$_1(elements, objectCreate(protoOf(ArrayList)));\n  }\n  function increaseLength($this, amount) {\n    var previous = $this.n();\n    // Inline function 'kotlin.js.asDynamic' call\n    $this.z_1.length = $this.n() + amount | 0;\n    return previous;\n  }\n  function rangeCheck($this, index) {\n    // Inline function 'kotlin.apply' call\n    // Inline function 'kotlin.contracts.contract' call\n    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call\n    Companion_instance_2.c1(index, $this.n());\n    return index;\n  }\n  function insertionRangeCheck($this, index) {\n    // Inline function 'kotlin.apply' call\n    // Inline function 'kotlin.contracts.contract' call\n    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call\n    Companion_instance_2.d1(index, $this.n());\n    return index;\n  }\n  function ArrayList(array) {\n    Companion_getInstance();\n    AbstractMutableList.call(this);\n    this.z_1 = array;\n    this.a1_1 = false;\n  }\n  protoOf(ArrayList).n = function () {\n    return this.z_1.length;\n  };\n  protoOf(ArrayList).s = function (index) {\n    var tmp = this.z_1[rangeCheck(this, index)];\n    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();\n  };\n  protoOf(ArrayList).h = function (element) {\n    this.j();\n    // Inline function 'kotlin.js.asDynamic' call\n    this.z_1.push(element);\n    this.t_1 = this.t_1 + 1 | 0;\n    return true;\n  };\n  protoOf(ArrayList).u = function (index, element) {\n    this.j();\n    // Inline function 'kotlin.js.asDynamic' call\n    this.z_1.splice(insertionRangeCheck(this, index), 0, element);\n    this.t_1 = this.t_1 + 1 | 0;\n  };\n  protoOf(ArrayList).i = function (elements) {\n    this.j();\n    if (elements.o())\n      return false;\n    var offset = increaseLength(this, elements.n());\n    // Inline function 'kotlin.collections.forEachIndexed' call\n    var index = 0;\n    var tmp0_iterator = elements.k();\n    while (tmp0_iterator.l()) {\n      var item = tmp0_iterator.m();\n      // Inline function 'kotlin.collections.ArrayList.addAll.<anonymous>' call\n      var tmp1 = index;\n      index = tmp1 + 1 | 0;\n      var index_0 = checkIndexOverflow(tmp1);\n      this.z_1[offset + index_0 | 0] = item;\n    }\n    this.t_1 = this.t_1 + 1 | 0;\n    return true;\n  };\n  protoOf(ArrayList).toString = function () {\n    return arrayToString(this.z_1);\n  };\n  protoOf(ArrayList).e1 = function () {\n    return [].slice.call(this.z_1);\n  };\n  protoOf(ArrayList).toArray = function () {\n    return this.e1();\n  };\n  protoOf(ArrayList).j = function () {\n    if (this.a1_1)\n      throw UnsupportedOperationException_init_$Create$();\n  };\n  function KClass() {\n  }\n  function KClassImpl(jClass) {\n    this.g1_1 = jClass;\n  }\n  protoOf(KClassImpl).h1 = function () {\n    return this.g1_1;\n  };\n  protoOf(KClassImpl).equals = function (other) {\n    var tmp;\n    if (other instanceof NothingKClassImpl) {\n      tmp = false;\n    } else {\n      if (other instanceof ErrorKClass) {\n        tmp = false;\n      } else {\n        if (other instanceof KClassImpl) {\n          tmp = equals(this.h1(), other.h1());\n        } else {\n          tmp = false;\n        }\n      }\n    }\n    return tmp;\n  };\n  protoOf(KClassImpl).hashCode = function () {\n    var tmp0_safe_receiver = this.f1();\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);\n    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;\n  };\n  protoOf(KClassImpl).toString = function () {\n    return 'class ' + this.f1();\n  };\n  function NothingKClassImpl() {\n    NothingKClassImpl_instance = this;\n    KClassImpl.call(this, Object);\n    this.j1_1 = 'Nothing';\n  }\n  protoOf(NothingKClassImpl).f1 = function () {\n    return this.j1_1;\n  };\n  protoOf(NothingKClassImpl).h1 = function () {\n    throw UnsupportedOperationException_init_$Create$_0(\"There's no native JS class for Nothing type\");\n  };\n  protoOf(NothingKClassImpl).equals = function (other) {\n    return other === this;\n  };\n  protoOf(NothingKClassImpl).hashCode = function () {\n    return 0;\n  };\n  var NothingKClassImpl_instance;\n  function NothingKClassImpl_getInstance() {\n    if (NothingKClassImpl_instance == null)\n      new NothingKClassImpl();\n    return NothingKClassImpl_instance;\n  }\n  function ErrorKClass() {\n  }\n  protoOf(ErrorKClass).equals = function (other) {\n    return other === this;\n  };\n  protoOf(ErrorKClass).hashCode = function () {\n    return 0;\n  };\n  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {\n    KClassImpl.call(this, jClass);\n    this.l1_1 = givenSimpleName;\n    this.m1_1 = isInstanceFunction;\n  }\n  protoOf(PrimitiveKClassImpl).equals = function (other) {\n    if (!(other instanceof PrimitiveKClassImpl))\n      return false;\n    return protoOf(KClassImpl).equals.call(this, other) ? this.l1_1 === other.l1_1 : false;\n  };\n  protoOf(PrimitiveKClassImpl).f1 = function () {\n    return this.l1_1;\n  };\n  function SimpleKClassImpl(jClass) {\n    KClassImpl.call(this, jClass);\n    var tmp = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp0_safe_receiver = jClass.$metadata$;\n    tmp.o1_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;\n  }\n  protoOf(SimpleKClassImpl).f1 = function () {\n    return this.o1_1;\n  };\n  function KProperty0() {\n  }\n  function get_functionClasses() {\n    _init_properties_primitives_kt__3fums4();\n    return functionClasses;\n  }\n  var functionClasses;\n  function PrimitiveClasses$anyClass$lambda(it) {\n    return !(it == null);\n  }\n  function PrimitiveClasses$numberClass$lambda(it) {\n    return isNumber(it);\n  }\n  function PrimitiveClasses$booleanClass$lambda(it) {\n    return !(it == null) ? typeof it === 'boolean' : false;\n  }\n  function PrimitiveClasses$byteClass$lambda(it) {\n    return !(it == null) ? typeof it === 'number' : false;\n  }\n  function PrimitiveClasses$shortClass$lambda(it) {\n    return !(it == null) ? typeof it === 'number' : false;\n  }\n  function PrimitiveClasses$intClass$lambda(it) {\n    return !(it == null) ? typeof it === 'number' : false;\n  }\n  function PrimitiveClasses$floatClass$lambda(it) {\n    return !(it == null) ? typeof it === 'number' : false;\n  }\n  function PrimitiveClasses$doubleClass$lambda(it) {\n    return !(it == null) ? typeof it === 'number' : false;\n  }\n  function PrimitiveClasses$arrayClass$lambda(it) {\n    return !(it == null) ? isArray(it) : false;\n  }\n  function PrimitiveClasses$stringClass$lambda(it) {\n    return !(it == null) ? typeof it === 'string' : false;\n  }\n  function PrimitiveClasses$throwableClass$lambda(it) {\n    return it instanceof Error;\n  }\n  function PrimitiveClasses$booleanArrayClass$lambda(it) {\n    return !(it == null) ? isBooleanArray(it) : false;\n  }\n  function PrimitiveClasses$charArrayClass$lambda(it) {\n    return !(it == null) ? isCharArray(it) : false;\n  }\n  function PrimitiveClasses$byteArrayClass$lambda(it) {\n    return !(it == null) ? isByteArray(it) : false;\n  }\n  function PrimitiveClasses$shortArrayClass$lambda(it) {\n    return !(it == null) ? isShortArray(it) : false;\n  }\n  function PrimitiveClasses$intArrayClass$lambda(it) {\n    return !(it == null) ? isIntArray(it) : false;\n  }\n  function PrimitiveClasses$longArrayClass$lambda(it) {\n    return !(it == null) ? isLongArray(it) : false;\n  }\n  function PrimitiveClasses$floatArrayClass$lambda(it) {\n    return !(it == null) ? isFloatArray(it) : false;\n  }\n  function PrimitiveClasses$doubleArrayClass$lambda(it) {\n    return !(it == null) ? isDoubleArray(it) : false;\n  }\n  function PrimitiveClasses$functionClass$lambda($arity) {\n    return function (it) {\n      var tmp;\n      if (typeof it === 'function') {\n        // Inline function 'kotlin.js.asDynamic' call\n        tmp = it.length === $arity;\n      } else {\n        tmp = false;\n      }\n      return tmp;\n    };\n  }\n  function PrimitiveClasses() {\n    PrimitiveClasses_instance = this;\n    var tmp = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_0 = Object;\n    tmp.anyClass = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);\n    var tmp_1 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_2 = Number;\n    tmp_1.numberClass = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);\n    this.nothingClass = NothingKClassImpl_getInstance();\n    var tmp_3 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_4 = Boolean;\n    tmp_3.booleanClass = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);\n    var tmp_5 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_6 = Number;\n    tmp_5.byteClass = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);\n    var tmp_7 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_8 = Number;\n    tmp_7.shortClass = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);\n    var tmp_9 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_10 = Number;\n    tmp_9.intClass = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);\n    var tmp_11 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_12 = Number;\n    tmp_11.floatClass = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);\n    var tmp_13 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_14 = Number;\n    tmp_13.doubleClass = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);\n    var tmp_15 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_16 = Array;\n    tmp_15.arrayClass = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);\n    var tmp_17 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_18 = String;\n    tmp_17.stringClass = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);\n    var tmp_19 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_20 = Error;\n    tmp_19.throwableClass = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);\n    var tmp_21 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_22 = Array;\n    tmp_21.booleanArrayClass = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);\n    var tmp_23 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_24 = Uint16Array;\n    tmp_23.charArrayClass = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);\n    var tmp_25 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_26 = Int8Array;\n    tmp_25.byteArrayClass = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);\n    var tmp_27 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_28 = Int16Array;\n    tmp_27.shortArrayClass = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);\n    var tmp_29 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_30 = Int32Array;\n    tmp_29.intArrayClass = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);\n    var tmp_31 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_32 = Array;\n    tmp_31.longArrayClass = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);\n    var tmp_33 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_34 = Float32Array;\n    tmp_33.floatArrayClass = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);\n    var tmp_35 = this;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp_36 = Float64Array;\n    tmp_35.doubleArrayClass = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);\n  }\n  protoOf(PrimitiveClasses).p1 = function () {\n    return this.anyClass;\n  };\n  protoOf(PrimitiveClasses).q1 = function () {\n    return this.numberClass;\n  };\n  protoOf(PrimitiveClasses).r1 = function () {\n    return this.nothingClass;\n  };\n  protoOf(PrimitiveClasses).s1 = function () {\n    return this.booleanClass;\n  };\n  protoOf(PrimitiveClasses).t1 = function () {\n    return this.byteClass;\n  };\n  protoOf(PrimitiveClasses).u1 = function () {\n    return this.shortClass;\n  };\n  protoOf(PrimitiveClasses).v1 = function () {\n    return this.intClass;\n  };\n  protoOf(PrimitiveClasses).w1 = function () {\n    return this.floatClass;\n  };\n  protoOf(PrimitiveClasses).x1 = function () {\n    return this.doubleClass;\n  };\n  protoOf(PrimitiveClasses).y1 = function () {\n    return this.arrayClass;\n  };\n  protoOf(PrimitiveClasses).z1 = function () {\n    return this.stringClass;\n  };\n  protoOf(PrimitiveClasses).a2 = function () {\n    return this.throwableClass;\n  };\n  protoOf(PrimitiveClasses).b2 = function () {\n    return this.booleanArrayClass;\n  };\n  protoOf(PrimitiveClasses).c2 = function () {\n    return this.charArrayClass;\n  };\n  protoOf(PrimitiveClasses).d2 = function () {\n    return this.byteArrayClass;\n  };\n  protoOf(PrimitiveClasses).e2 = function () {\n    return this.shortArrayClass;\n  };\n  protoOf(PrimitiveClasses).f2 = function () {\n    return this.intArrayClass;\n  };\n  protoOf(PrimitiveClasses).g2 = function () {\n    return this.longArrayClass;\n  };\n  protoOf(PrimitiveClasses).h2 = function () {\n    return this.floatArrayClass;\n  };\n  protoOf(PrimitiveClasses).i2 = function () {\n    return this.doubleArrayClass;\n  };\n  protoOf(PrimitiveClasses).functionClass = function (arity) {\n    var tmp0_elvis_lhs = get_functionClasses()[arity];\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      // Inline function 'kotlin.run' call\n      // Inline function 'kotlin.contracts.contract' call\n      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      var tmp_0 = Function;\n      var tmp_1 = 'Function' + arity;\n      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));\n      // Inline function 'kotlin.js.asDynamic' call\n      get_functionClasses()[arity] = result;\n      tmp = result;\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    return tmp;\n  };\n  var PrimitiveClasses_instance;\n  function PrimitiveClasses_getInstance() {\n    if (PrimitiveClasses_instance == null)\n      new PrimitiveClasses();\n    return PrimitiveClasses_instance;\n  }\n  var properties_initialized_primitives_kt_jle18u;\n  function _init_properties_primitives_kt__3fums4() {\n    if (!properties_initialized_primitives_kt_jle18u) {\n      properties_initialized_primitives_kt_jle18u = true;\n      // Inline function 'kotlin.arrayOfNulls' call\n      functionClasses = fillArrayVal(Array(0), null);\n    }\n  }\n  function getKClass(jClass) {\n    var tmp;\n    if (Array.isArray(jClass)) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = getKClassM(jClass);\n    } else {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = getKClass1(jClass);\n    }\n    return tmp;\n  }\n  function getKClassM(jClasses) {\n    var tmp;\n    switch (jClasses.length) {\n      case 1:\n        tmp = getKClass1(jClasses[0]);\n        break;\n      case 0:\n        // Inline function 'kotlin.js.unsafeCast' call\n\n        // Inline function 'kotlin.js.asDynamic' call\n\n        tmp = NothingKClassImpl_getInstance();\n        break;\n      default:\n        // Inline function 'kotlin.js.unsafeCast' call\n\n        // Inline function 'kotlin.js.asDynamic' call\n\n        tmp = new ErrorKClass();\n        break;\n    }\n    return tmp;\n  }\n  function getKClass1(jClass) {\n    if (jClass === String) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      return PrimitiveClasses_getInstance().stringClass;\n    }\n    // Inline function 'kotlin.js.asDynamic' call\n    var metadata = jClass.$metadata$;\n    var tmp;\n    if (metadata != null) {\n      var tmp_0;\n      if (metadata.$kClass$ == null) {\n        var kClass = new SimpleKClassImpl(jClass);\n        metadata.$kClass$ = kClass;\n        tmp_0 = kClass;\n      } else {\n        tmp_0 = metadata.$kClass$;\n      }\n      tmp = tmp_0;\n    } else {\n      tmp = new SimpleKClassImpl(jClass);\n    }\n    return tmp;\n  }\n  function getKClassFromExpression(e) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp;\n    switch (typeof e) {\n      case 'string':\n        tmp = PrimitiveClasses_getInstance().stringClass;\n        break;\n      case 'number':\n        var tmp_0;\n        // Inline function 'kotlin.js.asDynamic' call\n\n        // Inline function 'kotlin.js.jsBitwiseOr' call\n\n        if ((e | 0) === e) {\n          tmp_0 = PrimitiveClasses_getInstance().intClass;\n        } else {\n          tmp_0 = PrimitiveClasses_getInstance().doubleClass;\n        }\n\n        tmp = tmp_0;\n        break;\n      case 'boolean':\n        tmp = PrimitiveClasses_getInstance().booleanClass;\n        break;\n      case 'function':\n        var tmp_1 = PrimitiveClasses_getInstance();\n        // Inline function 'kotlin.js.asDynamic' call\n\n        tmp = tmp_1.functionClass(e.length);\n        break;\n      default:\n        var tmp_2;\n        if (isBooleanArray(e)) {\n          tmp_2 = PrimitiveClasses_getInstance().booleanArrayClass;\n        } else {\n          if (isCharArray(e)) {\n            tmp_2 = PrimitiveClasses_getInstance().charArrayClass;\n          } else {\n            if (isByteArray(e)) {\n              tmp_2 = PrimitiveClasses_getInstance().byteArrayClass;\n            } else {\n              if (isShortArray(e)) {\n                tmp_2 = PrimitiveClasses_getInstance().shortArrayClass;\n              } else {\n                if (isIntArray(e)) {\n                  tmp_2 = PrimitiveClasses_getInstance().intArrayClass;\n                } else {\n                  if (isLongArray(e)) {\n                    tmp_2 = PrimitiveClasses_getInstance().longArrayClass;\n                  } else {\n                    if (isFloatArray(e)) {\n                      tmp_2 = PrimitiveClasses_getInstance().floatArrayClass;\n                    } else {\n                      if (isDoubleArray(e)) {\n                        tmp_2 = PrimitiveClasses_getInstance().doubleArrayClass;\n                      } else {\n                        if (isInterface(e, KClass)) {\n                          tmp_2 = getKClass(KClass);\n                        } else {\n                          if (isArray(e)) {\n                            tmp_2 = PrimitiveClasses_getInstance().arrayClass;\n                          } else {\n                            var constructor = Object.getPrototypeOf(e).constructor;\n                            var tmp_3;\n                            if (constructor === Object) {\n                              tmp_3 = PrimitiveClasses_getInstance().anyClass;\n                            } else if (constructor === Error) {\n                              tmp_3 = PrimitiveClasses_getInstance().throwableClass;\n                            } else {\n                              var jsClass = constructor;\n                              tmp_3 = getKClass1(jsClass);\n                            }\n                            tmp_2 = tmp_3;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        tmp = tmp_2;\n        break;\n    }\n    // Inline function 'kotlin.js.asDynamic' call\n    return tmp;\n  }\n  function StringBuilder_init_$Init$($this) {\n    StringBuilder.call($this, '');\n    return $this;\n  }\n  function StringBuilder_init_$Create$() {\n    return StringBuilder_init_$Init$(objectCreate(protoOf(StringBuilder)));\n  }\n  function StringBuilder(content) {\n    this.j2_1 = !(content === undefined) ? content : '';\n  }\n  protoOf(StringBuilder).a = function () {\n    // Inline function 'kotlin.js.asDynamic' call\n    return this.j2_1.length;\n  };\n  protoOf(StringBuilder).b = function (index) {\n    // Inline function 'kotlin.text.getOrElse' call\n    var this_0 = this.j2_1;\n    var tmp;\n    if (index >= 0 ? index <= get_lastIndex_1(this_0) : false) {\n      tmp = charSequenceGet(this_0, index);\n    } else {\n      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', length: ' + this.a() + '}');\n    }\n    return tmp;\n  };\n  protoOf(StringBuilder).c = function (startIndex, endIndex) {\n    // Inline function 'kotlin.text.substring' call\n    // Inline function 'kotlin.js.asDynamic' call\n    return this.j2_1.substring(startIndex, endIndex);\n  };\n  protoOf(StringBuilder).k2 = function (value) {\n    this.j2_1 = this.j2_1 + toString(value);\n    return this;\n  };\n  protoOf(StringBuilder).l2 = function (value) {\n    this.j2_1 = this.j2_1 + toString_0(value);\n    return this;\n  };\n  protoOf(StringBuilder).m2 = function (value) {\n    var tmp = this;\n    var tmp_0 = this.j2_1;\n    tmp.j2_1 = tmp_0 + (value == null ? 'null' : value);\n    return this;\n  };\n  protoOf(StringBuilder).toString = function () {\n    return this.j2_1;\n  };\n  function uppercaseChar(_this__u8e3s4) {\n    // Inline function 'kotlin.text.uppercase' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var uppercase = toString(_this__u8e3s4).toUpperCase();\n    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);\n  }\n  function isLetterOrDigit(_this__u8e3s4) {\n    if (((_Char___init__impl__6a9atx(97) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(122) : false) ? true : _Char___init__impl__6a9atx(65) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(90) : false) ? true : _Char___init__impl__6a9atx(48) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57) : false) {\n      return true;\n    }\n    if (Char__compareTo_impl_ypi4mb(_this__u8e3s4, _Char___init__impl__6a9atx(128)) < 0) {\n      return false;\n    }\n    return isDigitImpl(_this__u8e3s4) ? true : isLetterImpl(_this__u8e3s4);\n  }\n  function isLetter(_this__u8e3s4) {\n    if ((_Char___init__impl__6a9atx(97) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(122) : false) ? true : _Char___init__impl__6a9atx(65) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(90) : false) {\n      return true;\n    }\n    if (Char__compareTo_impl_ypi4mb(_this__u8e3s4, _Char___init__impl__6a9atx(128)) < 0) {\n      return false;\n    }\n    return isLetterImpl(_this__u8e3s4);\n  }\n  function isDigit(_this__u8e3s4) {\n    if (_Char___init__impl__6a9atx(48) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57) : false) {\n      return true;\n    }\n    if (Char__compareTo_impl_ypi4mb(_this__u8e3s4, _Char___init__impl__6a9atx(128)) < 0) {\n      return false;\n    }\n    return isDigitImpl(_this__u8e3s4);\n  }\n  function isWhitespace(_this__u8e3s4) {\n    return isWhitespaceImpl(_this__u8e3s4);\n  }\n  function checkRadix(radix) {\n    if (!(2 <= radix ? radix <= 36 : false)) {\n      throw IllegalArgumentException_init_$Create$_0('radix ' + radix + ' was not in valid range 2..36');\n    }\n    return radix;\n  }\n  function toInt(_this__u8e3s4) {\n    var tmp0_elvis_lhs = toIntOrNull(_this__u8e3s4);\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      numberFormatError(_this__u8e3s4);\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    return tmp;\n  }\n  function digitOf(char, radix) {\n    // Inline function 'kotlin.let' call\n    // Inline function 'kotlin.contracts.contract' call\n    // Inline function 'kotlin.text.digitOf.<anonymous>' call\n    var it = (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(48)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(57)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48)) : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(90)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(97)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(122)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(128)) < 0 ? -1 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65313)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65338)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65313)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65345)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65370)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65345)) + 10 | 0 : digitToIntImpl(char);\n    return it >= radix ? -1 : it;\n  }\n  function repeat(_this__u8e3s4, n) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.contracts.contract' call\n    if (!(n >= 0)) {\n      // Inline function 'kotlin.text.repeat.<anonymous>' call\n      var message = \"Count 'n' must be non-negative, but was \" + n + '.';\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    var tmp;\n    switch (n) {\n      case 0:\n        tmp = '';\n        break;\n      case 1:\n        tmp = toString_1(_this__u8e3s4);\n        break;\n      default:\n        var result = '';\n        // Inline function 'kotlin.text.isEmpty' call\n\n        if (!(charSequenceLength(_this__u8e3s4) === 0)) {\n          var s = toString_1(_this__u8e3s4);\n          var count = n;\n          $l$loop: while (true) {\n            if ((count & 1) === 1) {\n              result = result + s;\n            }\n            count = count >>> 1 | 0;\n            if (count === 0) {\n              break $l$loop;\n            }\n            s = s + s;\n          }\n        }\n\n        return result;\n    }\n    return tmp;\n  }\n  function isBlank(_this__u8e3s4) {\n    var tmp;\n    if (charSequenceLength(_this__u8e3s4) === 0) {\n      tmp = true;\n    } else {\n      var tmp$ret$0;\n      $l$block_0: {\n        // Inline function 'kotlin.collections.all' call\n        var this_0 = get_indices(_this__u8e3s4);\n        var tmp_0;\n        if (isInterface(this_0, Collection)) {\n          tmp_0 = this_0.o();\n        } else {\n          tmp_0 = false;\n        }\n        if (tmp_0) {\n          tmp$ret$0 = true;\n          break $l$block_0;\n        }\n        var tmp0_iterator = this_0.k();\n        while (tmp0_iterator.l()) {\n          var element = tmp0_iterator.m();\n          // Inline function 'kotlin.text.isBlank.<anonymous>' call\n          if (!isWhitespace(charSequenceGet(_this__u8e3s4, element))) {\n            tmp$ret$0 = false;\n            break $l$block_0;\n          }\n        }\n        tmp$ret$0 = true;\n      }\n      tmp = tmp$ret$0;\n    }\n    return tmp;\n  }\n  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);\n  }\n  function printStackTrace(_this__u8e3s4) {\n    console.error(stackTraceToString(_this__u8e3s4));\n  }\n  function stackTraceToString(_this__u8e3s4) {\n    return (new ExceptionTraceBuilder()).r2(_this__u8e3s4);\n  }\n  function hasSeen($this, exception) {\n    var tmp$ret$1;\n    $l$block: {\n      // Inline function 'kotlin.collections.any' call\n      var indexedObject = $this.o2_1;\n      var inductionVariable = 0;\n      var last = indexedObject.length;\n      while (inductionVariable < last) {\n        var element = indexedObject[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'kotlin.ExceptionTraceBuilder.hasSeen.<anonymous>' call\n        if (element === exception) {\n          tmp$ret$1 = true;\n          break $l$block;\n        }\n      }\n      tmp$ret$1 = false;\n    }\n    return tmp$ret$1;\n  }\n  function dumpFullTrace(_this__u8e3s4, $this, indent, qualifier) {\n    if (dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier))\n      true;\n    else\n      return Unit_instance;\n    var cause = _this__u8e3s4.cause;\n    while (!(cause == null)) {\n      if (dumpSelfTrace(cause, $this, indent, 'Caused by: '))\n        true;\n      else\n        return Unit_instance;\n      cause = cause.cause;\n    }\n  }\n  function dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier) {\n    $this.n2_1.m2(indent).m2(qualifier);\n    var shortInfo = _this__u8e3s4.toString();\n    if (hasSeen($this, _this__u8e3s4)) {\n      $this.n2_1.m2('[CIRCULAR REFERENCE, SEE ABOVE: ').m2(shortInfo).m2(']\\n');\n      return false;\n    }\n    // Inline function 'kotlin.js.asDynamic' call\n    $this.o2_1.push(_this__u8e3s4);\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp = _this__u8e3s4.stack;\n    var stack = (tmp == null ? true : typeof tmp === 'string') ? tmp : THROW_CCE();\n    if (!(stack == null)) {\n      // Inline function 'kotlin.let' call\n      // Inline function 'kotlin.contracts.contract' call\n      // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call\n      var it = indexOf(stack, shortInfo);\n      var stackStart = it < 0 ? 0 : it + shortInfo.length | 0;\n      if (stackStart === 0) {\n        $this.n2_1.m2(shortInfo).m2('\\n');\n      }\n      // Inline function 'kotlin.text.isEmpty' call\n      var this_0 = $this.p2_1;\n      if (charSequenceLength(this_0) === 0) {\n        $this.p2_1 = stack;\n        $this.q2_1 = stackStart;\n      } else {\n        stack = dropCommonFrames($this, stack, stackStart);\n      }\n      // Inline function 'kotlin.text.isNotEmpty' call\n      if (charSequenceLength(indent) > 0) {\n        var tmp_0;\n        if (stackStart === 0) {\n          tmp_0 = 0;\n        } else {\n          // Inline function 'kotlin.text.count' call\n          var count = 0;\n          var inductionVariable = 0;\n          while (inductionVariable < charSequenceLength(shortInfo)) {\n            var element = charSequenceGet(shortInfo, inductionVariable);\n            inductionVariable = inductionVariable + 1 | 0;\n            // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call\n            if (element === _Char___init__impl__6a9atx(10)) {\n              count = count + 1 | 0;\n            }\n          }\n          tmp_0 = 1 + count | 0;\n        }\n        var messageLines = tmp_0;\n        // Inline function 'kotlin.sequences.forEachIndexed' call\n        var index = 0;\n        var tmp0_iterator = lineSequence(stack).k();\n        while (tmp0_iterator.l()) {\n          var item = tmp0_iterator.m();\n          // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call\n          var tmp1 = index;\n          index = tmp1 + 1 | 0;\n          if (checkIndexOverflow(tmp1) >= messageLines) {\n            $this.n2_1.m2(indent);\n          }\n          $this.n2_1.m2(item).m2('\\n');\n        }\n      } else {\n        $this.n2_1.m2(stack).m2('\\n');\n      }\n    } else {\n      $this.n2_1.m2(shortInfo).m2('\\n');\n    }\n    var suppressed = get_suppressedExceptions(_this__u8e3s4);\n    // Inline function 'kotlin.collections.isNotEmpty' call\n    if (!suppressed.o()) {\n      var suppressedIndent = indent + '    ';\n      var tmp0_iterator_0 = suppressed.k();\n      while (tmp0_iterator_0.l()) {\n        var s = tmp0_iterator_0.m();\n        dumpFullTrace(s, $this, suppressedIndent, 'Suppressed: ');\n      }\n    }\n    return true;\n  }\n  function dropCommonFrames($this, stack, stackStart) {\n    var commonFrames = 0;\n    var lastBreak = 0;\n    var preLastBreak = 0;\n    var inductionVariable = 0;\n    // Inline function 'kotlin.comparisons.minOf' call\n    var a = $this.p2_1.length - $this.q2_1 | 0;\n    var b = stack.length - stackStart | 0;\n    var last = Math.min(a, b);\n    if (inductionVariable < last)\n      $l$loop: do {\n        var pos = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var c = charSequenceGet(stack, get_lastIndex_1(stack) - pos | 0);\n        if (!(c === charSequenceGet($this.p2_1, get_lastIndex_1($this.p2_1) - pos | 0)))\n          break $l$loop;\n        if (c === _Char___init__impl__6a9atx(10)) {\n          commonFrames = commonFrames + 1 | 0;\n          preLastBreak = lastBreak;\n          lastBreak = pos;\n        }\n      }\n       while (inductionVariable < last);\n    if (commonFrames <= 1)\n      return stack;\n    while (preLastBreak > 0 ? charSequenceGet(stack, get_lastIndex_1(stack) - (preLastBreak - 1 | 0) | 0) === _Char___init__impl__6a9atx(32) : false)\n      preLastBreak = preLastBreak - 1 | 0;\n    return dropLast(stack, preLastBreak) + ('... and ' + (commonFrames - 1 | 0) + ' more common stack frames skipped');\n  }\n  function ExceptionTraceBuilder() {\n    this.n2_1 = StringBuilder_init_$Create$();\n    var tmp = this;\n    // Inline function 'kotlin.arrayOf' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    tmp.o2_1 = [];\n    this.p2_1 = '';\n    this.q2_1 = 0;\n  }\n  protoOf(ExceptionTraceBuilder).r2 = function (exception) {\n    dumpFullTrace(exception, this, '', '');\n    return this.n2_1.toString();\n  };\n  function get_suppressedExceptions(_this__u8e3s4) {\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp0_safe_receiver = _this__u8e3s4._suppressed;\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.js.unsafeCast' call\n      tmp = tmp0_safe_receiver;\n    }\n    var tmp1_elvis_lhs = tmp;\n    return tmp1_elvis_lhs == null ? emptyList() : tmp1_elvis_lhs;\n  }\n  function filterNotNull(_this__u8e3s4) {\n    return filterNotNullTo(_this__u8e3s4, ArrayList_init_$Create$());\n  }\n  function getOrNull(_this__u8e3s4, index) {\n    return (index >= 0 ? index <= get_lastIndex(_this__u8e3s4) : false) ? _this__u8e3s4[index] : null;\n  }\n  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {\n    separator = separator === VOID ? ', ' : separator;\n    prefix = prefix === VOID ? '' : prefix;\n    postfix = postfix === VOID ? '' : postfix;\n    limit = limit === VOID ? -1 : limit;\n    truncated = truncated === VOID ? '...' : truncated;\n    transform = transform === VOID ? null : transform;\n    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$(), separator, prefix, postfix, limit, truncated, transform).toString();\n  }\n  function filterNotNullTo(_this__u8e3s4, destination) {\n    var inductionVariable = 0;\n    var last = _this__u8e3s4.length;\n    while (inductionVariable < last) {\n      var element = _this__u8e3s4[inductionVariable];\n      inductionVariable = inductionVariable + 1 | 0;\n      if (!(element == null)) {\n        destination.h(element);\n      }\n    }\n    return destination;\n  }\n  function get_lastIndex(_this__u8e3s4) {\n    return _this__u8e3s4.length - 1 | 0;\n  }\n  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {\n    separator = separator === VOID ? ', ' : separator;\n    prefix = prefix === VOID ? '' : prefix;\n    postfix = postfix === VOID ? '' : postfix;\n    limit = limit === VOID ? -1 : limit;\n    truncated = truncated === VOID ? '...' : truncated;\n    transform = transform === VOID ? null : transform;\n    buffer.l2(prefix);\n    var count = 0;\n    var inductionVariable = 0;\n    var last = _this__u8e3s4.length;\n    $l$loop: while (inductionVariable < last) {\n      var element = _this__u8e3s4[inductionVariable];\n      inductionVariable = inductionVariable + 1 | 0;\n      count = count + 1 | 0;\n      if (count > 1) {\n        buffer.l2(separator);\n      }\n      if (limit < 0 ? true : count <= limit) {\n        appendElement(buffer, element, transform);\n      } else\n        break $l$loop;\n    }\n    if (limit >= 0 ? count > limit : false) {\n      buffer.l2(truncated);\n    }\n    buffer.l2(postfix);\n    return buffer;\n  }\n  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {\n    separator = separator === VOID ? ', ' : separator;\n    prefix = prefix === VOID ? '' : prefix;\n    postfix = postfix === VOID ? '' : postfix;\n    limit = limit === VOID ? -1 : limit;\n    truncated = truncated === VOID ? '...' : truncated;\n    transform = transform === VOID ? null : transform;\n    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$(), separator, prefix, postfix, limit, truncated, transform).toString();\n  }\n  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {\n    separator = separator === VOID ? ', ' : separator;\n    prefix = prefix === VOID ? '' : prefix;\n    postfix = postfix === VOID ? '' : postfix;\n    limit = limit === VOID ? -1 : limit;\n    truncated = truncated === VOID ? '...' : truncated;\n    transform = transform === VOID ? null : transform;\n    buffer.l2(prefix);\n    var count = 0;\n    var tmp0_iterator = _this__u8e3s4.k();\n    $l$loop: while (tmp0_iterator.l()) {\n      var element = tmp0_iterator.m();\n      count = count + 1 | 0;\n      if (count > 1) {\n        buffer.l2(separator);\n      }\n      if (limit < 0 ? true : count <= limit) {\n        appendElement(buffer, element, transform);\n      } else\n        break $l$loop;\n    }\n    if (limit >= 0 ? count > limit : false) {\n      buffer.l2(truncated);\n    }\n    buffer.l2(postfix);\n    return buffer;\n  }\n  function first(_this__u8e3s4) {\n    if (_this__u8e3s4.o())\n      throw NoSuchElementException_init_$Create$_0('List is empty.');\n    return _this__u8e3s4.s(0);\n  }\n  function single(_this__u8e3s4) {\n    var tmp;\n    switch (_this__u8e3s4.n()) {\n      case 0:\n        throw NoSuchElementException_init_$Create$_0('List is empty.');\n      case 1:\n        tmp = _this__u8e3s4.s(0);\n        break;\n      default:\n        throw IllegalArgumentException_init_$Create$_0('List has more than one element.');\n    }\n    return tmp;\n  }\n  function firstOrNull(_this__u8e3s4) {\n    return _this__u8e3s4.o() ? null : _this__u8e3s4.s(0);\n  }\n  function last(_this__u8e3s4) {\n    if (_this__u8e3s4.o())\n      throw NoSuchElementException_init_$Create$_0('List is empty.');\n    return _this__u8e3s4.s(get_lastIndex_0(_this__u8e3s4));\n  }\n  function single_0(_this__u8e3s4) {\n    if (isInterface(_this__u8e3s4, List))\n      return single(_this__u8e3s4);\n    else {\n      var iterator = _this__u8e3s4.k();\n      if (!iterator.l())\n        throw NoSuchElementException_init_$Create$_0('Collection is empty.');\n      var single_0 = iterator.m();\n      if (iterator.l())\n        throw IllegalArgumentException_init_$Create$_0('Collection has more than one element.');\n      return single_0;\n    }\n  }\n  function until(_this__u8e3s4, to) {\n    if (to <= IntCompanionObject_instance.MIN_VALUE)\n      return Companion_getInstance_3().s2_1;\n    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);\n  }\n  function coerceAtMost(_this__u8e3s4, maximumValue) {\n    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;\n  }\n  function coerceAtLeast(_this__u8e3s4, minimumValue) {\n    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;\n  }\n  function downTo(_this__u8e3s4, to) {\n    return Companion_instance_4.t2(_this__u8e3s4, to, -1);\n  }\n  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {\n    if (minimumValue > maximumValue)\n      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');\n    if (_this__u8e3s4 < minimumValue)\n      return minimumValue;\n    if (_this__u8e3s4 > maximumValue)\n      return maximumValue;\n    return _this__u8e3s4;\n  }\n  function map(_this__u8e3s4, transform) {\n    return new TransformingSequence(_this__u8e3s4, transform);\n  }\n  function drop(_this__u8e3s4, n) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.contracts.contract' call\n    if (!(n >= 0)) {\n      // Inline function 'kotlin.text.drop.<anonymous>' call\n      var message = 'Requested character count ' + n + ' is less than zero.';\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    // Inline function 'kotlin.text.substring' call\n    var startIndex = coerceAtMost(n, _this__u8e3s4.length);\n    // Inline function 'kotlin.js.asDynamic' call\n    return _this__u8e3s4.substring(startIndex);\n  }\n  function first_0(_this__u8e3s4) {\n    // Inline function 'kotlin.text.isEmpty' call\n    if (charSequenceLength(_this__u8e3s4) === 0)\n      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');\n    return charSequenceGet(_this__u8e3s4, 0);\n  }\n  function take(_this__u8e3s4, n) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.contracts.contract' call\n    if (!(n >= 0)) {\n      // Inline function 'kotlin.text.take.<anonymous>' call\n      var message = 'Requested character count ' + n + ' is less than zero.';\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    // Inline function 'kotlin.text.substring' call\n    var endIndex = coerceAtMost(n, _this__u8e3s4.length);\n    // Inline function 'kotlin.js.asDynamic' call\n    return _this__u8e3s4.substring(0, endIndex);\n  }\n  function dropLast(_this__u8e3s4, n) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.contracts.contract' call\n    if (!(n >= 0)) {\n      // Inline function 'kotlin.text.dropLast.<anonymous>' call\n      var message = 'Requested character count ' + n + ' is less than zero.';\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    return take(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.length - n | 0, 0));\n  }\n  function _Char___init__impl__6a9atx(value) {\n    return value;\n  }\n  function _get_value__a43j40($this) {\n    return $this;\n  }\n  function _Char___init__impl__6a9atx_0(code) {\n    // Inline function 'kotlin.UShort.toInt' call\n    var tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;\n    return _Char___init__impl__6a9atx(tmp$ret$0);\n  }\n  function Char__compareTo_impl_ypi4mb($this, other) {\n    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;\n  }\n  function Char__minus_impl_a2frrh($this, other) {\n    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;\n  }\n  function Char__toInt_impl_vasixd($this) {\n    return _get_value__a43j40($this);\n  }\n  function Char__hashCode_impl_otmys($this) {\n    return _get_value__a43j40($this);\n  }\n  function toString($this) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    return String.fromCharCode(_get_value__a43j40($this));\n  }\n  function Companion_0() {\n    Companion_instance_0 = this;\n    this.u2_1 = _Char___init__impl__6a9atx(0);\n    this.v2_1 = _Char___init__impl__6a9atx(65535);\n    this.w2_1 = _Char___init__impl__6a9atx(55296);\n    this.x2_1 = _Char___init__impl__6a9atx(56319);\n    this.y2_1 = _Char___init__impl__6a9atx(56320);\n    this.z2_1 = _Char___init__impl__6a9atx(57343);\n    this.a3_1 = _Char___init__impl__6a9atx(55296);\n    this.b3_1 = _Char___init__impl__6a9atx(57343);\n    this.c3_1 = 2;\n    this.d3_1 = 16;\n  }\n  var Companion_instance_0;\n  function Companion_getInstance_0() {\n    if (Companion_instance_0 == null)\n      new Companion_0();\n    return Companion_instance_0;\n  }\n  function Char() {\n  }\n  function List() {\n  }\n  function Collection() {\n  }\n  function toString_0(_this__u8e3s4) {\n    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : toString_1(_this__u8e3s4);\n    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;\n  }\n  function implement(interfaces) {\n    var maxSize = 1;\n    var masks = [];\n    var inductionVariable = 0;\n    var last = interfaces.length;\n    while (inductionVariable < last) {\n      var i = interfaces[inductionVariable];\n      inductionVariable = inductionVariable + 1 | 0;\n      var currentSize = maxSize;\n      var tmp1_elvis_lhs = i.prototype.$imask$;\n      var imask = tmp1_elvis_lhs == null ? i.$imask$ : tmp1_elvis_lhs;\n      if (!(imask == null)) {\n        masks.push(imask);\n        currentSize = imask.length;\n      }\n      var iid = i.$metadata$.iid;\n      var tmp;\n      if (iid == null) {\n        tmp = null;\n      } else {\n        // Inline function 'kotlin.let' call\n        // Inline function 'kotlin.contracts.contract' call\n        // Inline function 'kotlin.js.implement.<anonymous>' call\n        tmp = bitMaskWith(iid);\n      }\n      var iidImask = tmp;\n      if (!(iidImask == null)) {\n        masks.push(iidImask);\n        currentSize = Math.max(currentSize, iidImask.length);\n      }\n      if (currentSize > maxSize) {\n        maxSize = currentSize;\n      }\n    }\n    return compositeBitMask(maxSize, masks);\n  }\n  function bitMaskWith(activeBit) {\n    var numberIndex = activeBit >> 5;\n    var intArray = new Int32Array(numberIndex + 1 | 0);\n    var positionInNumber = activeBit & 31;\n    var numberWithSettledBit = 1 << positionInNumber;\n    intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit;\n    return intArray;\n  }\n  function compositeBitMask(capacity, masks) {\n    var tmp = 0;\n    var tmp_0 = new Int32Array(capacity);\n    while (tmp < capacity) {\n      var tmp_1 = tmp;\n      var result = 0;\n      var inductionVariable = 0;\n      var last = masks.length;\n      while (inductionVariable < last) {\n        var mask = masks[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        if (tmp_1 < mask.length) {\n          result = result | mask[tmp_1];\n        }\n      }\n      tmp_0[tmp_1] = result;\n      tmp = tmp + 1 | 0;\n    }\n    return tmp_0;\n  }\n  function isBitSet(_this__u8e3s4, possibleActiveBit) {\n    var numberIndex = possibleActiveBit >> 5;\n    if (numberIndex > _this__u8e3s4.length)\n      return false;\n    var positionInNumber = possibleActiveBit & 31;\n    var numberWithSettledBit = 1 << positionInNumber;\n    return !((_this__u8e3s4[numberIndex] & numberWithSettledBit) === 0);\n  }\n  function fillArrayVal(array, initValue) {\n    var inductionVariable = 0;\n    var last = array.length - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        array[i] = initValue;\n      }\n       while (!(i === last));\n    return array;\n  }\n  function arrayIterator(array) {\n    return new arrayIterator$1(array);\n  }\n  function arrayIterator$1($array) {\n    this.f3_1 = $array;\n    this.e3_1 = 0;\n  }\n  protoOf(arrayIterator$1).l = function () {\n    return !(this.e3_1 === this.f3_1.length);\n  };\n  protoOf(arrayIterator$1).m = function () {\n    var tmp;\n    if (!(this.e3_1 === this.f3_1.length)) {\n      var tmp1 = this.e3_1;\n      this.e3_1 = tmp1 + 1 | 0;\n      tmp = this.f3_1[tmp1];\n    } else {\n      throw NoSuchElementException_init_$Create$_0('' + this.e3_1);\n    }\n    return tmp;\n  };\n  function get_buf() {\n    _init_properties_bitUtils_kt__nfcg4k();\n    return buf;\n  }\n  var buf;\n  function get_bufFloat64() {\n    _init_properties_bitUtils_kt__nfcg4k();\n    return bufFloat64;\n  }\n  var bufFloat64;\n  var bufFloat32;\n  function get_bufInt32() {\n    _init_properties_bitUtils_kt__nfcg4k();\n    return bufInt32;\n  }\n  var bufInt32;\n  function get_lowIndex() {\n    _init_properties_bitUtils_kt__nfcg4k();\n    return lowIndex;\n  }\n  var lowIndex;\n  function get_highIndex() {\n    _init_properties_bitUtils_kt__nfcg4k();\n    return highIndex;\n  }\n  var highIndex;\n  function getNumberHashCode(obj) {\n    _init_properties_bitUtils_kt__nfcg4k();\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.jsBitwiseOr' call\n    // Inline function 'kotlin.js.asDynamic' call\n    if ((obj | 0) === obj) {\n      return numberToInt(obj);\n    }\n    get_bufFloat64()[0] = obj;\n    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;\n  }\n  var properties_initialized_bitUtils_kt_i2bo3e;\n  function _init_properties_bitUtils_kt__nfcg4k() {\n    if (!properties_initialized_bitUtils_kt_i2bo3e) {\n      properties_initialized_bitUtils_kt_i2bo3e = true;\n      buf = new ArrayBuffer(8);\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      bufFloat64 = new Float64Array(get_buf());\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      bufFloat32 = new Float32Array(get_buf());\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      bufInt32 = new Int32Array(get_buf());\n      // Inline function 'kotlin.run' call\n      // Inline function 'kotlin.contracts.contract' call\n      // Inline function 'kotlin.js.lowIndex.<anonymous>' call\n      get_bufFloat64()[0] = -1.0;\n      lowIndex = !(get_bufInt32()[0] === 0) ? 1 : 0;\n      highIndex = 1 - get_lowIndex() | 0;\n    }\n  }\n  function charSequenceGet(a, index) {\n    var tmp;\n    if (isString(a)) {\n      // Inline function 'kotlin.Char' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var code = a.charCodeAt(index);\n      var tmp_0;\n      // Inline function 'kotlin.code' call\n      Companion_getInstance_0();\n      var this_0 = _Char___init__impl__6a9atx(0);\n      if (code < Char__toInt_impl_vasixd(this_0)) {\n        tmp_0 = true;\n      } else {\n        // Inline function 'kotlin.code' call\n        Companion_getInstance_0();\n        var this_1 = _Char___init__impl__6a9atx(65535);\n        tmp_0 = code > Char__toInt_impl_vasixd(this_1);\n      }\n      if (tmp_0) {\n        throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + code);\n      }\n      tmp = numberToChar(code);\n    } else {\n      tmp = a.b(index);\n    }\n    return tmp;\n  }\n  function isString(a) {\n    return typeof a === 'string';\n  }\n  function charSequenceLength(a) {\n    var tmp;\n    if (isString(a)) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = a.length;\n    } else {\n      tmp = a.a();\n    }\n    return tmp;\n  }\n  function charSequenceSubSequence(a, startIndex, endIndex) {\n    var tmp;\n    if (isString(a)) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = a.substring(startIndex, endIndex);\n    } else {\n      tmp = a.c(startIndex, endIndex);\n    }\n    return tmp;\n  }\n  function contentEqualsInternal(_this__u8e3s4, other) {\n    // Inline function 'kotlin.js.asDynamic' call\n    var a = _this__u8e3s4;\n    // Inline function 'kotlin.js.asDynamic' call\n    var b = other;\n    if (a === b)\n      return true;\n    if (((a == null ? true : b == null) ? true : !isArrayish(b)) ? true : a.length != b.length)\n      return false;\n    var inductionVariable = 0;\n    var last = a.length;\n    if (inductionVariable < last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n       while (inductionVariable < last);\n    return true;\n  }\n  function contentHashCodeInternal(_this__u8e3s4) {\n    // Inline function 'kotlin.js.asDynamic' call\n    var a = _this__u8e3s4;\n    if (a == null)\n      return 0;\n    var result = 1;\n    var inductionVariable = 0;\n    var last = a.length;\n    if (inductionVariable < last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        result = imul(result, 31) + hashCode(a[i]) | 0;\n      }\n       while (inductionVariable < last);\n    return result;\n  }\n  function arrayToString(array) {\n    return joinToString(array, ', ', '[', ']', VOID, VOID, arrayToString$lambda);\n  }\n  function arrayToString$lambda(it) {\n    return toString_1(it);\n  }\n  function getObjectHashCode(obj) {\n    // Inline function 'kotlin.js.jsIn' call\n    if (!('kotlinHashCodeValue$' in obj)) {\n      var hash = calculateRandomHash();\n      var descriptor = new Object();\n      descriptor.value = hash;\n      descriptor.enumerable = false;\n      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);\n    }\n    // Inline function 'kotlin.js.unsafeCast' call\n    return obj['kotlinHashCodeValue$'];\n  }\n  function calculateRandomHash() {\n    // Inline function 'kotlin.js.jsBitwiseOr' call\n    return Math.random() * 4.294967296E9 | 0;\n  }\n  function equals(obj1, obj2) {\n    if (obj1 == null) {\n      return obj2 == null;\n    }\n    if (obj2 == null) {\n      return false;\n    }\n    if (typeof obj1 === 'object' ? typeof obj1.equals === 'function' : false) {\n      return obj1.equals(obj2);\n    }\n    if (obj1 !== obj1) {\n      return obj2 !== obj2;\n    }\n    if (typeof obj1 === 'number' ? typeof obj2 === 'number' : false) {\n      var tmp;\n      if (obj1 === obj2) {\n        var tmp_0;\n        if (obj1 !== 0) {\n          tmp_0 = true;\n        } else {\n          // Inline function 'kotlin.js.asDynamic' call\n          var tmp_1 = 1 / obj1;\n          // Inline function 'kotlin.js.asDynamic' call\n          tmp_0 = tmp_1 === 1 / obj2;\n        }\n        tmp = tmp_0;\n      } else {\n        tmp = false;\n      }\n      return tmp;\n    }\n    return obj1 === obj2;\n  }\n  function hashCode(obj) {\n    if (obj == null)\n      return 0;\n    var typeOf = typeof obj;\n    var tmp;\n    switch (typeOf) {\n      case 'object':\n        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n        break;\n      case 'function':\n        tmp = getObjectHashCode(obj);\n        break;\n      case 'number':\n        tmp = getNumberHashCode(obj);\n        break;\n      case 'boolean':\n        // Inline function 'kotlin.js.unsafeCast' call\n\n        tmp = getBooleanHashCode(obj);\n        break;\n      case 'string':\n        tmp = getStringHashCode(String(obj));\n        break;\n      case 'bigint':\n        tmp = getBigIntHashCode(obj);\n        break;\n      case 'symbol':\n        tmp = getSymbolHashCode(obj);\n        break;\n      default:\n        tmp = function () {\n          throw new Error('Unexpected typeof `' + typeOf + '`');\n        }();\n        break;\n    }\n    return tmp;\n  }\n  function toString_1(o) {\n    var tmp;\n    if (o == null) {\n      tmp = 'null';\n    } else if (isArrayish(o)) {\n      tmp = '[...]';\n    } else if (!(typeof o.toString === 'function')) {\n      tmp = anyToString(o);\n    } else {\n      // Inline function 'kotlin.js.unsafeCast' call\n      tmp = o.toString();\n    }\n    return tmp;\n  }\n  function getBooleanHashCode(value) {\n    return value ? 1231 : 1237;\n  }\n  function getStringHashCode(str) {\n    var hash = 0;\n    var length = str.length;\n    var inductionVariable = 0;\n    var last = length - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'kotlin.js.asDynamic' call\n        var code = str.charCodeAt(i);\n        hash = imul(hash, 31) + code | 0;\n      }\n       while (!(i === last));\n    return hash;\n  }\n  function getBigIntHashCode(value) {\n    var shiftNumber = BigInt(32);\n    var MASK = BigInt(4.294967295E9);\n    var bigNumber = value < 0 ? -value : value;\n    var hashCode = 0;\n    var signum = value < 0 ? -1 : 1;\n    while (bigNumber != 0) {\n      // Inline function 'kotlin.js.unsafeCast' call\n      var chunk = Number(bigNumber & MASK);\n      hashCode = imul(31, hashCode) + chunk | 0;\n      bigNumber = bigNumber >> shiftNumber;\n    }\n    return imul(hashCode, signum);\n  }\n  function getSymbolHashCode(value) {\n    var hashCodeMap = symbolIsSharable(value) ? getSymbolMap() : getSymbolWeakMap();\n    var cachedHashCode = hashCodeMap.get(value);\n    if (cachedHashCode !== VOID)\n      return cachedHashCode;\n    var hash = calculateRandomHash();\n    hashCodeMap.set(value, hash);\n    return hash;\n  }\n  function anyToString(o) {\n    return Object.prototype.toString.call(o);\n  }\n  function symbolIsSharable(symbol) {\n    return Symbol.keyFor(symbol) != VOID;\n  }\n  function getSymbolMap() {\n    if (symbolMap === VOID) {\n      symbolMap = new Map();\n    }\n    return symbolMap;\n  }\n  function getSymbolWeakMap() {\n    if (symbolWeakMap === VOID) {\n      symbolWeakMap = new WeakMap();\n    }\n    return symbolWeakMap;\n  }\n  var symbolMap;\n  var symbolWeakMap;\n  function unboxIntrinsic(x) {\n    var message = 'Should be lowered';\n    throw IllegalStateException_init_$Create$_0(toString_1(message));\n  }\n  function captureStack(instance, constructorFunction) {\n    if (Error.captureStackTrace != null) {\n      Error.captureStackTrace(instance, constructorFunction);\n    } else {\n      // Inline function 'kotlin.js.asDynamic' call\n      instance.stack = (new Error()).stack;\n    }\n  }\n  function protoOf(constructor) {\n    return constructor.prototype;\n  }\n  function defineProp(obj, name, getter, setter) {\n    return Object.defineProperty(obj, name, {configurable: true, get: getter, set: setter});\n  }\n  function objectCreate(proto) {\n    return Object.create(proto);\n  }\n  function extendThrowable(this_, message, cause) {\n    Error.call(this_);\n    setPropertiesToThrowableInstance(this_, message, cause);\n  }\n  function setPropertiesToThrowableInstance(this_, message, cause) {\n    var errorInfo = calculateErrorInfo(Object.getPrototypeOf(this_));\n    if ((errorInfo & 1) === 0) {\n      var tmp;\n      if (message == null) {\n        var tmp_0;\n        if (!(message === null)) {\n          var tmp1_elvis_lhs = cause == null ? null : cause.toString();\n          tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;\n        } else {\n          tmp_0 = VOID;\n        }\n        tmp = tmp_0;\n      } else {\n        tmp = message;\n      }\n      this_.message = tmp;\n    }\n    if ((errorInfo & 2) === 0) {\n      this_.cause = cause;\n    }\n    this_.name = Object.getPrototypeOf(this_).constructor.name;\n  }\n  function ensureNotNull(v) {\n    var tmp;\n    if (v == null) {\n      THROW_NPE();\n    } else {\n      tmp = v;\n    }\n    return tmp;\n  }\n  function THROW_NPE() {\n    throw NullPointerException_init_$Create$();\n  }\n  function noWhenBranchMatchedException() {\n    throw NoWhenBranchMatchedException_init_$Create$();\n  }\n  function THROW_CCE() {\n    throw ClassCastException_init_$Create$();\n  }\n  function lazy(initializer) {\n    return new UnsafeLazyImpl(initializer);\n  }\n  function Companion_1() {\n    Companion_instance_1 = this;\n    this.g3_1 = new Long(0, -2147483648);\n    this.h3_1 = new Long(-1, 2147483647);\n    this.i3_1 = 8;\n    this.j3_1 = 64;\n  }\n  var Companion_instance_1;\n  function Companion_getInstance_1() {\n    if (Companion_instance_1 == null)\n      new Companion_1();\n    return Companion_instance_1;\n  }\n  function Long(low, high) {\n    Companion_getInstance_1();\n    Number_0.call(this);\n    this.k3_1 = low;\n    this.l3_1 = high;\n  }\n  protoOf(Long).m3 = function (other) {\n    return add(this, other);\n  };\n  protoOf(Long).n3 = function (other) {\n    return divide(this, other);\n  };\n  protoOf(Long).o3 = function () {\n    return this.p3().m3(new Long(1, 0));\n  };\n  protoOf(Long).p3 = function () {\n    return new Long(~this.k3_1, ~this.l3_1);\n  };\n  protoOf(Long).q3 = function () {\n    return this.k3_1;\n  };\n  protoOf(Long).r3 = function () {\n    return toNumber(this);\n  };\n  protoOf(Long).valueOf = function () {\n    return this.r3();\n  };\n  protoOf(Long).equals = function (other) {\n    var tmp;\n    if (other instanceof Long) {\n      tmp = equalsLong(this, other);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(Long).hashCode = function () {\n    return hashCode_0(this);\n  };\n  protoOf(Long).toString = function () {\n    return toStringImpl(this, 10);\n  };\n  function get_ZERO() {\n    _init_properties_longjs_kt__tqrzid();\n    return ZERO;\n  }\n  var ZERO;\n  function get_ONE() {\n    _init_properties_longjs_kt__tqrzid();\n    return ONE;\n  }\n  var ONE;\n  function get_NEG_ONE() {\n    _init_properties_longjs_kt__tqrzid();\n    return NEG_ONE;\n  }\n  var NEG_ONE;\n  function get_MAX_VALUE() {\n    _init_properties_longjs_kt__tqrzid();\n    return MAX_VALUE;\n  }\n  var MAX_VALUE;\n  function get_MIN_VALUE() {\n    _init_properties_longjs_kt__tqrzid();\n    return MIN_VALUE;\n  }\n  var MIN_VALUE;\n  function get_TWO_PWR_24_() {\n    _init_properties_longjs_kt__tqrzid();\n    return TWO_PWR_24_;\n  }\n  var TWO_PWR_24_;\n  function compare(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    if (equalsLong(_this__u8e3s4, other)) {\n      return 0;\n    }\n    var thisNeg = isNegative(_this__u8e3s4);\n    var otherNeg = isNegative(other);\n    return (thisNeg ? !otherNeg : false) ? -1 : (!thisNeg ? otherNeg : false) ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;\n  }\n  function add(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    var a48 = _this__u8e3s4.l3_1 >>> 16 | 0;\n    var a32 = _this__u8e3s4.l3_1 & 65535;\n    var a16 = _this__u8e3s4.k3_1 >>> 16 | 0;\n    var a00 = _this__u8e3s4.k3_1 & 65535;\n    var b48 = other.l3_1 >>> 16 | 0;\n    var b32 = other.l3_1 & 65535;\n    var b16 = other.k3_1 >>> 16 | 0;\n    var b00 = other.k3_1 & 65535;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 = c00 + (a00 + b00 | 0) | 0;\n    c16 = c16 + (c00 >>> 16 | 0) | 0;\n    c00 = c00 & 65535;\n    c16 = c16 + (a16 + b16 | 0) | 0;\n    c32 = c32 + (c16 >>> 16 | 0) | 0;\n    c16 = c16 & 65535;\n    c32 = c32 + (a32 + b32 | 0) | 0;\n    c48 = c48 + (c32 >>> 16 | 0) | 0;\n    c32 = c32 & 65535;\n    c48 = c48 + (a48 + b48 | 0) | 0;\n    c48 = c48 & 65535;\n    return new Long(c16 << 16 | c00, c48 << 16 | c32);\n  }\n  function subtract(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    return add(_this__u8e3s4, other.o3());\n  }\n  function multiply(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    if (isZero(_this__u8e3s4)) {\n      return get_ZERO();\n    } else if (isZero(other)) {\n      return get_ZERO();\n    }\n    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {\n      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();\n    } else if (equalsLong(other, get_MIN_VALUE())) {\n      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();\n    }\n    if (isNegative(_this__u8e3s4)) {\n      var tmp;\n      if (isNegative(other)) {\n        tmp = multiply(negate(_this__u8e3s4), negate(other));\n      } else {\n        tmp = negate(multiply(negate(_this__u8e3s4), other));\n      }\n      return tmp;\n    } else if (isNegative(other)) {\n      return negate(multiply(_this__u8e3s4, negate(other)));\n    }\n    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) ? lessThan(other, get_TWO_PWR_24_()) : false) {\n      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));\n    }\n    var a48 = _this__u8e3s4.l3_1 >>> 16 | 0;\n    var a32 = _this__u8e3s4.l3_1 & 65535;\n    var a16 = _this__u8e3s4.k3_1 >>> 16 | 0;\n    var a00 = _this__u8e3s4.k3_1 & 65535;\n    var b48 = other.l3_1 >>> 16 | 0;\n    var b32 = other.l3_1 & 65535;\n    var b16 = other.k3_1 >>> 16 | 0;\n    var b00 = other.k3_1 & 65535;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 = c00 + imul(a00, b00) | 0;\n    c16 = c16 + (c00 >>> 16 | 0) | 0;\n    c00 = c00 & 65535;\n    c16 = c16 + imul(a16, b00) | 0;\n    c32 = c32 + (c16 >>> 16 | 0) | 0;\n    c16 = c16 & 65535;\n    c16 = c16 + imul(a00, b16) | 0;\n    c32 = c32 + (c16 >>> 16 | 0) | 0;\n    c16 = c16 & 65535;\n    c32 = c32 + imul(a32, b00) | 0;\n    c48 = c48 + (c32 >>> 16 | 0) | 0;\n    c32 = c32 & 65535;\n    c32 = c32 + imul(a16, b16) | 0;\n    c48 = c48 + (c32 >>> 16 | 0) | 0;\n    c32 = c32 & 65535;\n    c32 = c32 + imul(a00, b32) | 0;\n    c48 = c48 + (c32 >>> 16 | 0) | 0;\n    c32 = c32 & 65535;\n    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;\n    c48 = c48 & 65535;\n    return new Long(c16 << 16 | c00, c48 << 16 | c32);\n  }\n  function divide(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    if (isZero(other)) {\n      throw Exception_init_$Create$_0('division by zero');\n    } else if (isZero(_this__u8e3s4)) {\n      return get_ZERO();\n    }\n    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {\n      if (equalsLong(other, get_ONE()) ? true : equalsLong(other, get_NEG_ONE())) {\n        return get_MIN_VALUE();\n      } else if (equalsLong(other, get_MIN_VALUE())) {\n        return get_ONE();\n      } else {\n        var halfThis = shiftRight(_this__u8e3s4, 1);\n        var approx = shiftLeft(halfThis.n3(other), 1);\n        if (equalsLong(approx, get_ZERO())) {\n          return isNegative(other) ? get_ONE() : get_NEG_ONE();\n        } else {\n          var rem = subtract(_this__u8e3s4, multiply(other, approx));\n          return add(approx, rem.n3(other));\n        }\n      }\n    } else if (equalsLong(other, get_MIN_VALUE())) {\n      return get_ZERO();\n    }\n    if (isNegative(_this__u8e3s4)) {\n      var tmp;\n      if (isNegative(other)) {\n        tmp = negate(_this__u8e3s4).n3(negate(other));\n      } else {\n        tmp = negate(negate(_this__u8e3s4).n3(other));\n      }\n      return tmp;\n    } else if (isNegative(other)) {\n      return negate(_this__u8e3s4.n3(negate(other)));\n    }\n    var res = get_ZERO();\n    var rem_0 = _this__u8e3s4;\n    while (greaterThanOrEqual(rem_0, other)) {\n      var approxDouble = toNumber(rem_0) / toNumber(other);\n      var approx2 = Math.max(1.0, Math.floor(approxDouble));\n      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);\n      var delta = log2 <= 48.0 ? 1.0 : Math.pow(2.0, log2 - 48);\n      var approxRes = fromNumber(approx2);\n      var approxRem = multiply(approxRes, other);\n      while (isNegative(approxRem) ? true : greaterThan(approxRem, rem_0)) {\n        approx2 = approx2 - delta;\n        approxRes = fromNumber(approx2);\n        approxRem = multiply(approxRes, other);\n      }\n      if (isZero(approxRes)) {\n        approxRes = get_ONE();\n      }\n      res = add(res, approxRes);\n      rem_0 = subtract(rem_0, approxRem);\n    }\n    return res;\n  }\n  function shiftLeft(_this__u8e3s4, numBits) {\n    _init_properties_longjs_kt__tqrzid();\n    var numBits_0 = numBits & 63;\n    if (numBits_0 === 0) {\n      return _this__u8e3s4;\n    } else {\n      if (numBits_0 < 32) {\n        return new Long(_this__u8e3s4.k3_1 << numBits_0, _this__u8e3s4.l3_1 << numBits_0 | (_this__u8e3s4.k3_1 >>> (32 - numBits_0 | 0) | 0));\n      } else {\n        return new Long(0, _this__u8e3s4.k3_1 << (numBits_0 - 32 | 0));\n      }\n    }\n  }\n  function shiftRight(_this__u8e3s4, numBits) {\n    _init_properties_longjs_kt__tqrzid();\n    var numBits_0 = numBits & 63;\n    if (numBits_0 === 0) {\n      return _this__u8e3s4;\n    } else {\n      if (numBits_0 < 32) {\n        return new Long(_this__u8e3s4.k3_1 >>> numBits_0 | 0 | _this__u8e3s4.l3_1 << (32 - numBits_0 | 0), _this__u8e3s4.l3_1 >> numBits_0);\n      } else {\n        return new Long(_this__u8e3s4.l3_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.l3_1 >= 0 ? 0 : -1);\n      }\n    }\n  }\n  function toNumber(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.l3_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);\n  }\n  function equalsLong(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.l3_1 === other.l3_1 ? _this__u8e3s4.k3_1 === other.k3_1 : false;\n  }\n  function hashCode_0(l) {\n    _init_properties_longjs_kt__tqrzid();\n    return l.k3_1 ^ l.l3_1;\n  }\n  function toStringImpl(_this__u8e3s4, radix) {\n    _init_properties_longjs_kt__tqrzid();\n    if (radix < 2 ? true : 36 < radix) {\n      throw Exception_init_$Create$_0('radix out of range: ' + radix);\n    }\n    if (isZero(_this__u8e3s4)) {\n      return '0';\n    }\n    if (isNegative(_this__u8e3s4)) {\n      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {\n        var radixLong = fromInt(radix);\n        var div = _this__u8e3s4.n3(radixLong);\n        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).q3();\n        var tmp = toStringImpl(div, radix);\n        // Inline function 'kotlin.js.unsafeCast' call\n        // Inline function 'kotlin.js.asDynamic' call\n        return tmp + rem.toString(radix);\n      } else {\n        return '-' + toStringImpl(negate(_this__u8e3s4), radix);\n      }\n    }\n    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;\n    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));\n    var rem_0 = _this__u8e3s4;\n    var result = '';\n    while (true) {\n      var remDiv = rem_0.n3(radixToPower);\n      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).q3();\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var digits = intval.toString(radix);\n      rem_0 = remDiv;\n      if (isZero(rem_0)) {\n        return digits + result;\n      } else {\n        while (digits.length < digitsPerTime) {\n          digits = '0' + digits;\n        }\n        result = digits + result;\n      }\n    }\n  }\n  function fromInt(value) {\n    _init_properties_longjs_kt__tqrzid();\n    return new Long(value, value < 0 ? -1 : 0);\n  }\n  function isNegative(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.l3_1 < 0;\n  }\n  function isZero(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.l3_1 === 0 ? _this__u8e3s4.k3_1 === 0 : false;\n  }\n  function isOdd(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return (_this__u8e3s4.k3_1 & 1) === 1;\n  }\n  function negate(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.o3();\n  }\n  function lessThan(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    return compare(_this__u8e3s4, other) < 0;\n  }\n  function fromNumber(value) {\n    _init_properties_longjs_kt__tqrzid();\n    if (isNaN_0(value)) {\n      return get_ZERO();\n    } else if (value <= -9.223372036854776E18) {\n      return get_MIN_VALUE();\n    } else if (value + 1 >= 9.223372036854776E18) {\n      return get_MAX_VALUE();\n    } else if (value < 0.0) {\n      return negate(fromNumber(-value));\n    } else {\n      var twoPwr32 = 4.294967296E9;\n      // Inline function 'kotlin.js.jsBitwiseOr' call\n      var tmp = value % twoPwr32 | 0;\n      // Inline function 'kotlin.js.jsBitwiseOr' call\n      var tmp$ret$1 = value / twoPwr32 | 0;\n      return new Long(tmp, tmp$ret$1);\n    }\n  }\n  function greaterThan(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    return compare(_this__u8e3s4, other) > 0;\n  }\n  function greaterThanOrEqual(_this__u8e3s4, other) {\n    _init_properties_longjs_kt__tqrzid();\n    return compare(_this__u8e3s4, other) >= 0;\n  }\n  function getLowBitsUnsigned(_this__u8e3s4) {\n    _init_properties_longjs_kt__tqrzid();\n    return _this__u8e3s4.k3_1 >= 0 ? _this__u8e3s4.k3_1 : 4.294967296E9 + _this__u8e3s4.k3_1;\n  }\n  var properties_initialized_longjs_kt_5aju7t;\n  function _init_properties_longjs_kt__tqrzid() {\n    if (!properties_initialized_longjs_kt_5aju7t) {\n      properties_initialized_longjs_kt_5aju7t = true;\n      ZERO = fromInt(0);\n      ONE = fromInt(1);\n      NEG_ONE = fromInt(-1);\n      MAX_VALUE = new Long(-1, 2147483647);\n      MIN_VALUE = new Long(0, -2147483648);\n      TWO_PWR_24_ = fromInt(16777216);\n    }\n  }\n  function classMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {\n    return createMetadata('class', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, null);\n  }\n  function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, iid) {\n    var undef = VOID;\n    return {kind: kind, simpleName: name, associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, $kClass$: undef, defaultConstructor: defaultConstructor, iid: iid};\n  }\n  function setMetadataFor(ctor, name, metadataConstructor, parent, interfaces, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {\n    if (!(parent == null)) {\n      ctor.prototype = Object.create(parent.prototype);\n      ctor.prototype.constructor = ctor;\n    }\n    var metadata = metadataConstructor(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity == null ? [] : suspendArity);\n    ctor.$metadata$ = metadata;\n    if (!(interfaces == null)) {\n      var receiver = !(metadata.iid == null) ? ctor : ctor.prototype;\n      receiver.$imask$ = implement(interfaces);\n    }\n  }\n  function interfaceMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {\n    return createMetadata('interface', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, generateInterfaceId());\n  }\n  function generateInterfaceId() {\n    if (iid === VOID) {\n      iid = 0;\n    }\n    // Inline function 'kotlin.js.unsafeCast' call\n    iid = iid + 1 | 0;\n    // Inline function 'kotlin.js.unsafeCast' call\n    return iid;\n  }\n  var iid;\n  function objectMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {\n    return createMetadata('object', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, null);\n  }\n  function arrayConcat(args) {\n    var len = args.length;\n    // Inline function 'kotlin.js.unsafeCast' call\n    var typed = Array(len);\n    var inductionVariable = 0;\n    var last = len - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var arr = args[i];\n        if (!(!(arr == null) ? isArray(arr) : false)) {\n          typed[i] = [].slice.call(arr);\n        } else {\n          typed[i] = arr;\n        }\n      }\n       while (!(i === last));\n    return [].concat.apply([], typed);\n  }\n  function numberToInt(a) {\n    var tmp;\n    if (a instanceof Long) {\n      tmp = a.q3();\n    } else {\n      tmp = doubleToInt(a);\n    }\n    return tmp;\n  }\n  function doubleToInt(a) {\n    var tmp;\n    if (a > 2.147483647E9) {\n      tmp = 2147483647;\n    } else if (a < -2.147483648E9) {\n      tmp = -2147483648;\n    } else {\n      // Inline function 'kotlin.js.jsBitwiseOr' call\n      tmp = a | 0;\n    }\n    return tmp;\n  }\n  function toShort(a) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    return a << 16 >> 16;\n  }\n  function numberToChar(a) {\n    // Inline function 'kotlin.toUShort' call\n    var this_0 = numberToInt(a);\n    var tmp$ret$0 = _UShort___init__impl__jigrne(toShort(this_0));\n    return _Char___init__impl__6a9atx_0(tmp$ret$0);\n  }\n  function numberRangeToNumber(start, endInclusive) {\n    return new IntRange(start, endInclusive);\n  }\n  function get_propertyRefClassMetadataCache() {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    return propertyRefClassMetadataCache;\n  }\n  var propertyRefClassMetadataCache;\n  function metadataObject() {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    return classMeta(VOID, VOID, VOID, VOID, VOID);\n  }\n  function getPropertyCallableRef(name, paramCount, superType, getter, setter) {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    // Inline function 'kotlin.js.unsafeCast' call\n    return getPropertyRefClass(getter, getKPropMetadata(paramCount, setter), getInterfaceMaskFor(getter, superType));\n  }\n  function getPropertyRefClass(obj, metadata, imask) {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    obj.$metadata$ = metadata;\n    obj.constructor = obj;\n    obj.$imask$ = imask;\n    return obj;\n  }\n  function getKPropMetadata(paramCount, setter) {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    return get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];\n  }\n  function getInterfaceMaskFor(obj, superType) {\n    _init_properties_reflectRuntime_kt__5r4uu3();\n    var tmp0_elvis_lhs = obj.$imask$;\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      // Inline function 'kotlin.arrayOf' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp$ret$2 = [superType];\n      tmp = implement(tmp$ret$2);\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    return tmp;\n  }\n  var properties_initialized_reflectRuntime_kt_inkhwd;\n  function _init_properties_reflectRuntime_kt__5r4uu3() {\n    if (!properties_initialized_reflectRuntime_kt_inkhwd) {\n      properties_initialized_reflectRuntime_kt_inkhwd = true;\n      // Inline function 'kotlin.arrayOf' call\n      // Inline function 'kotlin.arrayOf' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp = [metadataObject(), metadataObject()];\n      // Inline function 'kotlin.arrayOf' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp_0 = [metadataObject(), metadataObject()];\n      // Inline function 'kotlin.arrayOf' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      propertyRefClassMetadataCache = [tmp, tmp_0, [metadataObject(), metadataObject()]];\n    }\n  }\n  function isArrayish(o) {\n    return isJsArray(o) ? true : isView(o);\n  }\n  function isJsArray(obj) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    return Array.isArray(obj);\n  }\n  function isInterface(obj, iface) {\n    return isInterfaceImpl(obj, iface.$metadata$.iid);\n  }\n  function isInterfaceImpl(obj, iface) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    var tmp0_elvis_lhs = obj.$imask$;\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      return false;\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    var mask = tmp;\n    return isBitSet(mask, iface);\n  }\n  function isArray(obj) {\n    var tmp;\n    if (isJsArray(obj)) {\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = !obj.$type$;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  }\n  function isNumber(a) {\n    var tmp;\n    if (typeof a === 'number') {\n      tmp = true;\n    } else {\n      tmp = a instanceof Long;\n    }\n    return tmp;\n  }\n  function isCharSequence(value) {\n    return typeof value === 'string' ? true : isInterface(value, CharSequence);\n  }\n  function isBooleanArray(a) {\n    return isJsArray(a) ? a.$type$ === 'BooleanArray' : false;\n  }\n  function isByteArray(a) {\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    return a instanceof Int8Array;\n  }\n  function isShortArray(a) {\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    return a instanceof Int16Array;\n  }\n  function isCharArray(a) {\n    var tmp;\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    if (a instanceof Uint16Array) {\n      tmp = a.$type$ === 'CharArray';\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  }\n  function isIntArray(a) {\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    return a instanceof Int32Array;\n  }\n  function isFloatArray(a) {\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    return a instanceof Float32Array;\n  }\n  function isLongArray(a) {\n    return isJsArray(a) ? a.$type$ === 'LongArray' : false;\n  }\n  function isDoubleArray(a) {\n    // Inline function 'kotlin.js.jsInstanceOf' call\n    return a instanceof Float64Array;\n  }\n  function calculateErrorInfo(proto) {\n    var tmp0_safe_receiver = proto.constructor;\n    var metadata = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.$metadata$;\n    var tmp2_safe_receiver = metadata == null ? null : metadata.errorInfo;\n    if (tmp2_safe_receiver == null)\n      null;\n    else {\n      // Inline function 'kotlin.let' call\n      // Inline function 'kotlin.contracts.contract' call\n      return tmp2_safe_receiver;\n    }\n    var result = 0;\n    if (hasProp(proto, 'message'))\n      result = result | 1;\n    if (hasProp(proto, 'cause'))\n      result = result | 2;\n    if (!(result === 3)) {\n      var parentProto = getPrototypeOf(proto);\n      if (parentProto != Error.prototype) {\n        result = result | calculateErrorInfo(parentProto);\n      }\n    }\n    if (!(metadata == null)) {\n      metadata.errorInfo = result;\n    }\n    return result;\n  }\n  function hasProp(proto, propName) {\n    return proto.hasOwnProperty(propName);\n  }\n  function getPrototypeOf(obj) {\n    return Object.getPrototypeOf(obj);\n  }\n  function get_VOID() {\n    _init_properties_void_kt__3zg9as();\n    return VOID;\n  }\n  var VOID;\n  var properties_initialized_void_kt_e4ret2;\n  function _init_properties_void_kt__3zg9as() {\n    if (!properties_initialized_void_kt_e4ret2) {\n      properties_initialized_void_kt_e4ret2 = true;\n      VOID = void 0;\n    }\n  }\n  function contentEquals(_this__u8e3s4, other) {\n    return contentEqualsInternal(_this__u8e3s4, other);\n  }\n  function contentHashCode(_this__u8e3s4) {\n    return contentHashCodeInternal(_this__u8e3s4);\n  }\n  function asList(_this__u8e3s4) {\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    return new ArrayList(_this__u8e3s4);\n  }\n  function decodeVarLenBase64(base64, fromBase64, resultLength) {\n    var result = new Int32Array(resultLength);\n    var index = 0;\n    var int = 0;\n    var shift = 0;\n    var inductionVariable = 0;\n    var last = base64.length;\n    while (inductionVariable < last) {\n      var char = charSequenceGet(base64, inductionVariable);\n      inductionVariable = inductionVariable + 1 | 0;\n      // Inline function 'kotlin.code' call\n      var sixBit = fromBase64[Char__toInt_impl_vasixd(char)];\n      int = int | (sixBit & 31) << shift;\n      if (sixBit < 32) {\n        var tmp1 = index;\n        index = tmp1 + 1 | 0;\n        result[tmp1] = int;\n        int = 0;\n        shift = 0;\n      } else {\n        shift = shift + 5 | 0;\n      }\n    }\n    return result;\n  }\n  function isDigitImpl(_this__u8e3s4) {\n    return digitToIntImpl(_this__u8e3s4) >= 0;\n  }\n  function digitToIntImpl(_this__u8e3s4) {\n    // Inline function 'kotlin.code' call\n    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);\n    var index = binarySearchRange(Digit_getInstance().s3_1, ch);\n    var diff = ch - Digit_getInstance().s3_1[index] | 0;\n    return diff < 10 ? diff : -1;\n  }\n  function binarySearchRange(array, needle) {\n    var bottom = 0;\n    var top = array.length - 1 | 0;\n    var middle = -1;\n    var value = 0;\n    while (bottom <= top) {\n      middle = (bottom + top | 0) / 2 | 0;\n      value = array[middle];\n      if (needle > value)\n        bottom = middle + 1 | 0;\n      else if (needle === value)\n        return middle;\n      else\n        top = middle - 1 | 0;\n    }\n    return middle - (needle < value ? 1 : 0) | 0;\n  }\n  function Digit() {\n    Digit_instance = this;\n    var tmp = this;\n    // Inline function 'kotlin.intArrayOf' call\n    tmp.s3_1 = new Int32Array([48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296]);\n  }\n  var Digit_instance;\n  function Digit_getInstance() {\n    if (Digit_instance == null)\n      new Digit();\n    return Digit_instance;\n  }\n  function isLetterImpl(_this__u8e3s4) {\n    return !(getLetterType(_this__u8e3s4) === 0);\n  }\n  function getLetterType(_this__u8e3s4) {\n    // Inline function 'kotlin.code' call\n    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);\n    var index = binarySearchRange(Letter_getInstance().t3_1, ch);\n    var rangeStart = Letter_getInstance().t3_1[index];\n    var rangeEnd = (rangeStart + Letter_getInstance().u3_1[index] | 0) - 1 | 0;\n    var code = Letter_getInstance().v3_1[index];\n    if (ch > rangeEnd) {\n      return 0;\n    }\n    var lastTwoBits = code & 3;\n    if (lastTwoBits === 0) {\n      var shift = 2;\n      var threshold = rangeStart;\n      var inductionVariable = 0;\n      if (inductionVariable <= 1)\n        do {\n          var i = inductionVariable;\n          inductionVariable = inductionVariable + 1 | 0;\n          threshold = threshold + (code >> shift & 127) | 0;\n          if (threshold > ch) {\n            return 3;\n          }\n          shift = shift + 7 | 0;\n          threshold = threshold + (code >> shift & 127) | 0;\n          if (threshold > ch) {\n            return 0;\n          }\n          shift = shift + 7 | 0;\n        }\n         while (inductionVariable <= 1);\n      return 3;\n    }\n    if (code <= 7) {\n      return lastTwoBits;\n    }\n    var distance = ch - rangeStart | 0;\n    var shift_0 = code <= 31 ? distance % 2 | 0 : distance;\n    return code >> imul(2, shift_0) & 3;\n  }\n  function Letter() {\n    Letter_instance = this;\n    var toBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var fromBase64 = new Int32Array(128);\n    var inductionVariable = 0;\n    var last = charSequenceLength(toBase64) - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        // Inline function 'kotlin.code' call\n        var this_0 = charSequenceGet(toBase64, i);\n        fromBase64[Char__toInt_impl_vasixd(this_0)] = i;\n      }\n       while (inductionVariable <= last);\n    var rangeStartDiff = 'hCgBpCQGYHZH5BRpBPPPPPPRMP5BPPlCPP6BkEPPPPcPXPzBvBrB3BOiDoBHwD+E3DauCnFmBmB2D6E1BlBTiBmBlBP5BhBiBrBvBjBqBnBPRtBiCmCtBlB0BmB5BiB7BmBgEmChBZgCoEoGVpBSfRhBPqKQ2BwBYoFgB4CJuTiEvBuCuDrF5DgEgFlJ1DgFmBQtBsBRGsB+BPiBlD1EIjDPRPPPQPPPPPGQSQS/DxENVNU+B9zCwBwBPPCkDPNnBPqDYY1R8B7FkFgTgwGgwUwmBgKwBuBScmEP/BPPPPPPrBP8B7F1B/ErBqC6B7BiBmBfQsBUwCw/KwqIwLwETPcPjQgJxFgBlBsD';\n    var diff = decodeVarLenBase64(rangeStartDiff, fromBase64, 222);\n    var start = new Int32Array(diff.length);\n    var inductionVariable_0 = 0;\n    var last_0 = diff.length - 1 | 0;\n    if (inductionVariable_0 <= last_0)\n      do {\n        var i_0 = inductionVariable_0;\n        inductionVariable_0 = inductionVariable_0 + 1 | 0;\n        if (i_0 === 0) {\n          start[i_0] = diff[i_0];\n        } else {\n          start[i_0] = start[i_0 - 1 | 0] + diff[i_0] | 0;\n        }\n      }\n       while (inductionVariable_0 <= last_0);\n    this.t3_1 = start;\n    var rangeLength = 'aaMBXHYH5BRpBPPPPPPRMP5BPPlCPPzBDOOPPcPXPzBvBjB3BOhDmBBpB7DoDYxB+EiBP1DoExBkBQhBekBPmBgBhBctBiBMWOOXhCsBpBkBUV3Ba4BkB0DlCgBXgBtD4FSdBfPhBPpKP0BvBXjEQ2CGsT8DhBtCqDpFvD1D3E0IrD2EkBJrBDOBsB+BPiBlB1EIjDPPPPPPPPPPPGPPMNLsBNPNPKCvBvBPPCkDPBmBPhDXXgD4B6FzEgDguG9vUtkB9JcuBSckEP/BPPPPPPBPf4FrBjEhBpC3B5BKaWPrBOwCk/KsCuLqDHPbPxPsFtEaaqDL';\n    this.u3_1 = decodeVarLenBase64(rangeLength, fromBase64, 222);\n    var rangeCategory = 'GFjgggUHGGFFZZZmzpz5qB6s6020B60ptltB6smt2sB60mz22B1+vv+8BZZ5s2850BW5q1ymtB506smzBF3q1q1qB1q1q1+Bgii4wDTm74g3KiggxqM60q1q1Bq1o1q1BF1qlrqrBZ2q5wprBGFZWWZGHFsjiooLowgmOowjkwCkgoiIk7ligGogiioBkwkiYkzj2oNoi+sbkwj04DghhkQ8wgiYkgoioDsgnkwC4gikQ//v+85BkwvoIsgoyI4yguI0whiwEowri4CoghsJowgqYowgm4DkwgsY/nwnzPowhmYkg6wI8yggZswikwHgxgmIoxgqYkwgk4DkxgmIkgoioBsgssoBgzgyI8g9gL8g9kI0wgwJoxgkoC0wgioFkw/wI0w53iF4gioYowjmgBHGq1qkgwBF1q1q8qBHwghuIwghyKk0goQkwgoQk3goQHGFHkyg0pBgxj6IoinkxDswno7Ikwhz9Bo0gioB8z48Rwli0xN0mpjoX8w78pDwltoqKHFGGwwgsIHFH3q1q16BFHWFZ1q10q1B2qlwq1B1q10q1B2q1yq1B6q1gq1Biq1qhxBir1qp1Bqt1q1qB1g1q1+B//3q16B///q1qBH/qlqq9Bholqq9B1i00a1q10qD1op1HkwmigEigiy6Cptogq1Bixo1kDq7/j00B2qgoBWGFm1lz50B6s5q1+BGWhggzhwBFFhgk4//Bo2jigE8wguI8wguI8wgugUog1qoB4qjmIwwi2KgkYHHH4lBgiFWkgIWoghssMmz5smrBZ3q1y50B5sm7gzBtz1smzB5smz50BqzqtmzB5sgzqzBF2/9//5BowgoIwmnkzPkwgk4C8ys65BkgoqI0wgy6FghquZo2giY0ghiIsgh24B4ghsQ8QF/v1q1OFs0O8iCHHF1qggz/B8wg6Iznv+//B08QgohsjK0QGFk7hsQ4gB';\n    this.v3_1 = decodeVarLenBase64(rangeCategory, fromBase64, 222);\n  }\n  var Letter_instance;\n  function Letter_getInstance() {\n    if (Letter_instance == null)\n      new Letter();\n    return Letter_instance;\n  }\n  function isWhitespaceImpl(_this__u8e3s4) {\n    // Inline function 'kotlin.code' call\n    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);\n    return (((9 <= ch ? ch <= 13 : false) ? true : 28 <= ch ? ch <= 32 : false) ? true : ch === 160) ? true : ch > 4096 ? (((((ch === 5760 ? true : 8192 <= ch ? ch <= 8202 : false) ? true : ch === 8232) ? true : ch === 8233) ? true : ch === 8239) ? true : ch === 8287) ? true : ch === 12288 : false;\n  }\n  function Exception_init_$Init$($this) {\n    extendThrowable($this);\n    Exception.call($this);\n    return $this;\n  }\n  function Exception_init_$Create$() {\n    var tmp = Exception_init_$Init$(objectCreate(protoOf(Exception)));\n    captureStack(tmp, Exception_init_$Create$);\n    return tmp;\n  }\n  function Exception_init_$Init$_0(message, $this) {\n    extendThrowable($this, message);\n    Exception.call($this);\n    return $this;\n  }\n  function Exception_init_$Create$_0(message) {\n    var tmp = Exception_init_$Init$_0(message, objectCreate(protoOf(Exception)));\n    captureStack(tmp, Exception_init_$Create$_0);\n    return tmp;\n  }\n  function Exception() {\n    captureStack(this, Exception);\n  }\n  function IllegalArgumentException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    IllegalArgumentException.call($this);\n    return $this;\n  }\n  function IllegalArgumentException_init_$Create$() {\n    var tmp = IllegalArgumentException_init_$Init$(objectCreate(protoOf(IllegalArgumentException)));\n    captureStack(tmp, IllegalArgumentException_init_$Create$);\n    return tmp;\n  }\n  function IllegalArgumentException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    IllegalArgumentException.call($this);\n    return $this;\n  }\n  function IllegalArgumentException_init_$Create$_0(message) {\n    var tmp = IllegalArgumentException_init_$Init$_0(message, objectCreate(protoOf(IllegalArgumentException)));\n    captureStack(tmp, IllegalArgumentException_init_$Create$_0);\n    return tmp;\n  }\n  function IllegalArgumentException() {\n    captureStack(this, IllegalArgumentException);\n  }\n  function IndexOutOfBoundsException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    IndexOutOfBoundsException.call($this);\n    return $this;\n  }\n  function IndexOutOfBoundsException_init_$Create$() {\n    var tmp = IndexOutOfBoundsException_init_$Init$(objectCreate(protoOf(IndexOutOfBoundsException)));\n    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);\n    return tmp;\n  }\n  function IndexOutOfBoundsException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    IndexOutOfBoundsException.call($this);\n    return $this;\n  }\n  function IndexOutOfBoundsException_init_$Create$_0(message) {\n    var tmp = IndexOutOfBoundsException_init_$Init$_0(message, objectCreate(protoOf(IndexOutOfBoundsException)));\n    captureStack(tmp, IndexOutOfBoundsException_init_$Create$_0);\n    return tmp;\n  }\n  function IndexOutOfBoundsException() {\n    captureStack(this, IndexOutOfBoundsException);\n  }\n  function IllegalStateException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    IllegalStateException.call($this);\n    return $this;\n  }\n  function IllegalStateException_init_$Create$() {\n    var tmp = IllegalStateException_init_$Init$(objectCreate(protoOf(IllegalStateException)));\n    captureStack(tmp, IllegalStateException_init_$Create$);\n    return tmp;\n  }\n  function IllegalStateException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    IllegalStateException.call($this);\n    return $this;\n  }\n  function IllegalStateException_init_$Create$_0(message) {\n    var tmp = IllegalStateException_init_$Init$_0(message, objectCreate(protoOf(IllegalStateException)));\n    captureStack(tmp, IllegalStateException_init_$Create$_0);\n    return tmp;\n  }\n  function IllegalStateException() {\n    captureStack(this, IllegalStateException);\n  }\n  function UnsupportedOperationException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    UnsupportedOperationException.call($this);\n    return $this;\n  }\n  function UnsupportedOperationException_init_$Create$() {\n    var tmp = UnsupportedOperationException_init_$Init$(objectCreate(protoOf(UnsupportedOperationException)));\n    captureStack(tmp, UnsupportedOperationException_init_$Create$);\n    return tmp;\n  }\n  function UnsupportedOperationException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    UnsupportedOperationException.call($this);\n    return $this;\n  }\n  function UnsupportedOperationException_init_$Create$_0(message) {\n    var tmp = UnsupportedOperationException_init_$Init$_0(message, objectCreate(protoOf(UnsupportedOperationException)));\n    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);\n    return tmp;\n  }\n  function UnsupportedOperationException() {\n    captureStack(this, UnsupportedOperationException);\n  }\n  function RuntimeException_init_$Init$($this) {\n    Exception_init_$Init$($this);\n    RuntimeException.call($this);\n    return $this;\n  }\n  function RuntimeException_init_$Create$() {\n    var tmp = RuntimeException_init_$Init$(objectCreate(protoOf(RuntimeException)));\n    captureStack(tmp, RuntimeException_init_$Create$);\n    return tmp;\n  }\n  function RuntimeException_init_$Init$_0(message, $this) {\n    Exception_init_$Init$_0(message, $this);\n    RuntimeException.call($this);\n    return $this;\n  }\n  function RuntimeException() {\n    captureStack(this, RuntimeException);\n  }\n  function NoSuchElementException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    NoSuchElementException.call($this);\n    return $this;\n  }\n  function NoSuchElementException_init_$Create$() {\n    var tmp = NoSuchElementException_init_$Init$(objectCreate(protoOf(NoSuchElementException)));\n    captureStack(tmp, NoSuchElementException_init_$Create$);\n    return tmp;\n  }\n  function NoSuchElementException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    NoSuchElementException.call($this);\n    return $this;\n  }\n  function NoSuchElementException_init_$Create$_0(message) {\n    var tmp = NoSuchElementException_init_$Init$_0(message, objectCreate(protoOf(NoSuchElementException)));\n    captureStack(tmp, NoSuchElementException_init_$Create$_0);\n    return tmp;\n  }\n  function NoSuchElementException() {\n    captureStack(this, NoSuchElementException);\n  }\n  function NumberFormatException_init_$Init$($this) {\n    IllegalArgumentException_init_$Init$($this);\n    NumberFormatException.call($this);\n    return $this;\n  }\n  function NumberFormatException_init_$Create$() {\n    var tmp = NumberFormatException_init_$Init$(objectCreate(protoOf(NumberFormatException)));\n    captureStack(tmp, NumberFormatException_init_$Create$);\n    return tmp;\n  }\n  function NumberFormatException_init_$Init$_0(message, $this) {\n    IllegalArgumentException_init_$Init$_0(message, $this);\n    NumberFormatException.call($this);\n    return $this;\n  }\n  function NumberFormatException_init_$Create$_0(message) {\n    var tmp = NumberFormatException_init_$Init$_0(message, objectCreate(protoOf(NumberFormatException)));\n    captureStack(tmp, NumberFormatException_init_$Create$_0);\n    return tmp;\n  }\n  function NumberFormatException() {\n    captureStack(this, NumberFormatException);\n  }\n  function ArithmeticException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    ArithmeticException.call($this);\n    return $this;\n  }\n  function ArithmeticException_init_$Create$() {\n    var tmp = ArithmeticException_init_$Init$(objectCreate(protoOf(ArithmeticException)));\n    captureStack(tmp, ArithmeticException_init_$Create$);\n    return tmp;\n  }\n  function ArithmeticException_init_$Init$_0(message, $this) {\n    RuntimeException_init_$Init$_0(message, $this);\n    ArithmeticException.call($this);\n    return $this;\n  }\n  function ArithmeticException_init_$Create$_0(message) {\n    var tmp = ArithmeticException_init_$Init$_0(message, objectCreate(protoOf(ArithmeticException)));\n    captureStack(tmp, ArithmeticException_init_$Create$_0);\n    return tmp;\n  }\n  function ArithmeticException() {\n    captureStack(this, ArithmeticException);\n  }\n  function NullPointerException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    NullPointerException.call($this);\n    return $this;\n  }\n  function NullPointerException_init_$Create$() {\n    var tmp = NullPointerException_init_$Init$(objectCreate(protoOf(NullPointerException)));\n    captureStack(tmp, NullPointerException_init_$Create$);\n    return tmp;\n  }\n  function NullPointerException() {\n    captureStack(this, NullPointerException);\n  }\n  function NoWhenBranchMatchedException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    NoWhenBranchMatchedException.call($this);\n    return $this;\n  }\n  function NoWhenBranchMatchedException_init_$Create$() {\n    var tmp = NoWhenBranchMatchedException_init_$Init$(objectCreate(protoOf(NoWhenBranchMatchedException)));\n    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);\n    return tmp;\n  }\n  function NoWhenBranchMatchedException() {\n    captureStack(this, NoWhenBranchMatchedException);\n  }\n  function ClassCastException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    ClassCastException.call($this);\n    return $this;\n  }\n  function ClassCastException_init_$Create$() {\n    var tmp = ClassCastException_init_$Init$(objectCreate(protoOf(ClassCastException)));\n    captureStack(tmp, ClassCastException_init_$Create$);\n    return tmp;\n  }\n  function ClassCastException() {\n    captureStack(this, ClassCastException);\n  }\n  function AbstractCollection$toString$lambda(this$0) {\n    return function (it) {\n      return it === this$0 ? '(this Collection)' : toString_0(it);\n    };\n  }\n  function AbstractCollection() {\n  }\n  protoOf(AbstractCollection).o = function () {\n    return this.n() === 0;\n  };\n  protoOf(AbstractCollection).toString = function () {\n    return joinToString_0(this, ', ', '[', ']', VOID, VOID, AbstractCollection$toString$lambda(this));\n  };\n  protoOf(AbstractCollection).toArray = function () {\n    return collectionToArray(this);\n  };\n  function Companion_2() {\n    this.v_1 = 2147483639;\n  }\n  protoOf(Companion_2).c1 = function (index, size) {\n    if (index < 0 ? true : index >= size) {\n      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);\n    }\n  };\n  protoOf(Companion_2).d1 = function (index, size) {\n    if (index < 0 ? true : index > size) {\n      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);\n    }\n  };\n  protoOf(Companion_2).x = function (c) {\n    var hashCode_0 = 1;\n    var tmp0_iterator = c.k();\n    while (tmp0_iterator.l()) {\n      var e = tmp0_iterator.m();\n      var tmp = imul(31, hashCode_0);\n      var tmp2_elvis_lhs = e == null ? null : hashCode(e);\n      hashCode_0 = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;\n    }\n    return hashCode_0;\n  };\n  protoOf(Companion_2).w = function (c, other) {\n    if (!(c.n() === other.n()))\n      return false;\n    var otherIterator = other.k();\n    var tmp0_iterator = c.k();\n    while (tmp0_iterator.l()) {\n      var elem = tmp0_iterator.m();\n      var elemOther = otherIterator.m();\n      if (!equals(elem, elemOther)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var Companion_instance_2;\n  function Companion_getInstance_2() {\n    return Companion_instance_2;\n  }\n  function collectionToArrayCommonImpl(collection) {\n    if (collection.o()) {\n      // Inline function 'kotlin.emptyArray' call\n      return [];\n    }\n    // Inline function 'kotlin.arrayOfNulls' call\n    var size = collection.n();\n    var destination = fillArrayVal(Array(size), null);\n    var iterator = collection.k();\n    var index = 0;\n    while (iterator.l()) {\n      var tmp0 = index;\n      index = tmp0 + 1 | 0;\n      destination[tmp0] = iterator.m();\n    }\n    return destination;\n  }\n  function listOfNotNull(elements) {\n    return filterNotNull(elements);\n  }\n  function get_lastIndex_0(_this__u8e3s4) {\n    return _this__u8e3s4.n() - 1 | 0;\n  }\n  function emptyList() {\n    return EmptyList_getInstance();\n  }\n  function arrayListOf(elements) {\n    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));\n  }\n  function EmptyList() {\n    EmptyList_instance = this;\n    this.y3_1 = new Long(-1478467534, -1720727600);\n  }\n  protoOf(EmptyList).equals = function (other) {\n    var tmp;\n    if (!(other == null) ? isInterface(other, List) : false) {\n      tmp = other.o();\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(EmptyList).hashCode = function () {\n    return 1;\n  };\n  protoOf(EmptyList).toString = function () {\n    return '[]';\n  };\n  protoOf(EmptyList).n = function () {\n    return 0;\n  };\n  protoOf(EmptyList).o = function () {\n    return true;\n  };\n  protoOf(EmptyList).s = function (index) {\n    throw IndexOutOfBoundsException_init_$Create$_0(\"Empty list doesn't contain element at index \" + index + '.');\n  };\n  protoOf(EmptyList).k = function () {\n    return EmptyIterator_instance;\n  };\n  var EmptyList_instance;\n  function EmptyList_getInstance() {\n    if (EmptyList_instance == null)\n      new EmptyList();\n    return EmptyList_instance;\n  }\n  function ArrayAsCollection(values, isVarargs) {\n    this.z3_1 = values;\n    this.a4_1 = isVarargs;\n  }\n  protoOf(ArrayAsCollection).n = function () {\n    return this.z3_1.length;\n  };\n  protoOf(ArrayAsCollection).o = function () {\n    // Inline function 'kotlin.collections.isEmpty' call\n    return this.z3_1.length === 0;\n  };\n  protoOf(ArrayAsCollection).k = function () {\n    return arrayIterator(this.z3_1);\n  };\n  function EmptyIterator() {\n  }\n  protoOf(EmptyIterator).l = function () {\n    return false;\n  };\n  protoOf(EmptyIterator).m = function () {\n    throw NoSuchElementException_init_$Create$();\n  };\n  var EmptyIterator_instance;\n  function EmptyIterator_getInstance() {\n    return EmptyIterator_instance;\n  }\n  function throwIndexOverflow() {\n    throw ArithmeticException_init_$Create$_0('Index overflow has happened.');\n  }\n  function addAll(_this__u8e3s4, elements) {\n    if (isInterface(elements, Collection))\n      return _this__u8e3s4.i(elements);\n    else {\n      var result = false;\n      var tmp1_iterator = elements.k();\n      while (tmp1_iterator.l()) {\n        var item = tmp1_iterator.m();\n        if (_this__u8e3s4.h(item))\n          result = true;\n      }\n      return result;\n    }\n  }\n  function IntIterator() {\n  }\n  protoOf(IntIterator).m = function () {\n    return this.b4();\n  };\n  function TransformingSequence$iterator$1(this$0) {\n    this.d4_1 = this$0;\n    this.c4_1 = this$0.e4_1.k();\n  }\n  protoOf(TransformingSequence$iterator$1).m = function () {\n    return this.d4_1.f4_1(this.c4_1.m());\n  };\n  protoOf(TransformingSequence$iterator$1).l = function () {\n    return this.c4_1.l();\n  };\n  function TransformingSequence(sequence, transformer) {\n    this.e4_1 = sequence;\n    this.f4_1 = transformer;\n  }\n  protoOf(TransformingSequence).k = function () {\n    return new TransformingSequence$iterator$1(this);\n  };\n  function getProgressionLastElement(start, end, step) {\n    var tmp;\n    if (step > 0) {\n      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;\n    } else if (step < 0) {\n      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;\n    } else {\n      throw IllegalArgumentException_init_$Create$_0('Step is zero.');\n    }\n    return tmp;\n  }\n  function differenceModulo(a, b, c) {\n    return mod(mod(a, c) - mod(b, c) | 0, c);\n  }\n  function mod(a, b) {\n    var mod = a % b | 0;\n    return mod >= 0 ? mod : mod + b | 0;\n  }\n  function Companion_3() {\n    Companion_instance_3 = this;\n    this.s2_1 = new IntRange(1, 0);\n  }\n  var Companion_instance_3;\n  function Companion_getInstance_3() {\n    if (Companion_instance_3 == null)\n      new Companion_3();\n    return Companion_instance_3;\n  }\n  function IntRange(start, endInclusive) {\n    Companion_getInstance_3();\n    IntProgression.call(this, start, endInclusive, 1);\n  }\n  protoOf(IntRange).j4 = function () {\n    return this.k4_1;\n  };\n  protoOf(IntRange).n4 = function () {\n    return this.l4_1;\n  };\n  protoOf(IntRange).o = function () {\n    return this.k4_1 > this.l4_1;\n  };\n  protoOf(IntRange).equals = function (other) {\n    var tmp;\n    if (other instanceof IntRange) {\n      tmp = (this.o() ? other.o() : false) ? true : this.k4_1 === other.k4_1 ? this.l4_1 === other.l4_1 : false;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IntRange).hashCode = function () {\n    return this.o() ? -1 : imul(31, this.k4_1) + this.l4_1 | 0;\n  };\n  protoOf(IntRange).toString = function () {\n    return '' + this.k4_1 + '..' + this.l4_1;\n  };\n  function IntProgressionIterator(first, last, step) {\n    IntIterator.call(this);\n    this.o4_1 = step;\n    this.p4_1 = last;\n    this.q4_1 = this.o4_1 > 0 ? first <= last : first >= last;\n    this.r4_1 = this.q4_1 ? first : this.p4_1;\n  }\n  protoOf(IntProgressionIterator).l = function () {\n    return this.q4_1;\n  };\n  protoOf(IntProgressionIterator).b4 = function () {\n    var value = this.r4_1;\n    if (value === this.p4_1) {\n      if (!this.q4_1)\n        throw NoSuchElementException_init_$Create$();\n      this.q4_1 = false;\n    } else {\n      this.r4_1 = this.r4_1 + this.o4_1 | 0;\n    }\n    return value;\n  };\n  function Companion_4() {\n  }\n  protoOf(Companion_4).t2 = function (rangeStart, rangeEnd, step) {\n    return new IntProgression(rangeStart, rangeEnd, step);\n  };\n  var Companion_instance_4;\n  function Companion_getInstance_4() {\n    return Companion_instance_4;\n  }\n  function IntProgression(start, endInclusive, step) {\n    if (step === 0)\n      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');\n    if (step === IntCompanionObject_instance.MIN_VALUE)\n      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');\n    this.k4_1 = start;\n    this.l4_1 = getProgressionLastElement(start, endInclusive, step);\n    this.m4_1 = step;\n  }\n  protoOf(IntProgression).k = function () {\n    return new IntProgressionIterator(this.k4_1, this.l4_1, this.m4_1);\n  };\n  protoOf(IntProgression).o = function () {\n    return this.m4_1 > 0 ? this.k4_1 > this.l4_1 : this.k4_1 < this.l4_1;\n  };\n  protoOf(IntProgression).equals = function (other) {\n    var tmp;\n    if (other instanceof IntProgression) {\n      tmp = (this.o() ? other.o() : false) ? true : (this.k4_1 === other.k4_1 ? this.l4_1 === other.l4_1 : false) ? this.m4_1 === other.m4_1 : false;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IntProgression).hashCode = function () {\n    return this.o() ? -1 : imul(31, imul(31, this.k4_1) + this.l4_1 | 0) + this.m4_1 | 0;\n  };\n  protoOf(IntProgression).toString = function () {\n    return this.m4_1 > 0 ? '' + this.k4_1 + '..' + this.l4_1 + ' step ' + this.m4_1 : '' + this.k4_1 + ' downTo ' + this.l4_1 + ' step ' + (-this.m4_1 | 0);\n  };\n  function appendElement(_this__u8e3s4, element, transform) {\n    if (!(transform == null)) {\n      _this__u8e3s4.l2(transform(element));\n    } else {\n      if (element == null ? true : isCharSequence(element)) {\n        _this__u8e3s4.l2(element);\n      } else {\n        if (element instanceof Char) {\n          _this__u8e3s4.k2(element.s4_1);\n        } else {\n          _this__u8e3s4.l2(toString_0(element));\n        }\n      }\n    }\n  }\n  function equals_0(_this__u8e3s4, other, ignoreCase) {\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    if (_this__u8e3s4 === other)\n      return true;\n    if (!ignoreCase)\n      return false;\n    var thisUpper = uppercaseChar(_this__u8e3s4);\n    var otherUpper = uppercaseChar(other);\n    var tmp;\n    if (thisUpper === otherUpper) {\n      tmp = true;\n    } else {\n      // Inline function 'kotlin.text.lowercaseChar' call\n      // Inline function 'kotlin.text.lowercase' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp$ret$2 = toString(thisUpper).toLowerCase();\n      var tmp_0 = charSequenceGet(tmp$ret$2, 0);\n      // Inline function 'kotlin.text.lowercaseChar' call\n      // Inline function 'kotlin.text.lowercase' call\n      // Inline function 'kotlin.js.unsafeCast' call\n      // Inline function 'kotlin.js.asDynamic' call\n      var tmp$ret$6 = toString(otherUpper).toLowerCase();\n      tmp = tmp_0 === charSequenceGet(tmp$ret$6, 0);\n    }\n    return tmp;\n  }\n  function toIntOrNull(_this__u8e3s4) {\n    return toIntOrNull_0(_this__u8e3s4, 10);\n  }\n  function numberFormatError(input) {\n    throw NumberFormatException_init_$Create$_0(\"Invalid number format: '\" + input + \"'\");\n  }\n  function toIntOrNull_0(_this__u8e3s4, radix) {\n    checkRadix(radix);\n    var length = _this__u8e3s4.length;\n    if (length === 0)\n      return null;\n    var start;\n    var isNegative;\n    var limit;\n    var firstChar = charSequenceGet(_this__u8e3s4, 0);\n    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {\n      if (length === 1)\n        return null;\n      start = 1;\n      if (firstChar === _Char___init__impl__6a9atx(45)) {\n        isNegative = true;\n        limit = IntCompanionObject_instance.MIN_VALUE;\n      } else if (firstChar === _Char___init__impl__6a9atx(43)) {\n        isNegative = false;\n        limit = -IntCompanionObject_instance.MAX_VALUE | 0;\n      } else\n        return null;\n    } else {\n      start = 0;\n      isNegative = false;\n      limit = -IntCompanionObject_instance.MAX_VALUE | 0;\n    }\n    var limitForMaxRadix = (-IntCompanionObject_instance.MAX_VALUE | 0) / 36 | 0;\n    var limitBeforeMul = limitForMaxRadix;\n    var result = 0;\n    var inductionVariable = start;\n    if (inductionVariable < length)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);\n        if (digit < 0)\n          return null;\n        if (result < limitBeforeMul) {\n          if (limitBeforeMul === limitForMaxRadix) {\n            limitBeforeMul = limit / radix | 0;\n            if (result < limitBeforeMul) {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        }\n        result = imul(result, radix);\n        if (result < (limit + digit | 0))\n          return null;\n        result = result - digit | 0;\n      }\n       while (inductionVariable < length);\n    return isNegative ? result : -result | 0;\n  }\n  function get_lastIndex_1(_this__u8e3s4) {\n    return charSequenceLength(_this__u8e3s4) - 1 | 0;\n  }\n  function indexOf(_this__u8e3s4, string, startIndex, ignoreCase) {\n    startIndex = startIndex === VOID ? 0 : startIndex;\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    var tmp;\n    var tmp_0;\n    if (ignoreCase) {\n      tmp_0 = true;\n    } else {\n      tmp_0 = !(typeof _this__u8e3s4 === 'string');\n    }\n    if (tmp_0) {\n      tmp = indexOf_0(_this__u8e3s4, string, startIndex, charSequenceLength(_this__u8e3s4), ignoreCase);\n    } else {\n      // Inline function 'kotlin.text.nativeIndexOf' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = _this__u8e3s4.indexOf(string, startIndex);\n    }\n    return tmp;\n  }\n  function indexOf_0(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {\n    last = last === VOID ? false : last;\n    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), coerceAtLeast(endIndex, 0));\n    var tmp;\n    if (typeof _this__u8e3s4 === 'string') {\n      tmp = typeof other === 'string';\n    } else {\n      tmp = false;\n    }\n    if (tmp) {\n      var inductionVariable = indices.k4_1;\n      var last_0 = indices.l4_1;\n      var step = indices.m4_1;\n      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)\n        do {\n          var index = inductionVariable;\n          inductionVariable = inductionVariable + step | 0;\n          if (regionMatches(other, 0, _this__u8e3s4, index, charSequenceLength(other), ignoreCase))\n            return index;\n        }\n         while (!(index === last_0));\n    } else {\n      var inductionVariable_0 = indices.k4_1;\n      var last_1 = indices.l4_1;\n      var step_0 = indices.m4_1;\n      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)\n        do {\n          var index_0 = inductionVariable_0;\n          inductionVariable_0 = inductionVariable_0 + step_0 | 0;\n          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))\n            return index_0;\n        }\n         while (!(index_0 === last_1));\n    }\n    return -1;\n  }\n  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {\n    if (((otherOffset < 0 ? true : thisOffset < 0) ? true : thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0)) ? true : otherOffset > (charSequenceLength(other) - length | 0)) {\n      return false;\n    }\n    var inductionVariable = 0;\n    if (inductionVariable < length)\n      do {\n        var index = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        if (!equals_0(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))\n          return false;\n      }\n       while (inductionVariable < length);\n    return true;\n  }\n  function lineSequence(_this__u8e3s4) {\n    return splitToSequence(_this__u8e3s4, ['\\r\\n', '\\n', '\\r']);\n  }\n  function get_indices(_this__u8e3s4) {\n    return numberRangeToNumber(0, charSequenceLength(_this__u8e3s4) - 1 | 0);\n  }\n  function splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit) {\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    limit = limit === VOID ? 0 : limit;\n    var tmp = rangesDelimitedBy(_this__u8e3s4, delimiters, VOID, ignoreCase, limit);\n    return map(tmp, splitToSequence$lambda(_this__u8e3s4));\n  }\n  function substring(_this__u8e3s4, range) {\n    return toString_1(charSequenceSubSequence(_this__u8e3s4, range.j4(), range.n4() + 1 | 0));\n  }\n  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {\n    startIndex = startIndex === VOID ? 0 : startIndex;\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    limit = limit === VOID ? 0 : limit;\n    requireNonNegativeLimit(limit);\n    var delimitersList = asList(delimiters);\n    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimitersList, ignoreCase));\n  }\n  function requireNonNegativeLimit(limit) {\n    // Inline function 'kotlin.contracts.contract' call\n    var tmp;\n    if (!(limit >= 0)) {\n      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call\n      var message = 'Limit must be non-negative, but was ' + limit;\n      throw IllegalArgumentException_init_$Create$_0(toString_1(message));\n    }\n    return tmp;\n  }\n  function calcNext($this) {\n    if ($this.v4_1 < 0) {\n      $this.t4_1 = 0;\n      $this.w4_1 = null;\n    } else {\n      var tmp;\n      var tmp_0;\n      if ($this.y4_1.b5_1 > 0) {\n        $this.x4_1 = $this.x4_1 + 1 | 0;\n        tmp_0 = $this.x4_1 >= $this.y4_1.b5_1;\n      } else {\n        tmp_0 = false;\n      }\n      if (tmp_0) {\n        tmp = true;\n      } else {\n        tmp = $this.v4_1 > charSequenceLength($this.y4_1.z4_1);\n      }\n      if (tmp) {\n        $this.w4_1 = numberRangeToNumber($this.u4_1, get_lastIndex_1($this.y4_1.z4_1));\n        $this.v4_1 = -1;\n      } else {\n        var match = $this.y4_1.c5_1($this.y4_1.z4_1, $this.v4_1);\n        if (match == null) {\n          $this.w4_1 = numberRangeToNumber($this.u4_1, get_lastIndex_1($this.y4_1.z4_1));\n          $this.v4_1 = -1;\n        } else {\n          var index = match.f5();\n          var length = match.g5();\n          $this.w4_1 = until($this.u4_1, index);\n          $this.u4_1 = index + length | 0;\n          $this.v4_1 = $this.u4_1 + (length === 0 ? 1 : 0) | 0;\n        }\n      }\n      $this.t4_1 = 1;\n    }\n  }\n  function DelimitedRangesSequence$iterator$1(this$0) {\n    this.y4_1 = this$0;\n    this.t4_1 = -1;\n    this.u4_1 = coerceIn(this$0.a5_1, 0, charSequenceLength(this$0.z4_1));\n    this.v4_1 = this.u4_1;\n    this.w4_1 = null;\n    this.x4_1 = 0;\n  }\n  protoOf(DelimitedRangesSequence$iterator$1).m = function () {\n    if (this.t4_1 === -1) {\n      calcNext(this);\n    }\n    if (this.t4_1 === 0)\n      throw NoSuchElementException_init_$Create$();\n    var tmp = this.w4_1;\n    var result = tmp instanceof IntRange ? tmp : THROW_CCE();\n    this.w4_1 = null;\n    this.t4_1 = -1;\n    return result;\n  };\n  protoOf(DelimitedRangesSequence$iterator$1).l = function () {\n    if (this.t4_1 === -1) {\n      calcNext(this);\n    }\n    return this.t4_1 === 1;\n  };\n  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {\n    this.z4_1 = input;\n    this.a5_1 = startIndex;\n    this.b5_1 = limit;\n    this.c5_1 = getNextMatch;\n  }\n  protoOf(DelimitedRangesSequence).k = function () {\n    return new DelimitedRangesSequence$iterator$1(this);\n  };\n  function findAnyOf(_this__u8e3s4, strings, startIndex, ignoreCase, last) {\n    if (!ignoreCase ? strings.n() === 1 : false) {\n      var string = single_0(strings);\n      var index = !last ? indexOf(_this__u8e3s4, string, startIndex) : lastIndexOf(_this__u8e3s4, string, startIndex);\n      return index < 0 ? null : to(index, string);\n    }\n    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), charSequenceLength(_this__u8e3s4)) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), 0);\n    if (typeof _this__u8e3s4 === 'string') {\n      var inductionVariable = indices.k4_1;\n      var last_0 = indices.l4_1;\n      var step = indices.m4_1;\n      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)\n        do {\n          var index_0 = inductionVariable;\n          inductionVariable = inductionVariable + step | 0;\n          var tmp$ret$1;\n          $l$block: {\n            // Inline function 'kotlin.collections.firstOrNull' call\n            var tmp0_iterator = strings.k();\n            while (tmp0_iterator.l()) {\n              var element = tmp0_iterator.m();\n              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call\n              if (regionMatches(element, 0, _this__u8e3s4, index_0, element.length, ignoreCase)) {\n                tmp$ret$1 = element;\n                break $l$block;\n              }\n            }\n            tmp$ret$1 = null;\n          }\n          var matchingString = tmp$ret$1;\n          if (!(matchingString == null))\n            return to(index_0, matchingString);\n        }\n         while (!(index_0 === last_0));\n    } else {\n      var inductionVariable_0 = indices.k4_1;\n      var last_1 = indices.l4_1;\n      var step_0 = indices.m4_1;\n      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)\n        do {\n          var index_1 = inductionVariable_0;\n          inductionVariable_0 = inductionVariable_0 + step_0 | 0;\n          var tmp$ret$3;\n          $l$block_0: {\n            // Inline function 'kotlin.collections.firstOrNull' call\n            var tmp0_iterator_0 = strings.k();\n            while (tmp0_iterator_0.l()) {\n              var element_0 = tmp0_iterator_0.m();\n              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call\n              if (regionMatchesImpl(element_0, 0, _this__u8e3s4, index_1, element_0.length, ignoreCase)) {\n                tmp$ret$3 = element_0;\n                break $l$block_0;\n              }\n            }\n            tmp$ret$3 = null;\n          }\n          var matchingString_0 = tmp$ret$3;\n          if (!(matchingString_0 == null))\n            return to(index_1, matchingString_0);\n        }\n         while (!(index_1 === last_1));\n    }\n    return null;\n  }\n  function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {\n    startIndex = startIndex === VOID ? get_lastIndex_1(_this__u8e3s4) : startIndex;\n    ignoreCase = ignoreCase === VOID ? false : ignoreCase;\n    var tmp;\n    var tmp_0;\n    if (ignoreCase) {\n      tmp_0 = true;\n    } else {\n      tmp_0 = !(typeof _this__u8e3s4 === 'string');\n    }\n    if (tmp_0) {\n      tmp = indexOf_0(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);\n    } else {\n      // Inline function 'kotlin.text.nativeLastIndexOf' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp = _this__u8e3s4.lastIndexOf(string, startIndex);\n    }\n    return tmp;\n  }\n  function splitToSequence$lambda($this_splitToSequence) {\n    return function (it) {\n      return substring($this_splitToSequence, it);\n    };\n  }\n  function rangesDelimitedBy$lambda($delimitersList, $ignoreCase) {\n    return function ($this$$receiver, currentIndex) {\n      var tmp0_safe_receiver = findAnyOf($this$$receiver, $delimitersList, currentIndex, $ignoreCase, false);\n      var tmp;\n      if (tmp0_safe_receiver == null) {\n        tmp = null;\n      } else {\n        // Inline function 'kotlin.let' call\n        // Inline function 'kotlin.contracts.contract' call\n        // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call\n        tmp = to(tmp0_safe_receiver.d5_1, tmp0_safe_receiver.e5_1.length);\n      }\n      return tmp;\n    };\n  }\n  function UnsafeLazyImpl(initializer) {\n    this.h5_1 = initializer;\n    this.i5_1 = UNINITIALIZED_VALUE_instance;\n  }\n  protoOf(UnsafeLazyImpl).j5 = function () {\n    if (this.i5_1 === UNINITIALIZED_VALUE_instance) {\n      this.i5_1 = ensureNotNull(this.h5_1)();\n      this.h5_1 = null;\n    }\n    var tmp = this.i5_1;\n    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();\n  };\n  protoOf(UnsafeLazyImpl).k5 = function () {\n    return !(this.i5_1 === UNINITIALIZED_VALUE_instance);\n  };\n  protoOf(UnsafeLazyImpl).toString = function () {\n    return this.k5() ? toString_0(this.j5()) : 'Lazy value not initialized yet.';\n  };\n  function UNINITIALIZED_VALUE() {\n  }\n  var UNINITIALIZED_VALUE_instance;\n  function UNINITIALIZED_VALUE_getInstance() {\n    return UNINITIALIZED_VALUE_instance;\n  }\n  function Pair(first, second) {\n    this.d5_1 = first;\n    this.e5_1 = second;\n  }\n  protoOf(Pair).toString = function () {\n    return '(' + this.d5_1 + ', ' + this.e5_1 + ')';\n  };\n  protoOf(Pair).f5 = function () {\n    return this.d5_1;\n  };\n  protoOf(Pair).g5 = function () {\n    return this.e5_1;\n  };\n  protoOf(Pair).hashCode = function () {\n    var result = this.d5_1 == null ? 0 : hashCode(this.d5_1);\n    result = imul(result, 31) + (this.e5_1 == null ? 0 : hashCode(this.e5_1)) | 0;\n    return result;\n  };\n  protoOf(Pair).equals = function (other) {\n    if (this === other)\n      return true;\n    if (!(other instanceof Pair))\n      return false;\n    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();\n    if (!equals(this.d5_1, tmp0_other_with_cast.d5_1))\n      return false;\n    if (!equals(this.e5_1, tmp0_other_with_cast.e5_1))\n      return false;\n    return true;\n  };\n  function to(_this__u8e3s4, that) {\n    return new Pair(_this__u8e3s4, that);\n  }\n  function _UShort___init__impl__jigrne(data) {\n    return data;\n  }\n  function _UShort___get_data__impl__g0245($this) {\n    return $this;\n  }\n  //region block: init\n  Unit_instance = new Unit();\n  IntCompanionObject_instance = new IntCompanionObject();\n  Companion_instance_2 = new Companion_2();\n  EmptyIterator_instance = new EmptyIterator();\n  Companion_instance_4 = new Companion_4();\n  UNINITIALIZED_VALUE_instance = new UNINITIALIZED_VALUE();\n  //endregion\n  //region block: exports\n  _.$_$ = _.$_$ || {};\n  _.$_$.a = arrayConcat;\n  _.$_$.b = getKClassFromExpression;\n  _.$_$.c = VOID;\n  _.$_$.d = ArrayList_init_$Create$_0;\n  _.$_$.e = ArrayList_init_$Create$;\n  _.$_$.f = IllegalStateException_init_$Create$_0;\n  _.$_$.g = NoSuchElementException_init_$Create$_0;\n  _.$_$.h = _Char___init__impl__6a9atx;\n  _.$_$.i = Char__hashCode_impl_otmys;\n  _.$_$.j = toString;\n  _.$_$.k = Unit_instance;\n  _.$_$.l = addAll;\n  _.$_$.m = contentEquals;\n  _.$_$.n = contentHashCode;\n  _.$_$.o = copyToArray;\n  _.$_$.p = filterNotNull;\n  _.$_$.q = firstOrNull;\n  _.$_$.r = first;\n  _.$_$.s = getOrNull;\n  _.$_$.t = joinToString_0;\n  _.$_$.u = joinToString;\n  _.$_$.v = last;\n  _.$_$.w = listOfNotNull;\n  _.$_$.x = listOf;\n  _.$_$.y = single;\n  _.$_$.z = charSequenceGet;\n  _.$_$.a1 = charSequenceLength;\n  _.$_$.b1 = classMeta;\n  _.$_$.c1 = equals;\n  _.$_$.d1 = getPropertyCallableRef;\n  _.$_$.e1 = getStringHashCode;\n  _.$_$.f1 = hashCode;\n  _.$_$.g1 = interfaceMeta;\n  _.$_$.h1 = isInterface;\n  _.$_$.i1 = objectMeta;\n  _.$_$.j1 = protoOf;\n  _.$_$.k1 = setMetadataFor;\n  _.$_$.l1 = toString_1;\n  _.$_$.m1 = KProperty0;\n  _.$_$.n1 = drop;\n  _.$_$.o1 = first_0;\n  _.$_$.p1 = indexOf;\n  _.$_$.q1 = isBlank;\n  _.$_$.r1 = isDigit;\n  _.$_$.s1 = isLetterOrDigit;\n  _.$_$.t1 = isLetter;\n  _.$_$.u1 = repeat;\n  _.$_$.v1 = take;\n  _.$_$.w1 = toInt;\n  _.$_$.x1 = Exception;\n  _.$_$.y1 = THROW_CCE;\n  _.$_$.z1 = ensureNotNull;\n  _.$_$.a2 = lazy;\n  _.$_$.b2 = noWhenBranchMatchedException;\n  _.$_$.c2 = printStackTrace;\n  //endregion\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-kotlin-stdlib.js.map\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/hypen-kotlin/kotlin/kotlin-kotlin-stdlib.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseHypen: () => (/* binding */ parseHypen),\n/* harmony export */   renderHypen: () => (/* binding */ renderHypen)\n/* harmony export */ });\nconst {renderCenter} = __webpack_require__(/*! ./render/components/center */ \"./src/render/components/center.js\");\nconst {renderImage}  = __webpack_require__(/*! ./render/components/image */ \"./src/render/components/image.js\");\nconst {renderContainer}  = __webpack_require__(/*! ./render/components/container */ \"./src/render/components/container.js\");\nconst {renderCanvas}  = __webpack_require__(/*! ./render/components/canvas */ \"./src/render/components/canvas.js\");\n\nconst assert = console.assert;\nconst {renderText} = __webpack_require__(/*! ./render/components/text */ \"./src/render/components/text.js\");\nconst {renderColumn} = __webpack_require__(/*! ./render/components/column */ \"./src/render/components/column.js\");\nconst {renderRow} = __webpack_require__(/*! ./render/components/row */ \"./src/render/components/row.js\");\nconst {renderList} = __webpack_require__(/*! ./render/components/list */ \"./src/render/components/list.js\");\n\nconst Hypen = ((__webpack_require__(/*! ./hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\n\nfunction renderBlock(block , parent){\n  assert(block instanceof Hypen.Block)\n  let res =  block.components.map((comp) => {\n    return renderComponent(comp, parent)\n  })\n    return res\n}\n\nfunction renderModule(input) {\n    console.assert(input instanceof Hypen.Module)\n    let result = renderBlock(input.block, input)\n    return result\n}\n\n\nfunction renderComponent(input,parent) {\n  console.assert(input instanceof Hypen.ComponentUsage)\n  switch (input.name.text.toLowerCase()) {\n    case \"text\":\n      let res = renderText(input,parent)\n        return res\n    case \"image\":\n      return renderImage(input)\n     case \"container\":\n          return renderContainer(input, parent, renderBlock)\n      case \"row\":\n      return renderRow(input, parent, renderBlock)\n    case \"column\":\n      return renderColumn(input, parent, renderBlock)\n    case \"center\":\n      return renderCenter(input, parent, renderBlock)\n    case \"list\":\n      return renderList(input, parent, renderBlock, renderRow, renderColumn)\n      case \"canvas\":\n          return renderCanvas(input, parent)\n      default:\n        console.log(\"Unknown component\")\n  }\n  return undefined;\n}\n\nfunction renderHypen(input){\n    let element = document.getElementById(\"hypenapp\")\n    let child\n  switch (input.constructor) {\n      case Hypen.Module:\n             child = renderModule(input)\n          break;\n        case Hypen.ComponentDefinition:\n            child =  renderBlock(input.block)\n            break;\n     case Hypen.ComponentUsage:\n         child = renderComponent(input)\n         break;\n      default:\n   }\n    function returnFirstIfArray(input) {\n        if (Array.isArray(input) && input.length > 0) {\n            return input[0];\n        }\n        return input;\n    }\n    let newEl = returnFirstIfArray(child)\n    if(newEl === undefined){\n        console.log(\"Parsing failed\")\n        return\n    }\n    if(element.children.length===0){\n        element.appendChild(newEl)\n    }else {\n        let selected = element.children[0]\n        selected.replaceWith(newEl)\n    }\n}\n\nfunction parseHypen(text, success, failure) {\n  const parser = new Hypen.HypenParser()\n  const res = parser.parse(text)\n  if(res instanceof Hypen.Success) {\n    success(res)\n  } else {\n      failure(res)\n}}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/main.js?");

/***/ }),

/***/ "./src/render/applicatorToCssMapping.js":
/*!**********************************************!*\
  !*** ./src/render/applicatorToCssMapping.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapApplicatorsToStyle: () => (/* binding */ mapApplicatorsToStyle),\n/* harmony export */   valueFromArgument: () => (/* binding */ valueFromArgument)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/render/utils.js\");\n\nconst Hypen = ((__webpack_require__(/*! ../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nconst applicatorHandlers = {\n    padding: applyPadding,\n    color: applyColor,\n    backgroundColor: applyBackgroundColor,\n    borderRadius: applyBorderRadius,\n    fontSize: applyFontSize,\n    fontWeight: applyFontWeight,\n    textStyle: applyTextStyle,\n    borderColor: applyBorderColor,\n    borderStyle: applyBorderStyle,\n    borderWidth: applyBorderWidth,\n    textAlign: applyTextAlign,\n    height: applyHeight,\n    margin: applyMargin,\n    width: applyWidth,\n    horizontalAlign: applyFlexProperties,\n    verticalAlign: applyFlexProperties,\n};\nfunction applyPadding(component, HTMLNode) {\n    const padding = component.applicators.find((it) => it.name.text === 'padding');\n    if (typeof padding !== 'undefined') {\n        const paddingSize = padding.arguments.arguments.length;\n        console.log(padding.arguments.arguments[0])\n        if (paddingSize === 1 && padding.arguments.arguments[0].name === null) {\n            const arg = valueFromArgument(padding.arguments.argFor('padding', 0));\n            console.log(\"Got padinng size >\", arg, \"<\")\n            HTMLNode.style.padding = arg + 'px';\n        } else {\n            padding.arguments.arguments.forEach((it) => {\n                switch (it.name.text) {\n                    case 'left':\n                        HTMLNode.style.paddingLeft = valueFromArgument(it.value) + 'px';\n                        console.log(\"Got padding name >\", it.name.text, \"<\", valueFromArgument(it.value))\n                        break;\n                    case 'right':\n                        HTMLNode.style.paddingRight = valueFromArgument(it.value) + 'px';\n                        break;\n                    case 'top':\n                        HTMLNode.style.paddingTop = valueFromArgument(it.value) + 'px';\n                        break;\n                    case 'bottom':\n                        HTMLNode.style.paddingBottom = valueFromArgument(it.value) + 'px';\n                        break;\n                    default:\n                        console.log(\"Got padding name >\", it.name.text, \"<\")\n                        break;\n                }\n            });\n        }\n    }\n}\n\nfunction applyFlexProperties(component, HTMLNode, parentComponent) {\n    if (parentComponent !== null && parentComponent!==undefined && (parentComponent.name.text === 'row' || parentComponent.name.text === 'column')) {\n        HTMLNode.style.flexGrow = 0;\n        HTMLNode.style.flexShrink = 1;\n        HTMLNode.style.flexBasis = 'auto';\n        if (parentComponent.name.text === 'row') { HTMLNode.style.minWidth = 0; } else { HTMLNode.style.minHeight = 0; }\n        const horizontalAlign = component.applicators.find((it) => it.name.text === 'horizontalAlign');\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(horizontalAlign)) {\n            switch (horizontalAlign) {\n                case 'left':\n                case 'start':\n                    HTMLNode.setAttribute('align-x', 'left');\n                    break;\n                case 'right':\n                case 'end':\n                    HTMLNode.setAttribute('align-x', 'right');\n                    break;\n                case 'center':\n                    HTMLNode.setAttribute('align-x', 'center');\n                    break;\n            }\n        }\n        const verticalAlign = component.applicators.find((it) => it.name.text === 'verticalAlign');\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(verticalAlign)) {\n            switch (verticalAlign) {\n                case 'top':\n                    HTMLNode.setAttribute('align-y', 'top');\n                    HTMLNode.setAttribute('align-y', 'top');\n                    break;\n                case 'right':\n                    HTMLNode.setAttribute('align-y', 'bottom');\n                    break;\n                case 'center':\n                case 'spaceAround':\n                case 'spaceBetween':\n                    HTMLNode.setAttribute('align-y', 'center');\n                    break;\n            }\n        }\n    }\n}\n\nfunction applyWidth(component, HTMLNode, parentComponent) {\n    const width = component.applicators.find((it) => it.name.text === 'width');\n    if (typeof width !== 'undefined') {\n        HTMLNode.style.minWidth = valueFromArgument(width.arguments.argFor('width', 0));\n        if (parentComponent !== null && (parentComponent.name.text === 'row' || parentComponent.name.text === 'list')) {\n            HTMLNode.style.flexBasis = valueFromArgument(width.arguments.argFor('width', 0)) ;\n        } else {\n            HTMLNode.style.width = valueFromArgument(width.arguments.argFor('width', 0));\n        }\n    }\n}\n\nfunction applyMargin(component, HTMLNode) {\n    const margin = component.applicators.find((it) => it.name.text === 'margin');\n    if (typeof margin !== 'undefined') {\n        const marginSize = margin.arguments.length;\n        if (marginSize === 1) {\n            HTMLNode.style.margin = valueFromArgument(margin.arguments.argFor('margin', 0));\n        } else {\n            margin.arguments.arguments.forEach((it) => {\n                switch (it.key) {\n                    case 'left':\n                        HTMLNode.style.marginLeft = valueFromArgument(it.value);\n                        break;\n                    case 'right':\n                        HTMLNode.style.marginRight = valueFromArgument(it.value);\n                        break;\n                    case 'top':\n                        HTMLNode.style.marginTop = valueFromArgument(it.value);\n                        break;\n                    case 'bottom':\n                        HTMLNode.style.marginBottom = valueFromArgument(it.value);\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n    }\n}\n\nfunction valueFromArgument(argument) {\n    if(argument==null)\n        return null;\n    switch (argument.constructor) {\n        case Hypen.Property:\n            return valueFromArgument(argument.value)\n        case Hypen.Object:\n            return valueFromArgument(argument.childrenArray[0])\n        case Hypen.QuotedString:\n            return argument.text\n        case Hypen.Number:\n            return argument.number\n        default:\n            return argument\n    }\n}\nfunction applyColor(component, HTMLNode) {\n    const color = component.applicators.find((it) => it.name.text === 'color');\n    if (typeof color !== 'undefined') {\n        let arg = valueFromArgument(color.arguments.argFor('color', 0));\n        HTMLNode.style.color = arg\n    }\n}\n\nfunction applyBackgroundColor(component, HTMLNode) {\n    const backgroundColor = component.applicators.find((it) => it.name.text === 'backgroundColor');\n    if (typeof backgroundColor !== 'undefined') {\n        let color = valueFromArgument(backgroundColor.arguments.argFor('backgroundColor', 0));\n        HTMLNode.style.backgroundColor = color\n    }\n}\n\nfunction applyBorderRadius(component, HTMLNode) {\n    const borderRadius = component.applicators.find((it) => it.name.text === 'borderRadius');\n    if (typeof borderRadius !== 'undefined') {\n        HTMLNode.style.borderRadius = valueFromArgument(borderRadius.arguments.argFor('borderRadius', 0));\n        HTMLNode.style.overflow = 'hidden';\n    }\n}\n\nfunction applyFontSize(component, HTMLNode) {\n    const fontSize = component.applicators.find((it) => it.name.text === 'fontSize');\n    if (typeof fontSize !== 'undefined') {\n        HTMLNode.style.fontSize = valueFromArgument(fontSize.arguments.argFor('fontSize', 0) + 'pt');\n    }\n}\n\nfunction applyFontWeight(component, HTMLNode) {\n    const fontWeight = component.applicators.find((it) => it.name.text === 'fontWeight');\n    if (typeof fontWeight !== 'undefined') {\n        HTMLNode.style.fontWeight = valueFromArgument(fontWeight.arguments.argFor('fontWeight', 0));\n    }\n}\n\nfunction applyTextStyle(component, HTMLNode) {\n    const textStyle = component.applicators.find((it) => it.name.text === 'textStyle');\n    if (typeof textStyle !== 'undefined') {\n        let hasAnotherDecoration = false;\n\n        const value = valueFromArgument(textStyle.arguments.argFor('style', 0));\n        if (value !== undefined && value !== null && value.length !== 0) {\n            let list;\n            if (value.includes(' ')) { list = value.split(' '); } else { list = [value]; }\n            list.forEach((it) => {\n                switch (it) {\n                    case 'italic' :\n                        HTMLNode.style.fontStyle = 'italic';\n                        break;\n                    case 'underline':\n                        if (hasAnotherDecoration) {\n                            HTMLNode.style.textDecoration += ' underline';\n                        } else { HTMLNode.style.textDecoration = 'underline'; }\n                        hasAnotherDecoration = true;\n                        break;\n                    case 'strikethrough':\n                        if (hasAnotherDecoration) {\n                            HTMLNode.style.textDecoration += ' line-through';\n                        } else { HTMLNode.style.textDecoration = 'line-through'; }\n\n                        hasAnotherDecoration = true;\n                        break;\n                }\n            });\n        }\n    }\n}\n\nfunction applyBorderColor(component, HTMLNode) {\n    const borderColor = component.applicators.find((it) => it.name.text === 'borderColor');\n    if (typeof borderColor !== 'undefined') {\n        if (HTMLNode.style.borderStyle === 'undefined' || HTMLNode.style.borderStyle === '') {\n            HTMLNode.style.borderColor = valueFromArgument(borderColor.arguments.argFor('color', 0));\n        }\n    }\n}\n\nfunction applyBorderStyle(component, HTMLNode) {\n    const borderStyle = component.applicators.find((it) => it.name.text === 'borderStyle');\n    if (typeof borderColor !== 'undefined') {\n        HTMLNode.style.borderStyle = valueFromArgument(borderStyle.arguments.argFor('style', 0));\n    }\n}\n\nfunction applyBorderWidth(component, HTMLNode) {\n    const borderWidth = component.applicators.find((it) => it.name.text === 'borderWidth');\n    if (typeof borderColor !== 'undefined') {\n        HTMLNode.style.borderWidth = valueFromArgument(borderWidth.arguments.argFor('width', 0));\n    }\n}\n\nfunction applyTextAlign(component, HTMLNode) {\n    const alignText = component.applicators.find((it) => it.name.text === 'textAlign');\n    if (typeof alignText !== 'undefined') {\n        HTMLNode.style.textAlign = valueFromArgument(alignText.arguments.argFor('textAlign', 0));\n    }\n}\n\nfunction applyHeight(component, HTMLNode, parentComponent) {\n    const height = component.applicators.find((it) => it.name.text === 'height');\n    if (typeof height !== 'undefined') {\n        if (parentComponent !== null && (parentComponent.name.text === 'column' || parentComponent.name.text === 'list')) {\n            HTMLNode.style.minHeight = valueFromArgument(height.arguments.argFor('height', 0));\n            HTMLNode.style.flexBasis = valueFromArgument(height.arguments.argFor('height', 0));\n        } else {\n         HTMLNode.style.height = valueFromArgument(height.arguments.argFor('height', 0));\n        }\n    }\n}\n\n\nfunction applyApplicators(component, HTMLNode, parentComponent) {\n    component.applicators.forEach((applicator) => {\n        const handler = applicatorHandlers[applicator.name.text];\n        if (handler) {\n            handler(component, HTMLNode, parentComponent);\n        }\n    });\n}\n\nfunction mapApplicatorsToStyle(component, parentComponent, HTMLNode) {\n    applyApplicators(component, HTMLNode, parentComponent);\n    return HTMLNode;\n}\n\n\n\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/applicatorToCssMapping.js?");

/***/ }),

/***/ "./src/render/components/canvas.js":
/*!*****************************************!*\
  !*** ./src/render/components/canvas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle, valueFromArgument} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst {applyCanvasApplicators} = __webpack_require__(/*! ./canvas/applicators */ \"./src/render/components/canvas/applicators.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"canvas\")\n\n    const canvas = document.createElement('canvas')\n    let ctx = canvas.getContext('2d');\n    mapApplicatorsToStyle(instance, parent, canvas)\n    renderCanvasChildren(ctx, instance.block.components)\n    return canvas\n}\n\nfunction renderCanvasComponent(ctx, component){\n    console.assert(component instanceof Hypen.ComponentUsage)\n    switch (component.name.text.toLowerCase()){\n        case \"rect\":\n            ctx.save()\n            let rect = {\n                x: valueFromArgument(component.argFor('x', 0)),\n                y: valueFromArgument(component.argFor('y', 1)),\n                width: valueFromArgument(component.argFor('width', 2)),\n                height: valueFromArgument(component.argFor('height', 3))\n            }\n            applyCanvasApplicators(ctx, component, rect)\n            ctx.fillRect(rect.x, rect.y, rect.width, rect.height)\n            transformCanvasContext(ctx, rect)\n            if(component.block != null && component.block.components != null)\n            renderCanvasChildren(ctx, component.block.components)\n            ctx.restore()\n            break\n        case \"circle\":\n            ctx.save()\n            applyCanvasApplicators(ctx, component)\n            ctx.arc(\n                valueFromArgument(component.argFor('x', 0)),\n                valueFromArgument(component.argFor('y', 1)),\n                valueFromArgument(component.argFor('radius', 2)),\n                valueFromArgument(component.argFor('startAngle', 3)),\n                valueFromArgument(component.argFor('endAngle', 4)),\n                valueFromArgument(component.argFor('counterclockwise', 5))\n            )\n            ctx.restore()\n            ctx.fillStyle = \"black\"\n            ctx.strokeStyle = \"black\"\n            break\n        default:\n            console.log(\"Unknown component type\", component.constructor.name)\n            return null\n    }\n}\nfunction renderCanvasChildren(ctx, children){\n    children.forEach((comp) => {\n        renderCanvasComponent(ctx, comp)\n    })\n}\n\nfunction transformCanvasContext(ctx, rect) {\n    if (ctx) {\n        ctx.translate(rect.x, rect.y);\n        ctx.scale(ctx.width/rect.width, ctx.height/rect.height);\n    } else {\n        console.error(\"Canvas not supported by the browser.\");\n    }\n}\n\n\nmodule.exports = {\n    renderCanvas: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/canvas.js?");

/***/ }),

/***/ "./src/render/components/canvas/applicators.js":
/*!*****************************************************!*\
  !*** ./src/render/components/canvas/applicators.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyCanvasApplicators: () => (/* binding */ applyCanvasApplicators)\n/* harmony export */ });\n/* harmony import */ var _applicatorToCssMapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\n\n\nconst applicatorHandlers = {\n    color: applyColor,\n    stroke: applyStroke,\n};\n\nfunction applyCanvasApplicators(ctx, component,rect) {\n    component.applicators.forEach((applicator) => {\n        const handler = applicatorHandlers[applicator.name.text];\n        if (handler) {\n            handler(ctx,component,rect);\n        }\n    });\n}\n\nfunction applyColor(ctx, component,rect) {\n    const fill = component.applicators.find((it) => it.name.text === 'color');\n    if (typeof fill !== 'undefined') {\n        ctx.fillStyle = (0,_applicatorToCssMapping__WEBPACK_IMPORTED_MODULE_0__.valueFromArgument)(fill.arguments.argFor('color', 0));\n    }\n}\n\nfunction applyStroke(ctx, component, rect) {\n    const fill = component.applicators.find((it) => it.name.text === 'stroke');\n    if (typeof fill !== 'undefined') {\n        ctx.strokeStyle = (0,_applicatorToCssMapping__WEBPACK_IMPORTED_MODULE_0__.valueFromArgument)(fill.arguments.argFor('color', 0));\n        ctx.strokeRect(rect.x,rect.y, rect.width, rect.height);\n    }\n}\n\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/canvas/applicators.js?");

/***/ }),

/***/ "./src/render/components/center.js":
/*!*****************************************!*\
  !*** ./src/render/components/center.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent, renderChildren){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"center\")\n\n    const center = document.createElement('div')\n    center.classList.add('center')\n\n    // CSS to center content\n    center.style.display = 'flex'\n    center.style.justifyContent = 'center'\n    center.style.alignItems = 'center'\n\n    let kids = renderChildren(instance.block, parent)\n    kids.forEach((child) => {\n        center.appendChild(child)\n    })\n\n    mapApplicatorsToStyle(instance, parent, center)\n    return center\n}\n\nmodule.exports = {\n    renderCenter: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/center.js?");

/***/ }),

/***/ "./src/render/components/column.js":
/*!*****************************************!*\
  !*** ./src/render/components/column.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent, renderChildren){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"column\")\n    const column = document.createElement('div')\n    column.classList.add('column')\n    let kids = renderChildren(instance.block, parent)\n    kids.forEach((child) => {\n        column.appendChild(child)\n    })\n    mapApplicatorsToStyle(instance,parent,column)\n    return column\n}\n\nmodule.exports = {\n    renderColumn: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/column.js?");

/***/ }),

/***/ "./src/render/components/container.js":
/*!********************************************!*\
  !*** ./src/render/components/container.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent, renderChildren){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"container\")\n    const column = document.createElement('div')\n    column.classList.add('container')\n    let kids = renderChildren(instance.block, parent)\n    kids.forEach((child) => {\n        column.appendChild(child)\n    })\n    mapApplicatorsToStyle(instance,parent,column)\n    console.log(\"Rendered column\", column)\n    return column\n}\n\nmodule.exports = {\n    renderContainer: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/container.js?");

/***/ }),

/***/ "./src/render/components/image.js":
/*!****************************************!*\
  !*** ./src/render/components/image.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle, valueFromArgument} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"image\")\n\n    const url = valueFromArgument(instance.arguments.argFor('url', 0))\n    const image = document.createElement('img')\n    image.src = url\n\n    mapApplicatorsToStyle(instance, parent, image)\n    return image\n}\n\nmodule.exports = {\n    renderImage: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/image.js?");

/***/ }),

/***/ "./src/render/components/list.js":
/*!***************************************!*\
  !*** ./src/render/components/list.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent, renderChildren, renderRow, renderColumn){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"list\")\n\n    let listDirection = instance.arguments.argFor('direction', 1)\n    const gap = instance.arguments.argFor('gap', 2)\n    if (listDirection === undefined || listDirection == null) {\n        listDirection = 'vertical'\n    }\n\n    const list = document.createElement('div')\n    list.style.display = 'flex' // Set display to flex\n    if (listDirection === 'vertical') {\n        list.style.flexDirection = 'column' // Set flex direction to row\n    } else {\n        list.style.flexDirection = 'row' // Set flex direction to row\n    }\n\n    list.style.gap = gap\n    list.style.flexWrap = 'nowrap'\n    list.style.whiteSpace = 'wrap'\n    list.style.overflow = 'scroll'\n    list.style.scrollHeight = 'none'\n    list.style.scrollWidth = 'none'\n\n    let kids = renderChildren(instance.block, parent)\n    kids.forEach((child) => {\n        list.appendChild(child)\n    })\n    mapApplicatorsToStyle(instance,parent,list)\n    console.log(\"Rendered List\", list)\n    return list\n}\n\nmodule.exports = {\n    renderList: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/list.js?");

/***/ }),

/***/ "./src/render/components/row.js":
/*!**************************************!*\
  !*** ./src/render/components/row.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent, renderChildren){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text.toLowerCase() === \"row\")\n    const column = document.createElement('div')\n    column.classList.add('row')\n    column.style.display = 'flex' // Set display to flex\n    column.style.flexDirection = 'row' // Set flex direction to row\n    let kids = renderChildren(instance.block, parent)\n    kids.forEach((child) => {\n        column.appendChild(child)\n    })\n    mapApplicatorsToStyle(instance,parent,column)\n    return column\n}\nmodule.exports = {\n    renderRow: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/row.js?");

/***/ }),

/***/ "./src/render/components/text.js":
/*!***************************************!*\
  !*** ./src/render/components/text.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {mapApplicatorsToStyle} = __webpack_require__(/*! ../applicatorToCssMapping */ \"./src/render/applicatorToCssMapping.js\");\nconst Hypen = ((__webpack_require__(/*! ../../hypen-kotlin/kotlin/hypen-kotlin.js */ \"./src/hypen-kotlin/kotlin/hypen-kotlin.js\").space).hypen.parser.combinators)\n\nfunction render(instance, parent){\n    console.assert(instance instanceof Hypen.ComponentUsage)\n    console.assert(instance.name.text === \"Text\")\n    const text = document.createElement('div')\n    let txtArgument = instance.arguments.find((arg) => {\n        let property = arg.value\n        let isTextNamed = (arg instanceof Hypen.Argument) && (arg.name!= null) && arg.name === \"text\"\n        if(isTextNamed){\n            return isTextNamed\n        } else return (property.value instanceof Hypen.QuotedString)\n    })\n    let extracted = txtArgument.value.value.text\n    text.innerText = extracted\n    mapApplicatorsToStyle(instance, parent, text)\n    return text\n}\n\nmodule.exports = {\n    renderText: render\n}\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/components/text.js?");

/***/ }),

/***/ "./src/render/utils.js":
/*!*****************************!*\
  !*** ./src/render/utils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   diffHtml: () => (/* binding */ diffHtml),\n/* harmony export */   findComponentInParent: () => (/* binding */ findComponentInParent),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   notUndefined: () => (/* binding */ notUndefined),\n/* harmony export */   randomColor: () => (/* binding */ randomColor),\n/* harmony export */   removeChildrenIfEmpty: () => (/* binding */ removeChildrenIfEmpty)\n/* harmony export */ });\n\nfunction findComponentInParent (component, idToFind) {\n    const res = component.childrenArray.find((it) => it.id === idToFind)\n    if (typeof res === 'undefined') {\n        return component.childrenArray.map((it) => findComponentInParent(it, idToFind)).find((it) => notUndefined(it))\n    } else {\n        return {\n            result: res,\n            parent: component.id\n        }\n    }\n}\n\nfunction removeChildrenIfEmpty (item) {\n    if (!isUndefined(item.childrenArray) && item.childrenArray.length === 0) {\n        delete item.childrenArray\n        delete item.children\n    } else if (!isUndefined(item.childrenArray)) {\n        console.log(item.childrenArray)\n        item.children = item.childrenArray.map((it) => {\n            return removeChildrenIfEmpty(it)\n        })\n    }\n    return item\n}\n\n// Serves for text generating\nconst startupy = ['active', 'arc', 'auto', 'app', 'avi', 'base', 'co', 'con', 'core', 'clear', 'en', 'echo', 'even', 'ever', 'fair', 'go', 'high', 'hyper', 'in', 'inter', 'iso', 'jump', 'live', 'make', 'mass', 'meta', 'matter', 'omni', 'on', 'one', 'open', 'over', 'out', 're', 'real', 'peak', 'pure', 'shift', 'silver', 'solid', 'spark', 'start', 'true', 'up', 'vibe']\nconst o = ['arc', 'atlas', 'base', 'bay', 'boost', 'capsule', 'case', 'center', 'cast', 'click', 'dash', 'deck', 'dock', 'dot', 'drop', 'engine', 'flow', 'glow', 'grid', 'gram', 'graph', 'hub', 'focus', 'kit', 'lab', 'level', 'layer', 'light', 'line', 'logic', 'load', 'loop', 'ment', 'method', 'mode', 'mark', 'ness', 'now', 'pass', 'port', 'post', 'press', 'push', 'rise', 'scape', 'scale', 'scan', 'scout', 'sense', 'set', 'shift', 'ship', 'side', 'signal', 'snap', 'scope', 'space', 'span', 'spark', 'spot', 'start', 'storm', 'stripe', 'sync', 'tap', 'tilt', 'ture', 'type', 'view', 'verge', 'vibe', 'ware', 'yard', 'up']\nconst a = ['.', '-', 'ary', 'able', 'ance', 'ible', 'ice', 'ite', 'er', 'eon', 'ent', 'ful', 'gent', 'tion', 'sion']\nconst d = ['.', '-', 'X', 'Live', 'Xtreme', 'Space', 'XYZ', 'astic']\nconst config = {\n    dictionaries: [startupy, o, a, d],\n    length: 3,\n    separator: '',\n    style: 'capital'\n}\n\n\nfunction formatDate (date) {\n    let dd = date.getDate()\n    let mm = date.getMonth() + 1\n    const yyyy = date.getFullYear()\n    if (dd < 10) { dd = '0' + dd }\n    if (mm < 10) { mm = '0' + mm }\n    date = dd + '.' + mm + '.' + yyyy\n    return date\n}\n\nfunction capitalizeFirstLetter (string) {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n// custom html diffing\nconst diffHtml = function (newElement, oldElement, depth) {\n    // Get arrays of child nodes\n    const oldNodes = Array.prototype.slice.call(oldElement.childNodes)\n    const newNodes = Array.prototype.slice.call(newElement.childNodes)\n\n    // If extra elements in DOM, remove them\n    let count = oldNodes.length - newNodes.length\n    if (count > 0) {\n        for (; count > 0; count--) {\n            oldNodes[oldNodes.length - count].parentNode.removeChild(oldNodes[oldNodes.length - count])\n        }\n    }\n\n    newNodes.forEach(function (node, index) {\n        // If element doesn't exist, create it\n        if (!oldNodes[index]) {\n            oldElement.appendChild(node.cloneNode(true))\n            return\n        }\n        // If element is not the same type, replace element\n        if (getNodeType(node) !== getNodeType(oldNodes[index])) {\n            oldNodes[index].parentNode.replaceChild(node.cloneNode(true), oldNodes[index])\n            return\n        }\n        console.log('Old style for id:' + node)\n        console.log(oldNodes[index].style)\n        console.log('New style:')\n        console.log(node.style)\n\n        if (node.style !== oldNodes[index].style) {\n            console.log('replacing style')\n            oldNodes[index].style = node.style\n        } else {\n            console.log('not replacing style')\n        }\n\n        if (node.className !== oldNodes[index].className) {\n            oldNodes[index].className = node.className\n        }\n\n        const oldContent = getNodeContent(node)\n        if (oldContent && oldContent !== getNodeContent(oldNodes[index])) {\n            oldNodes[index].textContent = oldContent\n        }\n\n        // If target element should be empty, wipe it\n        if (oldNodes[index].childNodes.length > 0 && node.childNodes.length < 1) {\n            oldNodes[index].innerHTML = ''\n            return\n        }\n\n        // replace the node\n        if (oldNodes[index].childNodes.length < 1 && node.childNodes.length > 0) {\n            const fragment = document.createDocumentFragment()\n            diffHtml(node, fragment, depth + 1)\n            oldNodes[index].appendChild(fragment)\n            return\n        }\n\n        if (node.childNodes.length > 0) {\n            diffHtml(node, oldNodes[index], depth + 1)\n        }\n    })\n}\n\nconst getNodeContent = function (node) {\n    if (node.childNodes && node.childNodes.length > 0) return null\n    return node.textContent\n}\n\nconst getNodeType = function (node) {\n    if (node.nodeType === 3) return 'text'\n    if (node.nodeType === 8) return 'comment'\n    return node.tagName.toLowerCase()\n}\n\nfunction notUndefined (it) {\n    return typeof it !== 'undefined'\n}\n\nfunction isUndefined (it) {\n    return typeof it === 'undefined'\n}\n\nfunction randomColor () {\n    return CSS_COLOR_NAMES[Math.floor(Math.random() * CSS_COLOR_NAMES.length)]\n}\n\n// CSS Color Names\n// Compiled by @bobspace.\n//\n// A javascript array containing all of the color names listed in the CSS Spec.\n// The full list can be found here: https://www.w3schools.com/cssref/css_colors.asp\n// Use it as you please, 'cuz you can't, like, own a color, man.\n\nconst CSS_COLOR_NAMES = [\n    'AliceBlue',\n    'Aqua',\n    'Aquamarine',\n    'Azure',\n    'Blue',\n    'BlueViolet',\n    'Chartreuse',\n    'Chocolate',\n    'Coral',\n    'Crimson',\n    'Cyan',\n    'DarkCyan',\n    'DarkGreen',\n    'DarkMagenta',\n    'DarkOrange',\n    'DarkOrchid',\n    'DarkRed',\n    'DarkSlateBlue',\n    'DarkTurquoise',\n    'DarkViolet',\n    'DeepPink',\n    'DeepSkyBlue',\n    'DodgerBlue',\n    'ForestGreen',\n    'Fuchsia',\n    'Gold',\n    'GoldenRod',\n    'Green',\n    'GreenYellow',\n    'HotPink',\n    'IndianRed',\n    'Indigo',\n    'Ivory',\n    'LawnGreen',\n    'LightCoral',\n    'Lime',\n    'LimeGreen',\n    'Magenta',\n    'MediumAquaMarine',\n    'MediumBlue',\n    'MediumOrchid',\n    'MediumPurple',\n    'MediumSeaGreen',\n    'MediumSlateBlue',\n    'MediumSpringGreen',\n    'MediumTurquoise',\n    'MediumVioletRed',\n    'Navy',\n    'Orange',\n    'OrangeRed',\n    'Orchid',\n    'PaleGreen',\n    'PaleTurquoise',\n    'PaleVioletRed',\n    'Plum',\n    'PowderBlue',\n    'Purple',\n    'RebeccaPurple',\n    'Red',\n    'RosyBrown',\n    'RoyalBlue',\n    'Salmon',\n    'SeaGreen',\n    'SkyBlue',\n    'SlateBlue',\n    'SpringGreen',\n    'SteelBlue',\n    'Teal',\n    'Thistle',\n    'Tomato',\n    'Turquoise',\n    'Violet',\n    'Yellow',\n    'YellowGreen'\n]\n\n\n//# sourceURL=webpack://@hypen-lang/hypen-render-web/./src/render/utils.js?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ var __webpack_exports__parseHypen = __webpack_exports__.parseHypen;
/******/ var __webpack_exports__renderHypen = __webpack_exports__.renderHypen;
/******/ export { __webpack_exports__parseHypen as parseHypen, __webpack_exports__renderHypen as renderHypen };
/******/ 
